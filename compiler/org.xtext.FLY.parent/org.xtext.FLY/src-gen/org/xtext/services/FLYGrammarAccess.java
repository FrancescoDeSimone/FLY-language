/*
 * generated by Xtext 2.16.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FLYGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.Fly");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Fly:
		//	elements+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Expression*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_0() { return cElementsExpressionParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrintExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFunctionDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFunctionReturnParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFlyFunctionCallParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cVariableDeclarationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cChannelSendParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cChannelReceiveParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLocalFunctionCallParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSortExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cVariableFunctionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cPostfixOperationParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cRequireExpressionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cNativeExpressionParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//Expression:
		//	Assignment | BlockExpression | IfExpression | ForExpression | WhileExpression | PrintExpression | FunctionDefinition |
		//	FunctionReturn | FlyFunctionCall | VariableDeclaration | ChannelSend | ChannelReceive | LocalFunctionCall |
		//	SortExpression | VariableFunction | PostfixOperation | RequireExpression | NativeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment | BlockExpression | IfExpression | ForExpression | WhileExpression | PrintExpression | FunctionDefinition |
		//FunctionReturn | FlyFunctionCall | VariableDeclaration | ChannelSend | ChannelReceive | LocalFunctionCall |
		//SortExpression | VariableFunction | PostfixOperation | RequireExpression | NativeExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//BlockExpression
		public RuleCall getBlockExpressionParserRuleCall_1() { return cBlockExpressionParserRuleCall_1; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_2() { return cIfExpressionParserRuleCall_2; }
		
		//ForExpression
		public RuleCall getForExpressionParserRuleCall_3() { return cForExpressionParserRuleCall_3; }
		
		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_4() { return cWhileExpressionParserRuleCall_4; }
		
		//PrintExpression
		public RuleCall getPrintExpressionParserRuleCall_5() { return cPrintExpressionParserRuleCall_5; }
		
		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_6() { return cFunctionDefinitionParserRuleCall_6; }
		
		//FunctionReturn
		public RuleCall getFunctionReturnParserRuleCall_7() { return cFunctionReturnParserRuleCall_7; }
		
		//FlyFunctionCall
		public RuleCall getFlyFunctionCallParserRuleCall_8() { return cFlyFunctionCallParserRuleCall_8; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_9() { return cVariableDeclarationParserRuleCall_9; }
		
		//ChannelSend
		public RuleCall getChannelSendParserRuleCall_10() { return cChannelSendParserRuleCall_10; }
		
		//ChannelReceive
		public RuleCall getChannelReceiveParserRuleCall_11() { return cChannelReceiveParserRuleCall_11; }
		
		//LocalFunctionCall
		public RuleCall getLocalFunctionCallParserRuleCall_12() { return cLocalFunctionCallParserRuleCall_12; }
		
		//SortExpression
		public RuleCall getSortExpressionParserRuleCall_13() { return cSortExpressionParserRuleCall_13; }
		
		//VariableFunction
		public RuleCall getVariableFunctionParserRuleCall_14() { return cVariableFunctionParserRuleCall_14; }
		
		//PostfixOperation
		public RuleCall getPostfixOperationParserRuleCall_15() { return cPostfixOperationParserRuleCall_15; }
		
		//RequireExpression
		public RuleCall getRequireExpressionParserRuleCall_16() { return cRequireExpressionParserRuleCall_16; }
		
		//NativeExpression
		public RuleCall getNativeExpressionParserRuleCall_17() { return cNativeExpressionParserRuleCall_17; }
	}
	public class SortExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.SortExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeAscKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeDescKeyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetVariableDeclarationCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetVariableDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetVariableDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTagetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTagetIDTerminalRuleCall_4_0 = (RuleCall)cTagetAssignment_4.eContents().get(0);
		
		//SortExpression:
		//	'sort' type=('asc' | 'desc') target=[VariableDeclaration] 'on' taget=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'sort' type=('asc' | 'desc') target=[VariableDeclaration] 'on' taget=ID
		public Group getGroup() { return cGroup; }
		
		//'sort'
		public Keyword getSortKeyword_0() { return cSortKeyword_0; }
		
		//type=('asc' | 'desc')
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//('asc' | 'desc')
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }
		
		//'asc'
		public Keyword getTypeAscKeyword_1_0_0() { return cTypeAscKeyword_1_0_0; }
		
		//'desc'
		public Keyword getTypeDescKeyword_1_0_1() { return cTypeDescKeyword_1_0_1; }
		
		//target=[VariableDeclaration]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[VariableDeclaration]
		public CrossReference getTargetVariableDeclarationCrossReference_2_0() { return cTargetVariableDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetVariableDeclarationIDTerminalRuleCall_2_0_1() { return cTargetVariableDeclarationIDTerminalRuleCall_2_0_1; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//taget=ID
		public Assignment getTagetAssignment_4() { return cTagetAssignment_4; }
		
		//ID
		public RuleCall getTagetIDTerminalRuleCall_4_0() { return cTagetIDTerminalRuleCall_4_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureVariableLiteralParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOpOpAsParserRuleCall_0_2_0 = (RuleCall)cOpAssignment_0_2.eContents().get(0);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueArithmeticExpressionParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAssignmentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeature_objAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFeature_objObjectLiteralParserRuleCall_1_1_0 = (RuleCall)cFeature_objAssignment_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOpOpAsParserRuleCall_1_2_0 = (RuleCall)cOpAssignment_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueArithmeticExpressionParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		
		//Assignment:
		//	{Assignment} feature=VariableLiteral op=OpAs value=ArithmeticExpression | {Assignment} feature_obj=ObjectLiteral
		//	op=OpAs value=ArithmeticExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Assignment} feature=VariableLiteral op=OpAs value=ArithmeticExpression | {Assignment} feature_obj=ObjectLiteral op=OpAs
		//value=ArithmeticExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Assignment} feature=VariableLiteral op=OpAs value=ArithmeticExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{Assignment}
		public Action getAssignmentAction_0_0() { return cAssignmentAction_0_0; }
		
		//feature=VariableLiteral
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }
		
		//VariableLiteral
		public RuleCall getFeatureVariableLiteralParserRuleCall_0_1_0() { return cFeatureVariableLiteralParserRuleCall_0_1_0; }
		
		//op=OpAs
		public Assignment getOpAssignment_0_2() { return cOpAssignment_0_2; }
		
		//OpAs
		public RuleCall getOpOpAsParserRuleCall_0_2_0() { return cOpOpAsParserRuleCall_0_2_0; }
		
		//value=ArithmeticExpression
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }
		
		//ArithmeticExpression
		public RuleCall getValueArithmeticExpressionParserRuleCall_0_3_0() { return cValueArithmeticExpressionParserRuleCall_0_3_0; }
		
		//{Assignment} feature_obj=ObjectLiteral op=OpAs value=ArithmeticExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{Assignment}
		public Action getAssignmentAction_1_0() { return cAssignmentAction_1_0; }
		
		//feature_obj=ObjectLiteral
		public Assignment getFeature_objAssignment_1_1() { return cFeature_objAssignment_1_1; }
		
		//ObjectLiteral
		public RuleCall getFeature_objObjectLiteralParserRuleCall_1_1_0() { return cFeature_objObjectLiteralParserRuleCall_1_1_0; }
		
		//op=OpAs
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }
		
		//OpAs
		public RuleCall getOpOpAsParserRuleCall_1_2_0() { return cOpOpAsParserRuleCall_1_2_0; }
		
		//value=ArithmeticExpression
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }
		
		//ArithmeticExpression
		public RuleCall getValueArithmeticExpressionParserRuleCall_1_3_0() { return cValueArithmeticExpressionParserRuleCall_1_3_0; }
	}
	public class OpAsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OpAs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAs:
		//	'=' |
		//	'+=';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '+='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }
	}
	public class PrintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.PrintExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintlnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPrintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrintArithmeticExpressionParserRuleCall_2_0 = (RuleCall)cPrintAssignment_2.eContents().get(0);
		
		//PrintExpression:
		//	{PrintExpression} 'println' print=ArithmeticExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrintExpression} 'println' print=ArithmeticExpression
		public Group getGroup() { return cGroup; }
		
		//{PrintExpression}
		public Action getPrintExpressionAction_0() { return cPrintExpressionAction_0; }
		
		//'println'
		public Keyword getPrintlnKeyword_1() { return cPrintlnKeyword_1; }
		
		//print=ArithmeticExpression
		public Assignment getPrintAssignment_2() { return cPrintAssignment_2; }
		
		//ArithmeticExpression
		public RuleCall getPrintArithmeticExpressionParserRuleCall_2_0() { return cPrintArithmeticExpressionParserRuleCall_2_0; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondArithmeticExpressionParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseExpressionParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//IfExpression:
		//	{IfExpression} 'if' '(' cond=ArithmeticExpression ')' then=Expression (=> 'else' else=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfExpression} 'if' '(' cond=ArithmeticExpression ')' then=Expression (=> 'else' else=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//cond=ArithmeticExpression
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//ArithmeticExpression
		public RuleCall getCondArithmeticExpressionParserRuleCall_3_0() { return cCondArithmeticExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//then=Expression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_5_0() { return cThenExpressionParserRuleCall_5_0; }
		
		//(=> 'else' else=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//=> 'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//else=Expression
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }
		
		//Expression
		public RuleCall getElseExpressionParserRuleCall_6_1_0() { return cElseExpressionParserRuleCall_6_1_0; }
	}
	public class ForExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ForExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexForIndexParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectArithmeticExpressionParserRuleCall_4_0 = (RuleCall)cObjectAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cByKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDelimeterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDelimeterForDelimeterParserRuleCall_5_1_0 = (RuleCall)cDelimeterAssignment_5_1.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//ForExpression:
		//	{ForExpression}
		//	'for' index=ForIndex 'in' object=ArithmeticExpression ('by' delimeter=ForDelimeter)? body=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForExpression} 'for' index=ForIndex 'in' object=ArithmeticExpression ('by' delimeter=ForDelimeter)? body=Expression
		public Group getGroup() { return cGroup; }
		
		//{ForExpression}
		public Action getForExpressionAction_0() { return cForExpressionAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//index=ForIndex
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//ForIndex
		public RuleCall getIndexForIndexParserRuleCall_2_0() { return cIndexForIndexParserRuleCall_2_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//object=ArithmeticExpression
		public Assignment getObjectAssignment_4() { return cObjectAssignment_4; }
		
		//ArithmeticExpression
		public RuleCall getObjectArithmeticExpressionParserRuleCall_4_0() { return cObjectArithmeticExpressionParserRuleCall_4_0; }
		
		//('by' delimeter=ForDelimeter)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'by'
		public Keyword getByKeyword_5_0() { return cByKeyword_5_0; }
		
		//delimeter=ForDelimeter
		public Assignment getDelimeterAssignment_5_1() { return cDelimeterAssignment_5_1; }
		
		//ForDelimeter
		public RuleCall getDelimeterForDelimeterParserRuleCall_5_1_0() { return cDelimeterForDelimeterParserRuleCall_5_1_0; }
		
		//body=Expression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_6_0() { return cBodyExpressionParserRuleCall_6_0; }
	}
	public class ForDelimeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ForDelimeter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeRowKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeColKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTypeDelimeterKeyword_2_0_0 = (Keyword)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cDelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDelSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDelAssignment_2_1.eContents().get(0);
		
		//ForDelimeter:
		//	type='row' | type='col' | type='delimeter' del=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//type='row' | type='col' | type='delimeter' del=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type='row'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'row'
		public Keyword getTypeRowKeyword_0_0() { return cTypeRowKeyword_0_0; }
		
		//type='col'
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//'col'
		public Keyword getTypeColKeyword_1_0() { return cTypeColKeyword_1_0; }
		
		//type='delimeter' del=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//type='delimeter'
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//'delimeter'
		public Keyword getTypeDelimeterKeyword_2_0_0() { return cTypeDelimeterKeyword_2_0_0; }
		
		//del=STRING
		public Assignment getDelAssignment_2_1() { return cDelAssignment_2_1; }
		
		//STRING
		public RuleCall getDelSTRINGTerminalRuleCall_2_1_0() { return cDelSTRINGTerminalRuleCall_2_1_0; }
	}
	public class ForIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ForIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIndicesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIndicesVariableForParserRuleCall_0_0 = (RuleCall)cIndicesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicesVariableForParserRuleCall_1_1_0 = (RuleCall)cIndicesAssignment_1_1.eContents().get(0);
		
		//ForIndex:
		//	indices+=VariableFor (',' indices+=VariableFor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//indices+=VariableFor (',' indices+=VariableFor)*
		public Group getGroup() { return cGroup; }
		
		//indices+=VariableFor
		public Assignment getIndicesAssignment_0() { return cIndicesAssignment_0; }
		
		//VariableFor
		public RuleCall getIndicesVariableForParserRuleCall_0_0() { return cIndicesVariableForParserRuleCall_0_0; }
		
		//(',' indices+=VariableFor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//indices+=VariableFor
		public Assignment getIndicesAssignment_1_1() { return cIndicesAssignment_1_1; }
		
		//VariableFor
		public RuleCall getIndicesVariableForParserRuleCall_1_1_0() { return cIndicesVariableForParserRuleCall_1_1_0; }
	}
	public class VariableForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.VariableFor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableFor:
		//	{VariableDeclaration} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableDeclaration} name=ID
		public Group getGroup() { return cGroup; }
		
		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class WhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.WhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondArithmeticExpressionParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//WhileExpression:
		//	{WhileExpression}
		//	'while' '(' cond=ArithmeticExpression ')' body=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{WhileExpression} 'while' '(' cond=ArithmeticExpression ')' body=Expression
		public Group getGroup() { return cGroup; }
		
		//{WhileExpression}
		public Action getWhileExpressionAction_0() { return cWhileExpressionAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//cond=ArithmeticExpression
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//ArithmeticExpression
		public RuleCall getCondArithmeticExpressionParserRuleCall_3_0() { return cCondArithmeticExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//body=Expression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_5_0() { return cBodyExpressionParserRuleCall_5_0; }
	}
	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockExpression:
		//	{BlockExpression}
		//	'{' expressions+=Expression* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BlockExpression} '{' expressions+=Expression* '}'
		public Group getGroup() { return cGroup; }
		
		//{BlockExpression}
		public Action getBlockExpressionAction_0() { return cBlockExpressionAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVariableDeclarationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeobjectAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cTypeobjectVarKeyword_0_1_0 = (Keyword)cTypeobjectAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Group cGroup_0_2_0 = (Group)cGroup_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_2_0_0 = (Assignment)cGroup_0_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0_0_0 = (RuleCall)cNameAssignment_0_2_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2_0_1 = (Keyword)cGroup_0_2_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2_0_2 = (Alternatives)cGroup_0_2_0.eContents().get(2);
		private final Assignment cRightAssignment_0_2_0_2_0 = (Assignment)cAlternatives_0_2_0_2.eContents().get(0);
		private final RuleCall cRightArithmeticExpressionParserRuleCall_0_2_0_2_0_0 = (RuleCall)cRightAssignment_0_2_0_2_0.eContents().get(0);
		private final Assignment cRightAssignment_0_2_0_2_1 = (Assignment)cAlternatives_0_2_0_2.eContents().get(1);
		private final RuleCall cRightObjectParserRuleCall_0_2_0_2_1_0 = (RuleCall)cRightAssignment_0_2_0_2_1.eContents().get(0);
		private final Assignment cRightAssignment_0_2_0_2_2 = (Assignment)cAlternatives_0_2_0_2.eContents().get(2);
		private final RuleCall cRightFlyFunctionCallParserRuleCall_0_2_0_2_2_0 = (RuleCall)cRightAssignment_0_2_0_2_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEnvironmentDeclarationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeobjectAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTypeobjectEnvKeyword_1_1_0 = (Keyword)cTypeobjectAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Assignment cNameAssignment_1_2_0_0 = (Assignment)cGroup_1_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0_0_0 = (RuleCall)cNameAssignment_1_2_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2_0_1 = (Keyword)cGroup_1_2_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2_0_2 = (Assignment)cGroup_1_2_0.eContents().get(2);
		private final RuleCall cRightDeclarationObjectParserRuleCall_1_2_0_2_0 = (RuleCall)cRightAssignment_1_2_0_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDatDeclarationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cTypeobjectAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cTypeobjectDatKeyword_2_1_0 = (Keyword)cTypeobjectAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Group cGroup_2_2_0 = (Group)cGroup_2_2.eContents().get(0);
		private final Assignment cNameAssignment_2_2_0_0 = (Assignment)cGroup_2_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0_0_0 = (RuleCall)cNameAssignment_2_2_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2_0_1 = (Keyword)cGroup_2_2_0.eContents().get(1);
		private final Alternatives cAlternatives_2_2_0_2 = (Alternatives)cGroup_2_2_0.eContents().get(2);
		private final Assignment cRightAssignment_2_2_0_2_0 = (Assignment)cAlternatives_2_2_0_2.eContents().get(0);
		private final RuleCall cRightArithmeticExpressionParserRuleCall_2_2_0_2_0_0 = (RuleCall)cRightAssignment_2_2_0_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_2_0_2_1 = (Assignment)cAlternatives_2_2_0_2.eContents().get(1);
		private final RuleCall cRightDeclarationObjectParserRuleCall_2_2_0_2_1_0 = (RuleCall)cRightAssignment_2_2_0_2_1.eContents().get(0);
		private final Group cGroup_2_2_0_3 = (Group)cGroup_2_2_0.eContents().get(3);
		private final Assignment cOnCloudAssignment_2_2_0_3_0 = (Assignment)cGroup_2_2_0_3.eContents().get(0);
		private final Keyword cOnCloudOnKeyword_2_2_0_3_0_0 = (Keyword)cOnCloudAssignment_2_2_0_3_0.eContents().get(0);
		private final Assignment cEnvironmentAssignment_2_2_0_3_1 = (Assignment)cGroup_2_2_0_3.eContents().get(1);
		private final CrossReference cEnvironmentEnvironmentDeclarationCrossReference_2_2_0_3_1_0 = (CrossReference)cEnvironmentAssignment_2_2_0_3_1.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentDeclarationIDTerminalRuleCall_2_2_0_3_1_0_1 = (RuleCall)cEnvironmentEnvironmentDeclarationCrossReference_2_2_0_3_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cRandomDeclarationAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cTypeobjectAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cTypeobjectRandomKeyword_3_1_0 = (Keyword)cTypeobjectAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cNameAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_2_0_0 = (RuleCall)cNameAssignment_3_2_0.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBinDeclarationAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cTypeobjectAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cTypeobjectBinKeyword_4_1_0 = (Keyword)cTypeobjectAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Group cGroup_4_2_0 = (Group)cGroup_4_2.eContents().get(0);
		private final Assignment cNameAssignment_4_2_0_0 = (Assignment)cGroup_4_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_4_2_0_0_0 = (RuleCall)cNameAssignment_4_2_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_2_0_1 = (Keyword)cGroup_4_2_0.eContents().get(1);
		private final Assignment cRightAssignment_4_2_0_2 = (Assignment)cGroup_4_2_0.eContents().get(2);
		private final RuleCall cRightDeclarationObjectParserRuleCall_4_2_0_2_0 = (RuleCall)cRightAssignment_4_2_0_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cOptimizerDeclarationAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cTypeobjectAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cTypeobjectOptKeyword_5_1_0 = (Keyword)cTypeobjectAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Group cGroup_5_2_0 = (Group)cGroup_5_2.eContents().get(0);
		private final Assignment cNameAssignment_5_2_0_0 = (Assignment)cGroup_5_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_5_2_0_0_0 = (RuleCall)cNameAssignment_5_2_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_2_0_1 = (Keyword)cGroup_5_2_0.eContents().get(1);
		private final Assignment cRightAssignment_5_2_0_2 = (Assignment)cGroup_5_2_0.eContents().get(2);
		private final RuleCall cRightDeclarationObjectParserRuleCall_5_2_0_2_0 = (RuleCall)cRightAssignment_5_2_0_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cChannelDeclarationAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cTypeobjectAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cTypeobjectChannelKeyword_6_1_0 = (Keyword)cTypeobjectAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Group cGroup_6_2_0 = (Group)cGroup_6_2.eContents().get(0);
		private final Assignment cNameAssignment_6_2_0_0 = (Assignment)cGroup_6_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_6_2_0_0_0 = (RuleCall)cNameAssignment_6_2_0_0.eContents().get(0);
		private final Keyword cOnKeyword_6_2_0_1 = (Keyword)cGroup_6_2_0.eContents().get(1);
		private final Assignment cEnvironmentAssignment_6_2_0_2 = (Assignment)cGroup_6_2_0.eContents().get(2);
		private final CrossReference cEnvironmentEnvironmentDeclarationCrossReference_6_2_0_2_0 = (CrossReference)cEnvironmentAssignment_6_2_0_2.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentDeclarationIDTerminalRuleCall_6_2_0_2_0_1 = (RuleCall)cEnvironmentEnvironmentDeclarationCrossReference_6_2_0_2_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cConstantDeclarationAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cTypeobjectAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cTypeobjectConstKeyword_7_1_0 = (Keyword)cTypeobjectAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Group cGroup_7_2_0 = (Group)cGroup_7_2.eContents().get(0);
		private final Assignment cNameAssignment_7_2_0_0 = (Assignment)cGroup_7_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_7_2_0_0_0 = (RuleCall)cNameAssignment_7_2_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_2_0_1 = (Keyword)cGroup_7_2_0.eContents().get(1);
		private final Alternatives cAlternatives_7_2_0_2 = (Alternatives)cGroup_7_2_0.eContents().get(2);
		private final Assignment cRightAssignment_7_2_0_2_0 = (Assignment)cAlternatives_7_2_0_2.eContents().get(0);
		private final RuleCall cRightArithmeticExpressionParserRuleCall_7_2_0_2_0_0 = (RuleCall)cRightAssignment_7_2_0_2_0.eContents().get(0);
		private final Assignment cRightAssignment_7_2_0_2_1 = (Assignment)cAlternatives_7_2_0_2.eContents().get(1);
		private final RuleCall cRightObjectParserRuleCall_7_2_0_2_1_0 = (RuleCall)cRightAssignment_7_2_0_2_1.eContents().get(0);
		
		//VariableDeclaration:
		//	{VariableDeclaration} typeobject='var' => (name=ID '=' (right=ArithmeticExpression | right=Object |
		//	right=FlyFunctionCall)) | {EnvironmentDeclaration} typeobject='env' => (name=ID '=' right=DeclarationObject) |
		//	{DatDeclaration} typeobject='dat' => (name=ID '=' (right=ArithmeticExpression | right=DeclarationObject)
		//	(onCloud?='on' environment=[EnvironmentDeclaration])?) | {RandomDeclaration} typeobject='random' => (name=ID) |
		//	{BinDeclaration} typeobject='bin' => (name=ID '=' right=DeclarationObject) | {OptimizerDeclaration} typeobject='opt'
		//	=> (name=ID '=' right=DeclarationObject) | {ChannelDeclaration} typeobject='channel' => (name=ID 'on'
		//	environment=[EnvironmentDeclaration]) | {ConstantDeclaration} typeobject='const' => (name=ID '='
		//	(right=ArithmeticExpression | right=Object));
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableDeclaration} typeobject='var' => (name=ID '=' (right=ArithmeticExpression | right=Object |
		//right=FlyFunctionCall)) | {EnvironmentDeclaration} typeobject='env' => (name=ID '=' right=DeclarationObject) |
		//{DatDeclaration} typeobject='dat' => (name=ID '=' (right=ArithmeticExpression | right=DeclarationObject) (onCloud?='on'
		//environment=[EnvironmentDeclaration])?) | {RandomDeclaration} typeobject='random' => (name=ID) | {BinDeclaration}
		//typeobject='bin' => (name=ID '=' right=DeclarationObject) | {OptimizerDeclaration} typeobject='opt' => (name=ID '='
		//right=DeclarationObject) | {ChannelDeclaration} typeobject='channel' => (name=ID 'on'
		//environment=[EnvironmentDeclaration]) | {ConstantDeclaration} typeobject='const' => (name=ID '='
		//(right=ArithmeticExpression | right=Object))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{VariableDeclaration} typeobject='var' => (name=ID '=' (right=ArithmeticExpression | right=Object |
		//right=FlyFunctionCall))
		public Group getGroup_0() { return cGroup_0; }
		
		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0_0() { return cVariableDeclarationAction_0_0; }
		
		//typeobject='var'
		public Assignment getTypeobjectAssignment_0_1() { return cTypeobjectAssignment_0_1; }
		
		//'var'
		public Keyword getTypeobjectVarKeyword_0_1_0() { return cTypeobjectVarKeyword_0_1_0; }
		
		//=> (name=ID '=' (right=ArithmeticExpression | right=Object | right=FlyFunctionCall))
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//name=ID '=' (right=ArithmeticExpression | right=Object | right=FlyFunctionCall)
		public Group getGroup_0_2_0() { return cGroup_0_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_2_0_0() { return cNameAssignment_0_2_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0_0_0() { return cNameIDTerminalRuleCall_0_2_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2_0_1() { return cEqualsSignKeyword_0_2_0_1; }
		
		//right=ArithmeticExpression | right=Object | right=FlyFunctionCall
		public Alternatives getAlternatives_0_2_0_2() { return cAlternatives_0_2_0_2; }
		
		//right=ArithmeticExpression
		public Assignment getRightAssignment_0_2_0_2_0() { return cRightAssignment_0_2_0_2_0; }
		
		//ArithmeticExpression
		public RuleCall getRightArithmeticExpressionParserRuleCall_0_2_0_2_0_0() { return cRightArithmeticExpressionParserRuleCall_0_2_0_2_0_0; }
		
		//right=Object
		public Assignment getRightAssignment_0_2_0_2_1() { return cRightAssignment_0_2_0_2_1; }
		
		//Object
		public RuleCall getRightObjectParserRuleCall_0_2_0_2_1_0() { return cRightObjectParserRuleCall_0_2_0_2_1_0; }
		
		//right=FlyFunctionCall
		public Assignment getRightAssignment_0_2_0_2_2() { return cRightAssignment_0_2_0_2_2; }
		
		//FlyFunctionCall
		public RuleCall getRightFlyFunctionCallParserRuleCall_0_2_0_2_2_0() { return cRightFlyFunctionCallParserRuleCall_0_2_0_2_2_0; }
		
		//{EnvironmentDeclaration} typeobject='env' => (name=ID '=' right=DeclarationObject)
		public Group getGroup_1() { return cGroup_1; }
		
		//{EnvironmentDeclaration}
		public Action getEnvironmentDeclarationAction_1_0() { return cEnvironmentDeclarationAction_1_0; }
		
		//typeobject='env'
		public Assignment getTypeobjectAssignment_1_1() { return cTypeobjectAssignment_1_1; }
		
		//'env'
		public Keyword getTypeobjectEnvKeyword_1_1_0() { return cTypeobjectEnvKeyword_1_1_0; }
		
		//=> (name=ID '=' right=DeclarationObject)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//name=ID '=' right=DeclarationObject
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_2_0_0() { return cNameAssignment_1_2_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0_0_0() { return cNameIDTerminalRuleCall_1_2_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2_0_1() { return cEqualsSignKeyword_1_2_0_1; }
		
		//right=DeclarationObject
		public Assignment getRightAssignment_1_2_0_2() { return cRightAssignment_1_2_0_2; }
		
		//DeclarationObject
		public RuleCall getRightDeclarationObjectParserRuleCall_1_2_0_2_0() { return cRightDeclarationObjectParserRuleCall_1_2_0_2_0; }
		
		//{DatDeclaration} typeobject='dat' => (name=ID '=' (right=ArithmeticExpression | right=DeclarationObject) (onCloud?='on'
		//environment=[EnvironmentDeclaration])?)
		public Group getGroup_2() { return cGroup_2; }
		
		//{DatDeclaration}
		public Action getDatDeclarationAction_2_0() { return cDatDeclarationAction_2_0; }
		
		//typeobject='dat'
		public Assignment getTypeobjectAssignment_2_1() { return cTypeobjectAssignment_2_1; }
		
		//'dat'
		public Keyword getTypeobjectDatKeyword_2_1_0() { return cTypeobjectDatKeyword_2_1_0; }
		
		//=> (name=ID '=' (right=ArithmeticExpression | right=DeclarationObject) (onCloud?='on'
		//environment=[EnvironmentDeclaration])?)
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//name=ID '=' (right=ArithmeticExpression | right=DeclarationObject) (onCloud?='on' environment=[EnvironmentDeclaration])?
		public Group getGroup_2_2_0() { return cGroup_2_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_2_0_0() { return cNameAssignment_2_2_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0_0_0() { return cNameIDTerminalRuleCall_2_2_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2_0_1() { return cEqualsSignKeyword_2_2_0_1; }
		
		//right=ArithmeticExpression | right=DeclarationObject
		public Alternatives getAlternatives_2_2_0_2() { return cAlternatives_2_2_0_2; }
		
		//right=ArithmeticExpression
		public Assignment getRightAssignment_2_2_0_2_0() { return cRightAssignment_2_2_0_2_0; }
		
		//ArithmeticExpression
		public RuleCall getRightArithmeticExpressionParserRuleCall_2_2_0_2_0_0() { return cRightArithmeticExpressionParserRuleCall_2_2_0_2_0_0; }
		
		//right=DeclarationObject
		public Assignment getRightAssignment_2_2_0_2_1() { return cRightAssignment_2_2_0_2_1; }
		
		//DeclarationObject
		public RuleCall getRightDeclarationObjectParserRuleCall_2_2_0_2_1_0() { return cRightDeclarationObjectParserRuleCall_2_2_0_2_1_0; }
		
		//(onCloud?='on' environment=[EnvironmentDeclaration])?
		public Group getGroup_2_2_0_3() { return cGroup_2_2_0_3; }
		
		//onCloud?='on'
		public Assignment getOnCloudAssignment_2_2_0_3_0() { return cOnCloudAssignment_2_2_0_3_0; }
		
		//'on'
		public Keyword getOnCloudOnKeyword_2_2_0_3_0_0() { return cOnCloudOnKeyword_2_2_0_3_0_0; }
		
		//environment=[EnvironmentDeclaration]
		public Assignment getEnvironmentAssignment_2_2_0_3_1() { return cEnvironmentAssignment_2_2_0_3_1; }
		
		//[EnvironmentDeclaration]
		public CrossReference getEnvironmentEnvironmentDeclarationCrossReference_2_2_0_3_1_0() { return cEnvironmentEnvironmentDeclarationCrossReference_2_2_0_3_1_0; }
		
		//ID
		public RuleCall getEnvironmentEnvironmentDeclarationIDTerminalRuleCall_2_2_0_3_1_0_1() { return cEnvironmentEnvironmentDeclarationIDTerminalRuleCall_2_2_0_3_1_0_1; }
		
		//{RandomDeclaration} typeobject='random' => (name=ID)
		public Group getGroup_3() { return cGroup_3; }
		
		//{RandomDeclaration}
		public Action getRandomDeclarationAction_3_0() { return cRandomDeclarationAction_3_0; }
		
		//typeobject='random'
		public Assignment getTypeobjectAssignment_3_1() { return cTypeobjectAssignment_3_1; }
		
		//'random'
		public Keyword getTypeobjectRandomKeyword_3_1_0() { return cTypeobjectRandomKeyword_3_1_0; }
		
		//=> (name=ID)
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//name=ID
		public Assignment getNameAssignment_3_2_0() { return cNameAssignment_3_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_2_0_0() { return cNameIDTerminalRuleCall_3_2_0_0; }
		
		//{BinDeclaration} typeobject='bin' => (name=ID '=' right=DeclarationObject)
		public Group getGroup_4() { return cGroup_4; }
		
		//{BinDeclaration}
		public Action getBinDeclarationAction_4_0() { return cBinDeclarationAction_4_0; }
		
		//typeobject='bin'
		public Assignment getTypeobjectAssignment_4_1() { return cTypeobjectAssignment_4_1; }
		
		//'bin'
		public Keyword getTypeobjectBinKeyword_4_1_0() { return cTypeobjectBinKeyword_4_1_0; }
		
		//=> (name=ID '=' right=DeclarationObject)
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//name=ID '=' right=DeclarationObject
		public Group getGroup_4_2_0() { return cGroup_4_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_4_2_0_0() { return cNameAssignment_4_2_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_2_0_0_0() { return cNameIDTerminalRuleCall_4_2_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_2_0_1() { return cEqualsSignKeyword_4_2_0_1; }
		
		//right=DeclarationObject
		public Assignment getRightAssignment_4_2_0_2() { return cRightAssignment_4_2_0_2; }
		
		//DeclarationObject
		public RuleCall getRightDeclarationObjectParserRuleCall_4_2_0_2_0() { return cRightDeclarationObjectParserRuleCall_4_2_0_2_0; }
		
		//{OptimizerDeclaration} typeobject='opt' => (name=ID '=' right=DeclarationObject)
		public Group getGroup_5() { return cGroup_5; }
		
		//{OptimizerDeclaration}
		public Action getOptimizerDeclarationAction_5_0() { return cOptimizerDeclarationAction_5_0; }
		
		//typeobject='opt'
		public Assignment getTypeobjectAssignment_5_1() { return cTypeobjectAssignment_5_1; }
		
		//'opt'
		public Keyword getTypeobjectOptKeyword_5_1_0() { return cTypeobjectOptKeyword_5_1_0; }
		
		//=> (name=ID '=' right=DeclarationObject)
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//name=ID '=' right=DeclarationObject
		public Group getGroup_5_2_0() { return cGroup_5_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_5_2_0_0() { return cNameAssignment_5_2_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_2_0_0_0() { return cNameIDTerminalRuleCall_5_2_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_2_0_1() { return cEqualsSignKeyword_5_2_0_1; }
		
		//right=DeclarationObject
		public Assignment getRightAssignment_5_2_0_2() { return cRightAssignment_5_2_0_2; }
		
		//DeclarationObject
		public RuleCall getRightDeclarationObjectParserRuleCall_5_2_0_2_0() { return cRightDeclarationObjectParserRuleCall_5_2_0_2_0; }
		
		//{ChannelDeclaration} typeobject='channel' => (name=ID 'on' environment=[EnvironmentDeclaration])
		public Group getGroup_6() { return cGroup_6; }
		
		//{ChannelDeclaration}
		public Action getChannelDeclarationAction_6_0() { return cChannelDeclarationAction_6_0; }
		
		//typeobject='channel'
		public Assignment getTypeobjectAssignment_6_1() { return cTypeobjectAssignment_6_1; }
		
		//'channel'
		public Keyword getTypeobjectChannelKeyword_6_1_0() { return cTypeobjectChannelKeyword_6_1_0; }
		
		//=> (name=ID 'on' environment=[EnvironmentDeclaration])
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//name=ID 'on' environment=[EnvironmentDeclaration]
		public Group getGroup_6_2_0() { return cGroup_6_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_6_2_0_0() { return cNameAssignment_6_2_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_2_0_0_0() { return cNameIDTerminalRuleCall_6_2_0_0_0; }
		
		//'on'
		public Keyword getOnKeyword_6_2_0_1() { return cOnKeyword_6_2_0_1; }
		
		//environment=[EnvironmentDeclaration]
		public Assignment getEnvironmentAssignment_6_2_0_2() { return cEnvironmentAssignment_6_2_0_2; }
		
		//[EnvironmentDeclaration]
		public CrossReference getEnvironmentEnvironmentDeclarationCrossReference_6_2_0_2_0() { return cEnvironmentEnvironmentDeclarationCrossReference_6_2_0_2_0; }
		
		//ID
		public RuleCall getEnvironmentEnvironmentDeclarationIDTerminalRuleCall_6_2_0_2_0_1() { return cEnvironmentEnvironmentDeclarationIDTerminalRuleCall_6_2_0_2_0_1; }
		
		//{ConstantDeclaration} typeobject='const' => (name=ID '=' (right=ArithmeticExpression | right=Object))
		public Group getGroup_7() { return cGroup_7; }
		
		//{ConstantDeclaration}
		public Action getConstantDeclarationAction_7_0() { return cConstantDeclarationAction_7_0; }
		
		//typeobject='const'
		public Assignment getTypeobjectAssignment_7_1() { return cTypeobjectAssignment_7_1; }
		
		//'const'
		public Keyword getTypeobjectConstKeyword_7_1_0() { return cTypeobjectConstKeyword_7_1_0; }
		
		//=> (name=ID '=' (right=ArithmeticExpression | right=Object))
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//name=ID '=' (right=ArithmeticExpression | right=Object)
		public Group getGroup_7_2_0() { return cGroup_7_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_7_2_0_0() { return cNameAssignment_7_2_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_7_2_0_0_0() { return cNameIDTerminalRuleCall_7_2_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_7_2_0_1() { return cEqualsSignKeyword_7_2_0_1; }
		
		//right=ArithmeticExpression | right=Object
		public Alternatives getAlternatives_7_2_0_2() { return cAlternatives_7_2_0_2; }
		
		//right=ArithmeticExpression
		public Assignment getRightAssignment_7_2_0_2_0() { return cRightAssignment_7_2_0_2_0; }
		
		//ArithmeticExpression
		public RuleCall getRightArithmeticExpressionParserRuleCall_7_2_0_2_0_0() { return cRightArithmeticExpressionParserRuleCall_7_2_0_2_0_0; }
		
		//right=Object
		public Assignment getRightAssignment_7_2_0_2_1() { return cRightAssignment_7_2_0_2_1; }
		
		//Object
		public RuleCall getRightObjectParserRuleCall_7_2_0_2_1_0() { return cRightObjectParserRuleCall_7_2_0_2_1_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.Object");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNameObjectDefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFeaturesAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFeaturesFeautureNameParserRuleCall_0_2_0 = (RuleCall)cFeaturesAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cFeaturesFeautureNameParserRuleCall_0_3_1_0 = (RuleCall)cFeaturesAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArrayDefinitionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexesIndexParserRuleCall_1_2_0 = (RuleCall)cIndexesAssignment_1_2.eContents().get(0);
		private final Assignment cIndexesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIndexesIndexParserRuleCall_1_3_0 = (RuleCall)cIndexesAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cArrayInitAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValuesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValuesArrayValueParserRuleCall_2_2_0 = (RuleCall)cValuesAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cValuesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cValuesArrayValueParserRuleCall_2_3_1_0 = (RuleCall)cValuesAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Object:
		//	{NameObjectDef} '{' features+=FeautureName? (',' features+=FeautureName)* '}' | {ArrayDefinition} type=Type
		//	indexes+=Index indexes+=Index* | {ArrayInit} '[' values+=ArrayValue? (',' values+=ArrayValue)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{NameObjectDef} '{' features+=FeautureName? (',' features+=FeautureName)* '}' | {ArrayDefinition} type=Type
		//indexes+=Index indexes+=Index* | {ArrayInit} '[' values+=ArrayValue? (',' values+=ArrayValue)* ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NameObjectDef} '{' features+=FeautureName? (',' features+=FeautureName)* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{NameObjectDef}
		public Action getNameObjectDefAction_0_0() { return cNameObjectDefAction_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//features+=FeautureName?
		public Assignment getFeaturesAssignment_0_2() { return cFeaturesAssignment_0_2; }
		
		//FeautureName
		public RuleCall getFeaturesFeautureNameParserRuleCall_0_2_0() { return cFeaturesFeautureNameParserRuleCall_0_2_0; }
		
		//(',' features+=FeautureName)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//','
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }
		
		//features+=FeautureName
		public Assignment getFeaturesAssignment_0_3_1() { return cFeaturesAssignment_0_3_1; }
		
		//FeautureName
		public RuleCall getFeaturesFeautureNameParserRuleCall_0_3_1_0() { return cFeaturesFeautureNameParserRuleCall_0_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//{ArrayDefinition} type=Type indexes+=Index indexes+=Index*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArrayDefinition}
		public Action getArrayDefinitionAction_1_0() { return cArrayDefinitionAction_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
		
		//indexes+=Index
		public Assignment getIndexesAssignment_1_2() { return cIndexesAssignment_1_2; }
		
		//Index
		public RuleCall getIndexesIndexParserRuleCall_1_2_0() { return cIndexesIndexParserRuleCall_1_2_0; }
		
		//indexes+=Index*
		public Assignment getIndexesAssignment_1_3() { return cIndexesAssignment_1_3; }
		
		//Index
		public RuleCall getIndexesIndexParserRuleCall_1_3_0() { return cIndexesIndexParserRuleCall_1_3_0; }
		
		//{ArrayInit} '[' values+=ArrayValue? (',' values+=ArrayValue)* ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//{ArrayInit}
		public Action getArrayInitAction_2_0() { return cArrayInitAction_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//values+=ArrayValue?
		public Assignment getValuesAssignment_2_2() { return cValuesAssignment_2_2; }
		
		//ArrayValue
		public RuleCall getValuesArrayValueParserRuleCall_2_2_0() { return cValuesArrayValueParserRuleCall_2_2_0; }
		
		//(',' values+=ArrayValue)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//values+=ArrayValue
		public Assignment getValuesAssignment_2_3_1() { return cValuesAssignment_2_3_1; }
		
		//ArrayValue
		public RuleCall getValuesArrayValueParserRuleCall_2_3_1_0() { return cValuesArrayValueParserRuleCall_2_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueArithmeticExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Index:
		//	"[" value=ArithmeticExpression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" value=ArithmeticExpression "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//value=ArithmeticExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ArithmeticExpression
		public RuleCall getValueArithmeticExpressionParserRuleCall_1_0() { return cValueArithmeticExpressionParserRuleCall_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ArrayValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArrayValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValuesAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValuesArrayValueParserRuleCall_0_2_0 = (RuleCall)cValuesAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cValuesAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cValuesArrayValueParserRuleCall_0_3_1_0 = (RuleCall)cValuesAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cArithmeticExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArrayValue:
		//	{ArrayValue} '[' values+=ArrayValue? (',' values+=ArrayValue)* ']' | ArithmeticExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayValue} '[' values+=ArrayValue? (',' values+=ArrayValue)* ']' | ArithmeticExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ArrayValue} '[' values+=ArrayValue? (',' values+=ArrayValue)* ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ArrayValue}
		public Action getArrayValueAction_0_0() { return cArrayValueAction_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//values+=ArrayValue?
		public Assignment getValuesAssignment_0_2() { return cValuesAssignment_0_2; }
		
		//ArrayValue
		public RuleCall getValuesArrayValueParserRuleCall_0_2_0() { return cValuesArrayValueParserRuleCall_0_2_0; }
		
		//(',' values+=ArrayValue)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//','
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }
		
		//values+=ArrayValue
		public Assignment getValuesAssignment_0_3_1() { return cValuesAssignment_0_3_1; }
		
		//ArrayValue
		public RuleCall getValuesArrayValueParserRuleCall_0_3_1_0() { return cValuesArrayValueParserRuleCall_0_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_1() { return cArithmeticExpressionParserRuleCall_1; }
	}
	public class DeclarationObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.DeclarationObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesDeclarationFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeaturesDeclarationFeatureParserRuleCall_3_1_0 = (RuleCall)cFeaturesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeclarationObject:
		//	{DeclarationObject} '[' features+=DeclarationFeature (',' features+=DeclarationFeature)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclarationObject} '[' features+=DeclarationFeature (',' features+=DeclarationFeature)* ']'
		public Group getGroup() { return cGroup; }
		
		//{DeclarationObject}
		public Action getDeclarationObjectAction_0() { return cDeclarationObjectAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//features+=DeclarationFeature
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//DeclarationFeature
		public RuleCall getFeaturesDeclarationFeatureParserRuleCall_2_0() { return cFeaturesDeclarationFeatureParserRuleCall_2_0; }
		
		//(',' features+=DeclarationFeature)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//features+=DeclarationFeature
		public Assignment getFeaturesAssignment_3_1() { return cFeaturesAssignment_3_1; }
		
		//DeclarationFeature
		public RuleCall getFeaturesDeclarationFeatureParserRuleCall_3_1_0() { return cFeaturesDeclarationFeatureParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class DeclarationFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.DeclarationFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureIDTerminalRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cValue_fAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cValue_fIDTerminalRuleCall_3_0_0 = (RuleCall)cValue_fAssignment_3_0.eContents().get(0);
		private final Assignment cValue_sAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cValue_sSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValue_sAssignment_3_1.eContents().get(0);
		private final Assignment cValue_tAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cValue_tINTTerminalRuleCall_3_2_0 = (RuleCall)cValue_tAssignment_3_2.eContents().get(0);
		private final Assignment cValue_bAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cValue_bBooleanLiteralParserRuleCall_3_3_0 = (RuleCall)cValue_bAssignment_3_3.eContents().get(0);
		
		//DeclarationFeature:
		//	{DeclarationFeature} feature=ID '=' (value_f=ID | value_s=STRING | value_t=INT | value_b=BooleanLiteral);
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclarationFeature} feature=ID '=' (value_f=ID | value_s=STRING | value_t=INT | value_b=BooleanLiteral)
		public Group getGroup() { return cGroup; }
		
		//{DeclarationFeature}
		public Action getDeclarationFeatureAction_0() { return cDeclarationFeatureAction_0; }
		
		//feature=ID
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//ID
		public RuleCall getFeatureIDTerminalRuleCall_1_0() { return cFeatureIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value_f=ID | value_s=STRING | value_t=INT | value_b=BooleanLiteral
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//value_f=ID
		public Assignment getValue_fAssignment_3_0() { return cValue_fAssignment_3_0; }
		
		//ID
		public RuleCall getValue_fIDTerminalRuleCall_3_0_0() { return cValue_fIDTerminalRuleCall_3_0_0; }
		
		//value_s=STRING
		public Assignment getValue_sAssignment_3_1() { return cValue_sAssignment_3_1; }
		
		//STRING
		public RuleCall getValue_sSTRINGTerminalRuleCall_3_1_0() { return cValue_sSTRINGTerminalRuleCall_3_1_0; }
		
		//value_t=INT
		public Assignment getValue_tAssignment_3_2() { return cValue_tAssignment_3_2; }
		
		//INT
		public RuleCall getValue_tINTTerminalRuleCall_3_2_0() { return cValue_tINTTerminalRuleCall_3_2_0; }
		
		//value_b=BooleanLiteral
		public Assignment getValue_bAssignment_3_3() { return cValue_bAssignment_3_3; }
		
		//BooleanLiteral
		public RuleCall getValue_bBooleanLiteralParserRuleCall_3_3_0() { return cValue_bBooleanLiteralParserRuleCall_3_3_0; }
	}
	public class FeautureNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.FeautureName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFeatureAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFeatureIDTerminalRuleCall_0_0_0 = (RuleCall)cFeatureAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueArithmeticExpressionParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueArithmeticExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cObjectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FeautureName:
		//	feature=ID '=' value=ArithmeticExpression | value=ArithmeticExpression | Object;
		@Override public ParserRule getRule() { return rule; }
		
		//feature=ID '=' value=ArithmeticExpression | value=ArithmeticExpression | Object
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//feature=ID '=' value=ArithmeticExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//feature=ID
		public Assignment getFeatureAssignment_0_0() { return cFeatureAssignment_0_0; }
		
		//ID
		public RuleCall getFeatureIDTerminalRuleCall_0_0_0() { return cFeatureIDTerminalRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//value=ArithmeticExpression
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//ArithmeticExpression
		public RuleCall getValueArithmeticExpressionParserRuleCall_0_2_0() { return cValueArithmeticExpressionParserRuleCall_0_2_0; }
		
		//value=ArithmeticExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ArithmeticExpression
		public RuleCall getValueArithmeticExpressionParserRuleCall_1_0() { return cValueArithmeticExpressionParserRuleCall_1_0; }
		
		//Object
		public RuleCall getObjectParserRuleCall_2() { return cObjectParserRuleCall_2; }
	}
	public class ObjectLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ObjectLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNameObjectAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cNameVariableDeclarationCrossReference_0_1_0 = (CrossReference)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cNameVariableDeclarationIDTerminalRuleCall_0_1_0_1 = (RuleCall)cNameVariableDeclarationCrossReference_0_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueIDTerminalRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIndexObjectAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNameVariableDeclarationCrossReference_1_1_0 = (CrossReference)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cNameVariableDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNameVariableDeclarationCrossReference_1_1_0.eContents().get(1);
		private final Assignment cIndexesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexesSubIndexParserRuleCall_1_2_0 = (RuleCall)cIndexesAssignment_1_2.eContents().get(0);
		private final Assignment cIndexesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIndexesSubIndexParserRuleCall_1_3_0 = (RuleCall)cIndexesAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDatSingleObjectAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cNameDatDeclarationCrossReference_2_1_0 = (CrossReference)cNameAssignment_2_1.eContents().get(0);
		private final RuleCall cNameDatDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cNameDatDeclarationCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cValue1Assignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Alternatives cValue1Alternatives_2_3_0 = (Alternatives)cValue1Assignment_2_3.eContents().get(0);
		private final RuleCall cValue1NumberLiteralParserRuleCall_2_3_0_0 = (RuleCall)cValue1Alternatives_2_3_0.eContents().get(0);
		private final RuleCall cValue1StringLiteralParserRuleCall_2_3_0_1 = (RuleCall)cValue1Alternatives_2_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cValue2Assignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final Alternatives cValue2Alternatives_2_5_0 = (Alternatives)cValue2Assignment_2_5.eContents().get(0);
		private final RuleCall cValue2NumberLiteralParserRuleCall_2_5_0_0 = (RuleCall)cValue2Alternatives_2_5_0.eContents().get(0);
		private final RuleCall cValue2StringLiteralParserRuleCall_2_5_0_1 = (RuleCall)cValue2Alternatives_2_5_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDatTableObjectAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cNameDatDeclarationCrossReference_3_1_0 = (CrossReference)cNameAssignment_3_1.eContents().get(0);
		private final RuleCall cNameDatDeclarationIDTerminalRuleCall_3_1_0_1 = (RuleCall)cNameDatDeclarationCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_3_3 = (Alternatives)cGroup_3.eContents().get(3);
		private final Assignment cRange1Assignment_3_3_0 = (Assignment)cAlternatives_3_3.eContents().get(0);
		private final RuleCall cRange1RangeLiteralParserRuleCall_3_3_0_0 = (RuleCall)cRange1Assignment_3_3_0.eContents().get(0);
		private final Assignment cRange1_tAssignment_3_3_1 = (Assignment)cAlternatives_3_3.eContents().get(1);
		private final RuleCall cRange1_tNumberLiteralParserRuleCall_3_3_1_0 = (RuleCall)cRange1_tAssignment_3_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cRange2Assignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cRange2RangeLiteralParserRuleCall_3_5_0 = (RuleCall)cRange2Assignment_3_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		
		//ObjectLiteral:
		//	{NameObject} name=[VariableDeclaration] "." value=ID | {IndexObject} name=[VariableDeclaration] indexes+=SubIndex
		//	indexes+=SubIndex* | {DatSingleObject} name=[DatDeclaration] "[" value1=(NumberLiteral | StringLiteral) ","
		//	value2=(NumberLiteral | StringLiteral) "]" | {DatTableObject} name=[DatDeclaration] "[" (range1=RangeLiteral |
		//	range1_t=NumberLiteral) "," range2=RangeLiteral "]";
		@Override public ParserRule getRule() { return rule; }
		
		//{NameObject} name=[VariableDeclaration] "." value=ID | {IndexObject} name=[VariableDeclaration] indexes+=SubIndex
		//indexes+=SubIndex* | {DatSingleObject} name=[DatDeclaration] "[" value1=(NumberLiteral | StringLiteral) ","
		//value2=(NumberLiteral | StringLiteral) "]" | {DatTableObject} name=[DatDeclaration] "[" (range1=RangeLiteral |
		//range1_t=NumberLiteral) "," range2=RangeLiteral "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NameObject} name=[VariableDeclaration] "." value=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{NameObject}
		public Action getNameObjectAction_0_0() { return cNameObjectAction_0_0; }
		
		//name=[VariableDeclaration]
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//[VariableDeclaration]
		public CrossReference getNameVariableDeclarationCrossReference_0_1_0() { return cNameVariableDeclarationCrossReference_0_1_0; }
		
		//ID
		public RuleCall getNameVariableDeclarationIDTerminalRuleCall_0_1_0_1() { return cNameVariableDeclarationIDTerminalRuleCall_0_1_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//value=ID
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_3_0() { return cValueIDTerminalRuleCall_0_3_0; }
		
		//{IndexObject} name=[VariableDeclaration] indexes+=SubIndex indexes+=SubIndex*
		public Group getGroup_1() { return cGroup_1; }
		
		//{IndexObject}
		public Action getIndexObjectAction_1_0() { return cIndexObjectAction_1_0; }
		
		//name=[VariableDeclaration]
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//[VariableDeclaration]
		public CrossReference getNameVariableDeclarationCrossReference_1_1_0() { return cNameVariableDeclarationCrossReference_1_1_0; }
		
		//ID
		public RuleCall getNameVariableDeclarationIDTerminalRuleCall_1_1_0_1() { return cNameVariableDeclarationIDTerminalRuleCall_1_1_0_1; }
		
		//indexes+=SubIndex
		public Assignment getIndexesAssignment_1_2() { return cIndexesAssignment_1_2; }
		
		//SubIndex
		public RuleCall getIndexesSubIndexParserRuleCall_1_2_0() { return cIndexesSubIndexParserRuleCall_1_2_0; }
		
		//indexes+=SubIndex*
		public Assignment getIndexesAssignment_1_3() { return cIndexesAssignment_1_3; }
		
		//SubIndex
		public RuleCall getIndexesSubIndexParserRuleCall_1_3_0() { return cIndexesSubIndexParserRuleCall_1_3_0; }
		
		//{DatSingleObject} name=[DatDeclaration] "[" value1=(NumberLiteral | StringLiteral) "," value2=(NumberLiteral |
		//StringLiteral) "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//{DatSingleObject}
		public Action getDatSingleObjectAction_2_0() { return cDatSingleObjectAction_2_0; }
		
		//name=[DatDeclaration]
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//[DatDeclaration]
		public CrossReference getNameDatDeclarationCrossReference_2_1_0() { return cNameDatDeclarationCrossReference_2_1_0; }
		
		//ID
		public RuleCall getNameDatDeclarationIDTerminalRuleCall_2_1_0_1() { return cNameDatDeclarationIDTerminalRuleCall_2_1_0_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }
		
		//value1=(NumberLiteral | StringLiteral)
		public Assignment getValue1Assignment_2_3() { return cValue1Assignment_2_3; }
		
		//(NumberLiteral | StringLiteral)
		public Alternatives getValue1Alternatives_2_3_0() { return cValue1Alternatives_2_3_0; }
		
		//NumberLiteral
		public RuleCall getValue1NumberLiteralParserRuleCall_2_3_0_0() { return cValue1NumberLiteralParserRuleCall_2_3_0_0; }
		
		//StringLiteral
		public RuleCall getValue1StringLiteralParserRuleCall_2_3_0_1() { return cValue1StringLiteralParserRuleCall_2_3_0_1; }
		
		//","
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//value2=(NumberLiteral | StringLiteral)
		public Assignment getValue2Assignment_2_5() { return cValue2Assignment_2_5; }
		
		//(NumberLiteral | StringLiteral)
		public Alternatives getValue2Alternatives_2_5_0() { return cValue2Alternatives_2_5_0; }
		
		//NumberLiteral
		public RuleCall getValue2NumberLiteralParserRuleCall_2_5_0_0() { return cValue2NumberLiteralParserRuleCall_2_5_0_0; }
		
		//StringLiteral
		public RuleCall getValue2StringLiteralParserRuleCall_2_5_0_1() { return cValue2StringLiteralParserRuleCall_2_5_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_6() { return cRightSquareBracketKeyword_2_6; }
		
		//{DatTableObject} name=[DatDeclaration] "[" (range1=RangeLiteral | range1_t=NumberLiteral) "," range2=RangeLiteral "]"
		public Group getGroup_3() { return cGroup_3; }
		
		//{DatTableObject}
		public Action getDatTableObjectAction_3_0() { return cDatTableObjectAction_3_0; }
		
		//name=[DatDeclaration]
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//[DatDeclaration]
		public CrossReference getNameDatDeclarationCrossReference_3_1_0() { return cNameDatDeclarationCrossReference_3_1_0; }
		
		//ID
		public RuleCall getNameDatDeclarationIDTerminalRuleCall_3_1_0_1() { return cNameDatDeclarationIDTerminalRuleCall_3_1_0_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_3_2() { return cLeftSquareBracketKeyword_3_2; }
		
		//range1=RangeLiteral | range1_t=NumberLiteral
		public Alternatives getAlternatives_3_3() { return cAlternatives_3_3; }
		
		//range1=RangeLiteral
		public Assignment getRange1Assignment_3_3_0() { return cRange1Assignment_3_3_0; }
		
		//RangeLiteral
		public RuleCall getRange1RangeLiteralParserRuleCall_3_3_0_0() { return cRange1RangeLiteralParserRuleCall_3_3_0_0; }
		
		//range1_t=NumberLiteral
		public Assignment getRange1_tAssignment_3_3_1() { return cRange1_tAssignment_3_3_1; }
		
		//NumberLiteral
		public RuleCall getRange1_tNumberLiteralParserRuleCall_3_3_1_0() { return cRange1_tNumberLiteralParserRuleCall_3_3_1_0; }
		
		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//range2=RangeLiteral
		public Assignment getRange2Assignment_3_5() { return cRange2Assignment_3_5; }
		
		//RangeLiteral
		public RuleCall getRange2RangeLiteralParserRuleCall_3_5_0() { return cRange2RangeLiteralParserRuleCall_3_5_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3_6() { return cRightSquareBracketKeyword_3_6; }
	}
	public class SubIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.SubIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueArithmeticExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValue2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValue2ArithmeticExpressionParserRuleCall_2_1_0 = (RuleCall)cValue2Assignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubIndex:
		//	"[" value=ArithmeticExpression (":" value2=ArithmeticExpression)? "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" value=ArithmeticExpression (":" value2=ArithmeticExpression)? "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//value=ArithmeticExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ArithmeticExpression
		public RuleCall getValueArithmeticExpressionParserRuleCall_1_0() { return cValueArithmeticExpressionParserRuleCall_1_0; }
		
		//(":" value2=ArithmeticExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//value2=ArithmeticExpression
		public Assignment getValue2Assignment_2_1() { return cValue2Assignment_2_1; }
		
		//ArithmeticExpression
		public RuleCall getValue2ArithmeticExpressionParserRuleCall_2_1_0() { return cValue2ArithmeticExpressionParserRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class RangeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.RangeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRangeLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValue1Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValue1INTTerminalRuleCall_2_0_0 = (RuleCall)cValue1Assignment_2_0.eContents().get(0);
		private final Assignment cValue_l1Assignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cValue_l1VariableDeclarationCrossReference_2_1_0 = (CrossReference)cValue_l1Assignment_2_1.eContents().get(0);
		private final RuleCall cValue_l1VariableDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cValue_l1VariableDeclarationCrossReference_2_1_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cValue2Assignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cValue2INTTerminalRuleCall_4_0_0 = (RuleCall)cValue2Assignment_4_0.eContents().get(0);
		private final Assignment cValue_l2Assignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cValue_l2VariableDeclarationCrossReference_4_1_0 = (CrossReference)cValue_l2Assignment_4_1.eContents().get(0);
		private final RuleCall cValue_l2VariableDeclarationIDTerminalRuleCall_4_1_0_1 = (RuleCall)cValue_l2VariableDeclarationCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RangeLiteral:
		//	{RangeLiteral} "[" (value1=INT | value_l1=[VariableDeclaration]) ":" (value2=INT | value_l2=[VariableDeclaration])
		//	"]";
		@Override public ParserRule getRule() { return rule; }
		
		//{RangeLiteral} "[" (value1=INT | value_l1=[VariableDeclaration]) ":" (value2=INT | value_l2=[VariableDeclaration]) "]"
		public Group getGroup() { return cGroup; }
		
		//{RangeLiteral}
		public Action getRangeLiteralAction_0() { return cRangeLiteralAction_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//value1=INT | value_l1=[VariableDeclaration]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//value1=INT
		public Assignment getValue1Assignment_2_0() { return cValue1Assignment_2_0; }
		
		//INT
		public RuleCall getValue1INTTerminalRuleCall_2_0_0() { return cValue1INTTerminalRuleCall_2_0_0; }
		
		//value_l1=[VariableDeclaration]
		public Assignment getValue_l1Assignment_2_1() { return cValue_l1Assignment_2_1; }
		
		//[VariableDeclaration]
		public CrossReference getValue_l1VariableDeclarationCrossReference_2_1_0() { return cValue_l1VariableDeclarationCrossReference_2_1_0; }
		
		//ID
		public RuleCall getValue_l1VariableDeclarationIDTerminalRuleCall_2_1_0_1() { return cValue_l1VariableDeclarationIDTerminalRuleCall_2_1_0_1; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//value2=INT | value_l2=[VariableDeclaration]
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//value2=INT
		public Assignment getValue2Assignment_4_0() { return cValue2Assignment_4_0; }
		
		//INT
		public RuleCall getValue2INTTerminalRuleCall_4_0_0() { return cValue2INTTerminalRuleCall_4_0_0; }
		
		//value_l2=[VariableDeclaration]
		public Assignment getValue_l2Assignment_4_1() { return cValue_l2Assignment_4_1; }
		
		//[VariableDeclaration]
		public CrossReference getValue_l2VariableDeclarationCrossReference_4_1_0() { return cValue_l2VariableDeclarationCrossReference_4_1_0; }
		
		//ID
		public RuleCall getValue_l2VariableDeclarationIDTerminalRuleCall_4_1_0_1() { return cValue_l2VariableDeclarationIDTerminalRuleCall_4_1_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class MathFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.MathFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMathFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMathKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureIDTerminalRuleCall_3_0 = (RuleCall)cFeatureAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionsArithmeticExpressionParserRuleCall_5_0 = (RuleCall)cExpressionsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpressionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionsArithmeticExpressionParserRuleCall_6_1_0 = (RuleCall)cExpressionsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MathFunction:
		//	{MathFunction} 'Math' '.' feature=ID '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{MathFunction} 'Math' '.' feature=ID '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)* ')'
		public Group getGroup() { return cGroup; }
		
		//{MathFunction}
		public Action getMathFunctionAction_0() { return cMathFunctionAction_0; }
		
		//'Math'
		public Keyword getMathKeyword_1() { return cMathKeyword_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//feature=ID
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }
		
		//ID
		public RuleCall getFeatureIDTerminalRuleCall_3_0() { return cFeatureIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//expressions+=ArithmeticExpression?
		public Assignment getExpressionsAssignment_5() { return cExpressionsAssignment_5; }
		
		//ArithmeticExpression
		public RuleCall getExpressionsArithmeticExpressionParserRuleCall_5_0() { return cExpressionsArithmeticExpressionParserRuleCall_5_0; }
		
		//(',' expressions+=ArithmeticExpression)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//expressions+=ArithmeticExpression
		public Assignment getExpressionsAssignment_6_1() { return cExpressionsAssignment_6_1; }
		
		//ArithmeticExpression
		public RuleCall getExpressionsArithmeticExpressionParserRuleCall_6_1_0() { return cExpressionsArithmeticExpressionParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class VariableFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.VariableFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetVariableDeclarationCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetVariableDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetVariableDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureIDTerminalRuleCall_3_0 = (RuleCall)cFeatureAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionsArithmeticExpressionParserRuleCall_5_0 = (RuleCall)cExpressionsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpressionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionsArithmeticExpressionParserRuleCall_6_1_0 = (RuleCall)cExpressionsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//VariableFunction:
		//	{VariableFunction} target=[VariableDeclaration] '.' feature=ID '(' expressions+=ArithmeticExpression? (','
		//	expressions+=ArithmeticExpression)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableFunction} target=[VariableDeclaration] '.' feature=ID '(' expressions+=ArithmeticExpression? (','
		//expressions+=ArithmeticExpression)* ')'
		public Group getGroup() { return cGroup; }
		
		//{VariableFunction}
		public Action getVariableFunctionAction_0() { return cVariableFunctionAction_0; }
		
		//target=[VariableDeclaration]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[VariableDeclaration]
		public CrossReference getTargetVariableDeclarationCrossReference_1_0() { return cTargetVariableDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetVariableDeclarationIDTerminalRuleCall_1_0_1() { return cTargetVariableDeclarationIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//feature=ID
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }
		
		//ID
		public RuleCall getFeatureIDTerminalRuleCall_3_0() { return cFeatureIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//expressions+=ArithmeticExpression?
		public Assignment getExpressionsAssignment_5() { return cExpressionsAssignment_5; }
		
		//ArithmeticExpression
		public RuleCall getExpressionsArithmeticExpressionParserRuleCall_5_0() { return cExpressionsArithmeticExpressionParserRuleCall_5_0; }
		
		//(',' expressions+=ArithmeticExpression)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//expressions+=ArithmeticExpression
		public Assignment getExpressionsAssignment_6_1() { return cExpressionsAssignment_6_1; }
		
		//ArithmeticExpression
		public RuleCall getExpressionsArithmeticExpressionParserRuleCall_6_1_0() { return cExpressionsArithmeticExpressionParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class FunctionReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.FunctionReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionArithmeticExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//FunctionReturn:
		//	{FunctionReturn} 'return' expression=ArithmeticExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionReturn} 'return' expression=ArithmeticExpression
		public Group getGroup() { return cGroup; }
		
		//{FunctionReturn}
		public Action getFunctionReturnAction_0() { return cFunctionReturnAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//expression=ArithmeticExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//ArithmeticExpression
		public RuleCall getExpressionArithmeticExpressionParserRuleCall_2_0() { return cExpressionArithmeticExpressionParserRuleCall_2_0; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFuncKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersParamsParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersParamsParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBlockExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//FunctionDefinition:
		//	{FunctionDefinition}
		//	'func' name=ID '(' parameters+=Params? (',' parameters+=Params)* ')' body=BlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDefinition} 'func' name=ID '(' parameters+=Params? (',' parameters+=Params)* ')' body=BlockExpression
		public Group getGroup() { return cGroup; }
		
		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_0() { return cFunctionDefinitionAction_0; }
		
		//'func'
		public Keyword getFuncKeyword_1() { return cFuncKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//parameters+=Params?
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }
		
		//Params
		public RuleCall getParametersParamsParserRuleCall_4_0() { return cParametersParamsParserRuleCall_4_0; }
		
		//(',' parameters+=Params)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//parameters+=Params
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }
		
		//Params
		public RuleCall getParametersParamsParserRuleCall_5_1_0() { return cParametersParamsParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//body=BlockExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//BlockExpression
		public RuleCall getBodyBlockExpressionParserRuleCall_7_0() { return cBodyBlockExpressionParserRuleCall_7_0; }
	}
	public class ParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.Params");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Params Expression:
		//	{VariableDeclaration} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableDeclaration} name=ID
		public Group getGroup() { return cGroup; }
		
		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ChannelSendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ChannelSend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChannelSendAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetChannelDeclarationCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetChannelDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetChannelDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionArithmeticExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//ChannelSend:
		//	{ChannelSend} target=[ChannelDeclaration] '!' expression=ArithmeticExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ChannelSend} target=[ChannelDeclaration] '!' expression=ArithmeticExpression
		public Group getGroup() { return cGroup; }
		
		//{ChannelSend}
		public Action getChannelSendAction_0() { return cChannelSendAction_0; }
		
		//target=[ChannelDeclaration]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[ChannelDeclaration]
		public CrossReference getTargetChannelDeclarationCrossReference_1_0() { return cTargetChannelDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetChannelDeclarationIDTerminalRuleCall_1_0_1() { return cTargetChannelDeclarationIDTerminalRuleCall_1_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//expression=ArithmeticExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//ArithmeticExpression
		public RuleCall getExpressionArithmeticExpressionParserRuleCall_3_0() { return cExpressionArithmeticExpressionParserRuleCall_3_0; }
	}
	public class ChannelReceiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ChannelReceive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChannelReceiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetChannelDeclarationCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetChannelDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetChannelDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ChannelReceive:
		//	{ChannelReceive} target=[ChannelDeclaration] '?';
		@Override public ParserRule getRule() { return rule; }
		
		//{ChannelReceive} target=[ChannelDeclaration] '?'
		public Group getGroup() { return cGroup; }
		
		//{ChannelReceive}
		public Action getChannelReceiveAction_0() { return cChannelReceiveAction_0; }
		
		//target=[ChannelDeclaration]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[ChannelDeclaration]
		public CrossReference getTargetChannelDeclarationCrossReference_1_0() { return cTargetChannelDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetChannelDeclarationIDTerminalRuleCall_1_0_1() { return cTargetChannelDeclarationIDTerminalRuleCall_1_0_1; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2() { return cQuestionMarkKeyword_2; }
	}
	public class LocalFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.LocalFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetFunctionDefinitionCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetFunctionDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetFunctionDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputLocalFunctionInputParserRuleCall_3_0 = (RuleCall)cInputAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LocalFunctionCall:
		//	{LocalFunctionCall} target=[FunctionDefinition] '(' input=LocalFunctionInput ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{LocalFunctionCall} target=[FunctionDefinition] '(' input=LocalFunctionInput ')'
		public Group getGroup() { return cGroup; }
		
		//{LocalFunctionCall}
		public Action getLocalFunctionCallAction_0() { return cLocalFunctionCallAction_0; }
		
		//target=[FunctionDefinition]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[FunctionDefinition]
		public CrossReference getTargetFunctionDefinitionCrossReference_1_0() { return cTargetFunctionDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetFunctionDefinitionIDTerminalRuleCall_1_0_1() { return cTargetFunctionDefinitionIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//input=LocalFunctionInput
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }
		
		//LocalFunctionInput
		public RuleCall getInputLocalFunctionInputParserRuleCall_3_0() { return cInputLocalFunctionInputParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LocalFunctionInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.LocalFunctionInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalFunctionInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputsArithmeticExpressionParserRuleCall_1_0 = (RuleCall)cInputsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInputsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInputsArithmeticExpressionParserRuleCall_2_1_0 = (RuleCall)cInputsAssignment_2_1.eContents().get(0);
		
		//LocalFunctionInput:
		//	{LocalFunctionInput} inputs+=ArithmeticExpression? (',' inputs+=ArithmeticExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{LocalFunctionInput} inputs+=ArithmeticExpression? (',' inputs+=ArithmeticExpression)*
		public Group getGroup() { return cGroup; }
		
		//{LocalFunctionInput}
		public Action getLocalFunctionInputAction_0() { return cLocalFunctionInputAction_0; }
		
		//inputs+=ArithmeticExpression?
		public Assignment getInputsAssignment_1() { return cInputsAssignment_1; }
		
		//ArithmeticExpression
		public RuleCall getInputsArithmeticExpressionParserRuleCall_1_0() { return cInputsArithmeticExpressionParserRuleCall_1_0; }
		
		//(',' inputs+=ArithmeticExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//inputs+=ArithmeticExpression
		public Assignment getInputsAssignment_2_1() { return cInputsAssignment_2_1; }
		
		//ArithmeticExpression
		public RuleCall getInputsArithmeticExpressionParserRuleCall_2_1_0() { return cInputsArithmeticExpressionParserRuleCall_2_1_0; }
	}
	public class FlyFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.FlyFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFlyFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsAsyncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsAsyncAsyncKeyword_1_0 = (Keyword)cIsAsyncAssignment_1.eContents().get(0);
		private final Keyword cFlyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetFunctionDefinitionCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetFunctionDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetFunctionDefinitionCrossReference_3_0.eContents().get(1);
		private final Assignment cInputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputFunctionInputParserRuleCall_4_0 = (RuleCall)cInputAssignment_4.eContents().get(0);
		private final Keyword cOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEnvironmentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cEnvironmentEnvironmentDeclarationCrossReference_6_0 = (CrossReference)cEnvironmentAssignment_6.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentDeclarationIDTerminalRuleCall_6_0_1 = (RuleCall)cEnvironmentEnvironmentDeclarationCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cIs_thenAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cIs_thenThenKeyword_7_0_0 = (Keyword)cIs_thenAssignment_7_0.eContents().get(0);
		private final Assignment cThenAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cThenFunctionDefinitionCrossReference_7_1_0 = (CrossReference)cThenAssignment_7_1.eContents().get(0);
		private final RuleCall cThenFunctionDefinitionIDTerminalRuleCall_7_1_0_1 = (RuleCall)cThenFunctionDefinitionCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cIs_thenallAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cIs_thenallThenallKeyword_8_0_0 = (Keyword)cIs_thenallAssignment_8_0.eContents().get(0);
		private final Assignment cThenallAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cThenallFunctionDefinitionCrossReference_8_1_0 = (CrossReference)cThenallAssignment_8_1.eContents().get(0);
		private final RuleCall cThenallFunctionDefinitionIDTerminalRuleCall_8_1_0_1 = (RuleCall)cThenallFunctionDefinitionCrossReference_8_1_0.eContents().get(1);
		
		//FlyFunctionCall:
		//	{FlyFunctionCall} isAsync?='async'? 'fly' target=[FunctionDefinition] input=FunctionInput? 'on'
		//	environment=[EnvironmentDeclaration] (is_then?='then' then=[FunctionDefinition])? (is_thenall?='thenall'
		//	thenall=[FunctionDefinition])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FlyFunctionCall} isAsync?='async'? 'fly' target=[FunctionDefinition] input=FunctionInput? 'on'
		//environment=[EnvironmentDeclaration] (is_then?='then' then=[FunctionDefinition])? (is_thenall?='thenall'
		//thenall=[FunctionDefinition])?
		public Group getGroup() { return cGroup; }
		
		//{FlyFunctionCall}
		public Action getFlyFunctionCallAction_0() { return cFlyFunctionCallAction_0; }
		
		//isAsync?='async'?
		public Assignment getIsAsyncAssignment_1() { return cIsAsyncAssignment_1; }
		
		//'async'
		public Keyword getIsAsyncAsyncKeyword_1_0() { return cIsAsyncAsyncKeyword_1_0; }
		
		//'fly'
		public Keyword getFlyKeyword_2() { return cFlyKeyword_2; }
		
		//target=[FunctionDefinition]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[FunctionDefinition]
		public CrossReference getTargetFunctionDefinitionCrossReference_3_0() { return cTargetFunctionDefinitionCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetFunctionDefinitionIDTerminalRuleCall_3_0_1() { return cTargetFunctionDefinitionIDTerminalRuleCall_3_0_1; }
		
		//input=FunctionInput?
		public Assignment getInputAssignment_4() { return cInputAssignment_4; }
		
		//FunctionInput
		public RuleCall getInputFunctionInputParserRuleCall_4_0() { return cInputFunctionInputParserRuleCall_4_0; }
		
		//'on'
		public Keyword getOnKeyword_5() { return cOnKeyword_5; }
		
		//environment=[EnvironmentDeclaration]
		public Assignment getEnvironmentAssignment_6() { return cEnvironmentAssignment_6; }
		
		//[EnvironmentDeclaration]
		public CrossReference getEnvironmentEnvironmentDeclarationCrossReference_6_0() { return cEnvironmentEnvironmentDeclarationCrossReference_6_0; }
		
		//ID
		public RuleCall getEnvironmentEnvironmentDeclarationIDTerminalRuleCall_6_0_1() { return cEnvironmentEnvironmentDeclarationIDTerminalRuleCall_6_0_1; }
		
		//(is_then?='then' then=[FunctionDefinition])?
		public Group getGroup_7() { return cGroup_7; }
		
		//is_then?='then'
		public Assignment getIs_thenAssignment_7_0() { return cIs_thenAssignment_7_0; }
		
		//'then'
		public Keyword getIs_thenThenKeyword_7_0_0() { return cIs_thenThenKeyword_7_0_0; }
		
		//then=[FunctionDefinition]
		public Assignment getThenAssignment_7_1() { return cThenAssignment_7_1; }
		
		//[FunctionDefinition]
		public CrossReference getThenFunctionDefinitionCrossReference_7_1_0() { return cThenFunctionDefinitionCrossReference_7_1_0; }
		
		//ID
		public RuleCall getThenFunctionDefinitionIDTerminalRuleCall_7_1_0_1() { return cThenFunctionDefinitionIDTerminalRuleCall_7_1_0_1; }
		
		//(is_thenall?='thenall' thenall=[FunctionDefinition])?
		public Group getGroup_8() { return cGroup_8; }
		
		//is_thenall?='thenall'
		public Assignment getIs_thenallAssignment_8_0() { return cIs_thenallAssignment_8_0; }
		
		//'thenall'
		public Keyword getIs_thenallThenallKeyword_8_0_0() { return cIs_thenallThenallKeyword_8_0_0; }
		
		//thenall=[FunctionDefinition]
		public Assignment getThenallAssignment_8_1() { return cThenallAssignment_8_1; }
		
		//[FunctionDefinition]
		public CrossReference getThenallFunctionDefinitionCrossReference_8_1_0() { return cThenallFunctionDefinitionCrossReference_8_1_0; }
		
		//ID
		public RuleCall getThenallFunctionDefinitionIDTerminalRuleCall_8_1_0_1() { return cThenallFunctionDefinitionIDTerminalRuleCall_8_1_0_1; }
	}
	public class FunctionInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.FunctionInput");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFunctionInputAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionsArithmeticExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionsAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cExpressionsArithmeticExpressionParserRuleCall_0_3_1_0 = (RuleCall)cExpressionsAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFunctionInputAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIs_for_indexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cIs_for_indexInKeyword_1_1_0 = (Keyword)cIs_for_indexAssignment_1_1.eContents().get(0);
		private final Assignment cF_indexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cF_indexArithmeticExpressionParserRuleCall_1_2_0 = (RuleCall)cF_indexAssignment_1_2.eContents().get(0);
		
		//FunctionInput:
		//	{FunctionInput} '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)* ')' | {FunctionInput}
		//	is_for_index?='in' f_index=ArithmeticExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionInput} '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)* ')' | {FunctionInput}
		//is_for_index?='in' f_index=ArithmeticExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FunctionInput} '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)* ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{FunctionInput}
		public Action getFunctionInputAction_0_0() { return cFunctionInputAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expressions+=ArithmeticExpression?
		public Assignment getExpressionsAssignment_0_2() { return cExpressionsAssignment_0_2; }
		
		//ArithmeticExpression
		public RuleCall getExpressionsArithmeticExpressionParserRuleCall_0_2_0() { return cExpressionsArithmeticExpressionParserRuleCall_0_2_0; }
		
		//(',' expressions+=ArithmeticExpression)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//','
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }
		
		//expressions+=ArithmeticExpression
		public Assignment getExpressionsAssignment_0_3_1() { return cExpressionsAssignment_0_3_1; }
		
		//ArithmeticExpression
		public RuleCall getExpressionsArithmeticExpressionParserRuleCall_0_3_1_0() { return cExpressionsArithmeticExpressionParserRuleCall_0_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{FunctionInput} is_for_index?='in' f_index=ArithmeticExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{FunctionInput}
		public Action getFunctionInputAction_1_0() { return cFunctionInputAction_1_0; }
		
		//is_for_index?='in'
		public Assignment getIs_for_indexAssignment_1_1() { return cIs_for_indexAssignment_1_1; }
		
		//'in'
		public Keyword getIs_for_indexInKeyword_1_1_0() { return cIs_for_indexInKeyword_1_1_0; }
		
		//f_index=ArithmeticExpression
		public Assignment getF_indexAssignment_1_2() { return cF_indexAssignment_1_2; }
		
		//ArithmeticExpression
		public RuleCall getF_indexArithmeticExpressionParserRuleCall_1_2_0() { return cF_indexArithmeticExpressionParserRuleCall_1_2_0; }
	}
	public class NativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.NativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNativeExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNativeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeNATIVE_CODETerminalRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		
		//NativeExpression:
		//	{NativeExpression} 'native' code=NATIVE_CODE;
		@Override public ParserRule getRule() { return rule; }
		
		//{NativeExpression} 'native' code=NATIVE_CODE
		public Group getGroup() { return cGroup; }
		
		//{NativeExpression}
		public Action getNativeExpressionAction_0() { return cNativeExpressionAction_0; }
		
		//'native'
		public Keyword getNativeKeyword_1() { return cNativeKeyword_1; }
		
		//code=NATIVE_CODE
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//NATIVE_CODE
		public RuleCall getCodeNATIVE_CODETerminalRuleCall_2_0() { return cCodeNATIVE_CODETerminalRuleCall_2_0; }
	}
	public class RequireExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.RequireExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequireExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequireKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLibAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLibSTRINGTerminalRuleCall_3_0 = (RuleCall)cLibAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEnvironmentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cEnvironmentEnvironmentDeclarationCrossReference_6_0 = (CrossReference)cEnvironmentAssignment_6.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentDeclarationIDTerminalRuleCall_6_0_1 = (RuleCall)cEnvironmentEnvironmentDeclarationCrossReference_6_0.eContents().get(1);
		
		//RequireExpression:
		//	{RequireExpression} 'require' '(' lib=STRING ')' 'on' environment=[EnvironmentDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//{RequireExpression} 'require' '(' lib=STRING ')' 'on' environment=[EnvironmentDeclaration]
		public Group getGroup() { return cGroup; }
		
		//{RequireExpression}
		public Action getRequireExpressionAction_0() { return cRequireExpressionAction_0; }
		
		//'require'
		public Keyword getRequireKeyword_1() { return cRequireKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//lib=STRING
		public Assignment getLibAssignment_3() { return cLibAssignment_3; }
		
		//STRING
		public RuleCall getLibSTRINGTerminalRuleCall_3_0() { return cLibSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'on'
		public Keyword getOnKeyword_5() { return cOnKeyword_5; }
		
		//environment=[EnvironmentDeclaration]
		public Assignment getEnvironmentAssignment_6() { return cEnvironmentAssignment_6; }
		
		//[EnvironmentDeclaration]
		public CrossReference getEnvironmentEnvironmentDeclarationCrossReference_6_0() { return cEnvironmentEnvironmentDeclarationCrossReference_6_0; }
		
		//ID
		public RuleCall getEnvironmentEnvironmentDeclarationIDTerminalRuleCall_6_0_1() { return cEnvironmentEnvironmentDeclarationIDTerminalRuleCall_6_0_1; }
	}
	public class PostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.PostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableLiteralParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureOpPostfixParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		
		//PostfixOperation:
		//	variable=VariableLiteral feature=OpPostfix;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=VariableLiteral feature=OpPostfix
		public Group getGroup() { return cGroup; }
		
		//variable=VariableLiteral
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//VariableLiteral
		public RuleCall getVariableVariableLiteralParserRuleCall_0_0() { return cVariableVariableLiteralParserRuleCall_0_0; }
		
		//feature=OpPostfix
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//OpPostfix
		public RuleCall getFeatureOpPostfixParserRuleCall_1_0() { return cFeatureOpPostfixParserRuleCall_1_0; }
	}
	public class OpPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OpPostfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpPostfix:
		//	'++' | '--';
		@Override public ParserRule getRule() { return rule; }
		
		//'++' | '--'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ArithmeticExpression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////rules for Aritmethic Expression
		//ArithmeticExpression:
		//	OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpression ArithmeticExpression:
		//	AndExpression (=> ({BinaryOperation.left=current} feature=OpOr) right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression (=> ({BinaryOperation.left=current} feature=OpOr) right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//(=> ({BinaryOperation.left=current} feature=OpOr) right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BinaryOperation.left=current} feature=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperation.left=current} feature=OpOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0_0_0() { return cBinaryOperationLeftAction_1_0_0_0; }
		
		//feature=OpOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpOr
		public RuleCall getFeatureOpOrParserRuleCall_1_0_0_1_0() { return cFeatureOpOrParserRuleCall_1_0_0_1_0; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_1_0() { return cRightAndExpressionParserRuleCall_1_1_0; }
	}
	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OpOr");
		private final Keyword cOrKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	'or';
		@Override public ParserRule getRule() { return rule; }
		
		//'or'
		public Keyword getOrKeyword() { return cOrKeyword; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpression ArithmeticExpression:
		//	EqualityExpression (=> ({BinaryOperation.left=current} feature=OpAnd) right=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression (=> ({BinaryOperation.left=current} feature=OpAnd) right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//(=> ({BinaryOperation.left=current} feature=OpAnd) right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BinaryOperation.left=current} feature=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperation.left=current} feature=OpAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0_0_0() { return cBinaryOperationLeftAction_1_0_0_0; }
		
		//feature=OpAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpAnd
		public RuleCall getFeatureOpAndParserRuleCall_1_0_0_1_0() { return cFeatureOpAndParserRuleCall_1_0_0_1_0; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_1_0() { return cRightEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OpAnd");
		private final Keyword cAndKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	'and';
		@Override public ParserRule getRule() { return rule; }
		
		//'and'
		public Keyword getAndKeyword() { return cAndKeyword; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpEqualityParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//EqualityExpression ArithmeticExpression:
		//	RelationalExpression (=> ({BinaryOperation.left=current} feature=OpEquality) right=RelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression (=> ({BinaryOperation.left=current} feature=OpEquality) right=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//(=> ({BinaryOperation.left=current} feature=OpEquality) right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BinaryOperation.left=current} feature=OpEquality)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperation.left=current} feature=OpEquality
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0_0_0() { return cBinaryOperationLeftAction_1_0_0_0; }
		
		//feature=OpEquality
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpEquality
		public RuleCall getFeatureOpEqualityParserRuleCall_1_0_0_1_0() { return cFeatureOpEqualityParserRuleCall_1_0_0_1_0; }
		
		//right=RelationalExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_1_0() { return cRightRelationalExpressionParserRuleCall_1_1_0; }
	}
	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpEquality:
		//	'==' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpCompareParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpression ArithmeticExpression:
		//	AdditiveExpression (=> ({BinaryOperation.left=current} feature=OpCompare) right=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression (=> ({BinaryOperation.left=current} feature=OpCompare) right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//(=> ({BinaryOperation.left=current} feature=OpCompare) right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BinaryOperation.left=current} feature=OpCompare)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperation.left=current} feature=OpCompare
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0_0_0() { return cBinaryOperationLeftAction_1_0_0_0; }
		
		//feature=OpCompare
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpCompare
		public RuleCall getFeatureOpCompareParserRuleCall_1_0_0_1_0() { return cFeatureOpCompareParserRuleCall_1_0_0_1_0; }
		
		//right=AdditiveExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_1_0() { return cRightAdditiveExpressionParserRuleCall_1_1_0; }
	}
	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	'>=' | '<=' | '<' | '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'>=' | '<=' | '<' | '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression ArithmeticExpression:
		//	MultiplicativeExpression (=> ({BinaryOperation.left=current} feature=OpAdd) right=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression (=> ({BinaryOperation.left=current} feature=OpAdd) right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//(=> ({BinaryOperation.left=current} feature=OpAdd) right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BinaryOperation.left=current} feature=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperation.left=current} feature=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0_0_0() { return cBinaryOperationLeftAction_1_0_0_0; }
		
		//feature=OpAdd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpAdd
		public RuleCall getFeatureOpAddParserRuleCall_1_0_0_1_0() { return cFeatureOpAddParserRuleCall_1_0_0_1_0; }
		
		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression ArithmeticExpression:
		//	UnaryOperation (=> ({BinaryOperation.left=current} feature=OpMulti) right=UnaryOperation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryOperation (=> ({BinaryOperation.left=current} feature=OpMulti) right=UnaryOperation)*
		public Group getGroup() { return cGroup; }
		
		//UnaryOperation
		public RuleCall getUnaryOperationParserRuleCall_0() { return cUnaryOperationParserRuleCall_0; }
		
		//(=> ({BinaryOperation.left=current} feature=OpMulti) right=UnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BinaryOperation.left=current} feature=OpMulti)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryOperation.left=current} feature=OpMulti
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0_0_0() { return cBinaryOperationLeftAction_1_0_0_0; }
		
		//feature=OpMulti
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpMulti
		public RuleCall getFeatureOpMultiParserRuleCall_1_0_0_1_0() { return cFeatureOpMultiParserRuleCall_1_0_0_1_0; }
		
		//right=UnaryOperation
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//UnaryOperation
		public RuleCall getRightUnaryOperationParserRuleCall_1_1_0() { return cRightUnaryOperationParserRuleCall_1_1_0; }
	}
	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpMulti:
		//	'*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class UnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.UnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOpUnaryParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cCastExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOperation ArithmeticExpression:
		//	{UnaryOperation} feature=OpUnary operand=UnaryOperation | CastExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryOperation} feature=OpUnary operand=UnaryOperation | CastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{UnaryOperation} feature=OpUnary operand=UnaryOperation
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnaryOperation}
		public Action getUnaryOperationAction_0_0() { return cUnaryOperationAction_0_0; }
		
		//feature=OpUnary
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }
		
		//OpUnary
		public RuleCall getFeatureOpUnaryParserRuleCall_0_1_0() { return cFeatureOpUnaryParserRuleCall_0_1_0; }
		
		//operand=UnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//UnaryOperation
		public RuleCall getOperandUnaryOperationParserRuleCall_0_2_0() { return cOperandUnaryOperationParserRuleCall_0_2_0; }
		
		//CastExpression
		public RuleCall getCastExpressionParserRuleCall_1() { return cCastExpressionParserRuleCall_1; }
	}
	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpUnary:
		//	'not' | '-' | '+';
		@Override public ParserRule getRule() { return rule; }
		
		//'not' | '-' | '+'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
	}
	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.CastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCastExpressionTargetAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpParseKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//CastExpression ArithmeticExpression:
		//	PrimaryExpression (=> ({CastExpression.target=current} op=('as' | 'parse')) type=Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression (=> ({CastExpression.target=current} op=('as' | 'parse')) type=Type)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//(=> ({CastExpression.target=current} op=('as' | 'parse')) type=Type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CastExpression.target=current} op=('as' | 'parse'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CastExpression.target=current} op=('as' | 'parse')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CastExpression.target=current}
		public Action getCastExpressionTargetAction_1_0_0_0() { return cCastExpressionTargetAction_1_0_0_0; }
		
		//op=('as' | 'parse')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }
		
		//('as' | 'parse')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }
		
		//'as'
		public Keyword getOpAsKeyword_1_0_0_1_0_0() { return cOpAsKeyword_1_0_0_1_0_0; }
		
		//'parse'
		public Keyword getOpParseKeyword_1_0_0_1_0_1() { return cOpParseKeyword_1_0_0_1_0_1; }
		
		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDateKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDatKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cObjectKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Type:
		//	'String' | 'Integer' | 'Date' | 'Dat' | 'Object' | 'Double';
		@Override public ParserRule getRule() { return rule; }
		
		//'String' | 'Integer' | 'Date' | 'Dat' | 'Object' | 'Double'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//'Date'
		public Keyword getDateKeyword_2() { return cDateKeyword_2; }
		
		//'Dat'
		public Keyword getDatKeyword_3() { return cDatKeyword_3; }
		
		//'Object'
		public Keyword getObjectKeyword_4() { return cObjectKeyword_4; }
		
		//'Double'
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParenthesizedExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMathFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cChannelSendParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cChannelReceiveParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTimeFunctionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cVariableFunctionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//PrimaryExpression ArithmeticExpression:
		//	ParenthesizedExpression | LiteralExpression | LocalFunctionCall | MathFunction | ChannelSend | ChannelReceive |
		//	TimeFunction | VariableFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//ParenthesizedExpression | LiteralExpression | LocalFunctionCall | MathFunction | ChannelSend | ChannelReceive |
		//TimeFunction | VariableFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_0() { return cParenthesizedExpressionParserRuleCall_0; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }
		
		//LocalFunctionCall
		public RuleCall getLocalFunctionCallParserRuleCall_2() { return cLocalFunctionCallParserRuleCall_2; }
		
		//MathFunction
		public RuleCall getMathFunctionParserRuleCall_3() { return cMathFunctionParserRuleCall_3; }
		
		//ChannelSend
		public RuleCall getChannelSendParserRuleCall_4() { return cChannelSendParserRuleCall_4; }
		
		//ChannelReceive
		public RuleCall getChannelReceiveParserRuleCall_5() { return cChannelReceiveParserRuleCall_5; }
		
		//TimeFunction
		public RuleCall getTimeFunctionParserRuleCall_6() { return cTimeFunctionParserRuleCall_6; }
		
		//VariableFunction
		public RuleCall getVariableFunctionParserRuleCall_7() { return cVariableFunctionParserRuleCall_7; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cObjectLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRangeLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFloatLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//LiteralExpression ArithmeticExpression:
		//	BooleanLiteral | NumberLiteral | StringLiteral | ObjectLiteral | VariableLiteral | RangeLiteral | FloatLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanLiteral | NumberLiteral | StringLiteral | ObjectLiteral | VariableLiteral | RangeLiteral | FloatLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1() { return cNumberLiteralParserRuleCall_1; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }
		
		//ObjectLiteral
		public RuleCall getObjectLiteralParserRuleCall_3() { return cObjectLiteralParserRuleCall_3; }
		
		//VariableLiteral
		public RuleCall getVariableLiteralParserRuleCall_4() { return cVariableLiteralParserRuleCall_4; }
		
		//RangeLiteral
		public RuleCall getRangeLiteralParserRuleCall_5() { return cRangeLiteralParserRuleCall_5; }
		
		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_6() { return cFloatLiteralParserRuleCall_6; }
	}
	public class TimeFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.TimeFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueVariableDeclarationCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueVariableDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cValueVariableDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TimeFunction ArithmeticExpression:
		//	{TimeFunction} 'time' '(' value=[VariableDeclaration]* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{TimeFunction} 'time' '(' value=[VariableDeclaration]* ')'
		public Group getGroup() { return cGroup; }
		
		//{TimeFunction}
		public Action getTimeFunctionAction_0() { return cTimeFunctionAction_0; }
		
		//'time'
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=[VariableDeclaration]*
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//[VariableDeclaration]
		public CrossReference getValueVariableDeclarationCrossReference_3_0() { return cValueVariableDeclarationCrossReference_3_0; }
		
		//ID
		public RuleCall getValueVariableDeclarationIDTerminalRuleCall_3_0_1() { return cValueVariableDeclarationIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cValueFalseKeyword_0_1_0 = (Keyword)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cValueTrueKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		
		//BooleanLiteral ArithmeticExpression:
		//	{BooleanLiteral} value="false" | {BooleanLiteral} value="true";
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanLiteral} value="false" | {BooleanLiteral} value="true"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanLiteral} value="false"
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0_0() { return cBooleanLiteralAction_0_0; }
		
		//value="false"
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//"false"
		public Keyword getValueFalseKeyword_0_1_0() { return cValueFalseKeyword_0_1_0; }
		
		//{BooleanLiteral} value="true"
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }
		
		//value="true"
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//"true"
		public Keyword getValueTrueKeyword_1_1_0() { return cValueTrueKeyword_1_1_0; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumberLiteral ArithmeticExpression:
		//	{NumberLiteral} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberLiteral} value=INT
		public Group getGroup() { return cGroup; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_0() { return cNumberLiteralAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral ArithmeticExpression:
		//	{StringLiteral} value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.FloatLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//FloatLiteral ArithmeticExpression:
		//	{FloatLiteral} value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//{FloatLiteral} value=FLOAT
		public Group getGroup() { return cGroup; }
		
		//{FloatLiteral}
		public Action getFloatLiteralAction_0() { return cFloatLiteralAction_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_0() { return cValueFLOATTerminalRuleCall_1_0; }
	}
	public class VariableLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.VariableLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVariableDeclarationCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_1_0.eContents().get(1);
		
		//VariableLiteral ArithmeticExpression:
		//	{VariableLiteral} variable=[VariableDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableLiteral} variable=[VariableDeclaration]
		public Group getGroup() { return cGroup; }
		
		//{VariableLiteral}
		public Action getVariableLiteralAction_0() { return cVariableLiteralAction_0; }
		
		//variable=[VariableDeclaration]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[VariableDeclaration]
		public CrossReference getVariableVariableDeclarationCrossReference_1_0() { return cVariableVariableDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_1_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesizedExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionArithmeticExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParenthesizedExpression ArithmeticExpression:
		//	{ParenthesizedExpression}
		//	'(' expression=ArithmeticExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ParenthesizedExpression} '(' expression=ArithmeticExpression ')'
		public Group getGroup() { return cGroup; }
		
		//{ParenthesizedExpression}
		public Action getParenthesizedExpressionAction_0() { return cParenthesizedExpressionAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=ArithmeticExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//ArithmeticExpression
		public RuleCall getExpressionArithmeticExpressionParserRuleCall_2_0() { return cExpressionArithmeticExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final FlyElements pFly;
	private final ExpressionElements pExpression;
	private final SortExpressionElements pSortExpression;
	private final AssignmentElements pAssignment;
	private final OpAsElements pOpAs;
	private final PrintExpressionElements pPrintExpression;
	private final IfExpressionElements pIfExpression;
	private final ForExpressionElements pForExpression;
	private final ForDelimeterElements pForDelimeter;
	private final ForIndexElements pForIndex;
	private final VariableForElements pVariableFor;
	private final WhileExpressionElements pWhileExpression;
	private final BlockExpressionElements pBlockExpression;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ObjectElements pObject;
	private final IndexElements pIndex;
	private final ArrayValueElements pArrayValue;
	private final DeclarationObjectElements pDeclarationObject;
	private final DeclarationFeatureElements pDeclarationFeature;
	private final FeautureNameElements pFeautureName;
	private final ObjectLiteralElements pObjectLiteral;
	private final SubIndexElements pSubIndex;
	private final RangeLiteralElements pRangeLiteral;
	private final MathFunctionElements pMathFunction;
	private final VariableFunctionElements pVariableFunction;
	private final FunctionReturnElements pFunctionReturn;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final ParamsElements pParams;
	private final ChannelSendElements pChannelSend;
	private final ChannelReceiveElements pChannelReceive;
	private final LocalFunctionCallElements pLocalFunctionCall;
	private final LocalFunctionInputElements pLocalFunctionInput;
	private final FlyFunctionCallElements pFlyFunctionCall;
	private final FunctionInputElements pFunctionInput;
	private final NativeExpressionElements pNativeExpression;
	private final RequireExpressionElements pRequireExpression;
	private final PostfixOperationElements pPostfixOperation;
	private final OpPostfixElements pOpPostfix;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final OrExpressionElements pOrExpression;
	private final OpOrElements pOpOr;
	private final AndExpressionElements pAndExpression;
	private final OpAndElements pOpAnd;
	private final EqualityExpressionElements pEqualityExpression;
	private final OpEqualityElements pOpEquality;
	private final RelationalExpressionElements pRelationalExpression;
	private final OpCompareElements pOpCompare;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final OpAddElements pOpAdd;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final OpMultiElements pOpMulti;
	private final UnaryOperationElements pUnaryOperation;
	private final OpUnaryElements pOpUnary;
	private final CastExpressionElements pCastExpression;
	private final TypeElements pType;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final TimeFunctionElements pTimeFunction;
	private final BooleanLiteralElements pBooleanLiteral;
	private final NumberLiteralElements pNumberLiteral;
	private final StringLiteralElements pStringLiteral;
	private final FloatLiteralElements pFloatLiteral;
	private final VariableLiteralElements pVariableLiteral;
	private final ParenthesizedExpressionElements pParenthesizedExpression;
	private final TerminalRule tFLOAT;
	private final TerminalRule tNATIVE_CODE;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FLYGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFly = new FlyElements();
		this.pExpression = new ExpressionElements();
		this.pSortExpression = new SortExpressionElements();
		this.pAssignment = new AssignmentElements();
		this.pOpAs = new OpAsElements();
		this.pPrintExpression = new PrintExpressionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pForExpression = new ForExpressionElements();
		this.pForDelimeter = new ForDelimeterElements();
		this.pForIndex = new ForIndexElements();
		this.pVariableFor = new VariableForElements();
		this.pWhileExpression = new WhileExpressionElements();
		this.pBlockExpression = new BlockExpressionElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pObject = new ObjectElements();
		this.pIndex = new IndexElements();
		this.pArrayValue = new ArrayValueElements();
		this.pDeclarationObject = new DeclarationObjectElements();
		this.pDeclarationFeature = new DeclarationFeatureElements();
		this.pFeautureName = new FeautureNameElements();
		this.pObjectLiteral = new ObjectLiteralElements();
		this.pSubIndex = new SubIndexElements();
		this.pRangeLiteral = new RangeLiteralElements();
		this.pMathFunction = new MathFunctionElements();
		this.pVariableFunction = new VariableFunctionElements();
		this.pFunctionReturn = new FunctionReturnElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pParams = new ParamsElements();
		this.pChannelSend = new ChannelSendElements();
		this.pChannelReceive = new ChannelReceiveElements();
		this.pLocalFunctionCall = new LocalFunctionCallElements();
		this.pLocalFunctionInput = new LocalFunctionInputElements();
		this.pFlyFunctionCall = new FlyFunctionCallElements();
		this.pFunctionInput = new FunctionInputElements();
		this.pNativeExpression = new NativeExpressionElements();
		this.pRequireExpression = new RequireExpressionElements();
		this.pPostfixOperation = new PostfixOperationElements();
		this.pOpPostfix = new OpPostfixElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pOpOr = new OpOrElements();
		this.pAndExpression = new AndExpressionElements();
		this.pOpAnd = new OpAndElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pOpEquality = new OpEqualityElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pOpCompare = new OpCompareElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pOpAdd = new OpAddElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pOpMulti = new OpMultiElements();
		this.pUnaryOperation = new UnaryOperationElements();
		this.pOpUnary = new OpUnaryElements();
		this.pCastExpression = new CastExpressionElements();
		this.pType = new TypeElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pTimeFunction = new TimeFunctionElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pFloatLiteral = new FloatLiteralElements();
		this.pVariableLiteral = new VariableLiteralElements();
		this.pParenthesizedExpression = new ParenthesizedExpressionElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.FLOAT");
		this.tNATIVE_CODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.NATIVE_CODE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.FLY.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.FLY".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Fly:
	//	elements+=Expression*;
	public FlyElements getFlyAccess() {
		return pFly;
	}
	
	public ParserRule getFlyRule() {
		return getFlyAccess().getRule();
	}
	
	//Expression:
	//	Assignment | BlockExpression | IfExpression | ForExpression | WhileExpression | PrintExpression | FunctionDefinition |
	//	FunctionReturn | FlyFunctionCall | VariableDeclaration | ChannelSend | ChannelReceive | LocalFunctionCall |
	//	SortExpression | VariableFunction | PostfixOperation | RequireExpression | NativeExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//SortExpression:
	//	'sort' type=('asc' | 'desc') target=[VariableDeclaration] 'on' taget=ID;
	public SortExpressionElements getSortExpressionAccess() {
		return pSortExpression;
	}
	
	public ParserRule getSortExpressionRule() {
		return getSortExpressionAccess().getRule();
	}
	
	//Assignment:
	//	{Assignment} feature=VariableLiteral op=OpAs value=ArithmeticExpression | {Assignment} feature_obj=ObjectLiteral
	//	op=OpAs value=ArithmeticExpression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//OpAs:
	//	'=' |
	//	'+=';
	public OpAsElements getOpAsAccess() {
		return pOpAs;
	}
	
	public ParserRule getOpAsRule() {
		return getOpAsAccess().getRule();
	}
	
	//PrintExpression:
	//	{PrintExpression} 'println' print=ArithmeticExpression;
	public PrintExpressionElements getPrintExpressionAccess() {
		return pPrintExpression;
	}
	
	public ParserRule getPrintExpressionRule() {
		return getPrintExpressionAccess().getRule();
	}
	
	//IfExpression:
	//	{IfExpression} 'if' '(' cond=ArithmeticExpression ')' then=Expression (=> 'else' else=Expression)?;
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//ForExpression:
	//	{ForExpression}
	//	'for' index=ForIndex 'in' object=ArithmeticExpression ('by' delimeter=ForDelimeter)? body=Expression;
	public ForExpressionElements getForExpressionAccess() {
		return pForExpression;
	}
	
	public ParserRule getForExpressionRule() {
		return getForExpressionAccess().getRule();
	}
	
	//ForDelimeter:
	//	type='row' | type='col' | type='delimeter' del=STRING;
	public ForDelimeterElements getForDelimeterAccess() {
		return pForDelimeter;
	}
	
	public ParserRule getForDelimeterRule() {
		return getForDelimeterAccess().getRule();
	}
	
	//ForIndex:
	//	indices+=VariableFor (',' indices+=VariableFor)*;
	public ForIndexElements getForIndexAccess() {
		return pForIndex;
	}
	
	public ParserRule getForIndexRule() {
		return getForIndexAccess().getRule();
	}
	
	//VariableFor:
	//	{VariableDeclaration} name=ID;
	public VariableForElements getVariableForAccess() {
		return pVariableFor;
	}
	
	public ParserRule getVariableForRule() {
		return getVariableForAccess().getRule();
	}
	
	//WhileExpression:
	//	{WhileExpression}
	//	'while' '(' cond=ArithmeticExpression ')' body=Expression;
	public WhileExpressionElements getWhileExpressionAccess() {
		return pWhileExpression;
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}
	
	//BlockExpression:
	//	{BlockExpression}
	//	'{' expressions+=Expression* '}';
	public BlockExpressionElements getBlockExpressionAccess() {
		return pBlockExpression;
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}
	
	//VariableDeclaration:
	//	{VariableDeclaration} typeobject='var' => (name=ID '=' (right=ArithmeticExpression | right=Object |
	//	right=FlyFunctionCall)) | {EnvironmentDeclaration} typeobject='env' => (name=ID '=' right=DeclarationObject) |
	//	{DatDeclaration} typeobject='dat' => (name=ID '=' (right=ArithmeticExpression | right=DeclarationObject)
	//	(onCloud?='on' environment=[EnvironmentDeclaration])?) | {RandomDeclaration} typeobject='random' => (name=ID) |
	//	{BinDeclaration} typeobject='bin' => (name=ID '=' right=DeclarationObject) | {OptimizerDeclaration} typeobject='opt'
	//	=> (name=ID '=' right=DeclarationObject) | {ChannelDeclaration} typeobject='channel' => (name=ID 'on'
	//	environment=[EnvironmentDeclaration]) | {ConstantDeclaration} typeobject='const' => (name=ID '='
	//	(right=ArithmeticExpression | right=Object));
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Object:
	//	{NameObjectDef} '{' features+=FeautureName? (',' features+=FeautureName)* '}' | {ArrayDefinition} type=Type
	//	indexes+=Index indexes+=Index* | {ArrayInit} '[' values+=ArrayValue? (',' values+=ArrayValue)* ']';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Index:
	//	"[" value=ArithmeticExpression "]";
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//ArrayValue:
	//	{ArrayValue} '[' values+=ArrayValue? (',' values+=ArrayValue)* ']' | ArithmeticExpression;
	public ArrayValueElements getArrayValueAccess() {
		return pArrayValue;
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}
	
	//DeclarationObject:
	//	{DeclarationObject} '[' features+=DeclarationFeature (',' features+=DeclarationFeature)* ']';
	public DeclarationObjectElements getDeclarationObjectAccess() {
		return pDeclarationObject;
	}
	
	public ParserRule getDeclarationObjectRule() {
		return getDeclarationObjectAccess().getRule();
	}
	
	//DeclarationFeature:
	//	{DeclarationFeature} feature=ID '=' (value_f=ID | value_s=STRING | value_t=INT | value_b=BooleanLiteral);
	public DeclarationFeatureElements getDeclarationFeatureAccess() {
		return pDeclarationFeature;
	}
	
	public ParserRule getDeclarationFeatureRule() {
		return getDeclarationFeatureAccess().getRule();
	}
	
	//FeautureName:
	//	feature=ID '=' value=ArithmeticExpression | value=ArithmeticExpression | Object;
	public FeautureNameElements getFeautureNameAccess() {
		return pFeautureName;
	}
	
	public ParserRule getFeautureNameRule() {
		return getFeautureNameAccess().getRule();
	}
	
	//ObjectLiteral:
	//	{NameObject} name=[VariableDeclaration] "." value=ID | {IndexObject} name=[VariableDeclaration] indexes+=SubIndex
	//	indexes+=SubIndex* | {DatSingleObject} name=[DatDeclaration] "[" value1=(NumberLiteral | StringLiteral) ","
	//	value2=(NumberLiteral | StringLiteral) "]" | {DatTableObject} name=[DatDeclaration] "[" (range1=RangeLiteral |
	//	range1_t=NumberLiteral) "," range2=RangeLiteral "]";
	public ObjectLiteralElements getObjectLiteralAccess() {
		return pObjectLiteral;
	}
	
	public ParserRule getObjectLiteralRule() {
		return getObjectLiteralAccess().getRule();
	}
	
	//SubIndex:
	//	"[" value=ArithmeticExpression (":" value2=ArithmeticExpression)? "]";
	public SubIndexElements getSubIndexAccess() {
		return pSubIndex;
	}
	
	public ParserRule getSubIndexRule() {
		return getSubIndexAccess().getRule();
	}
	
	//RangeLiteral:
	//	{RangeLiteral} "[" (value1=INT | value_l1=[VariableDeclaration]) ":" (value2=INT | value_l2=[VariableDeclaration])
	//	"]";
	public RangeLiteralElements getRangeLiteralAccess() {
		return pRangeLiteral;
	}
	
	public ParserRule getRangeLiteralRule() {
		return getRangeLiteralAccess().getRule();
	}
	
	//MathFunction:
	//	{MathFunction} 'Math' '.' feature=ID '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)*
	//	')';
	public MathFunctionElements getMathFunctionAccess() {
		return pMathFunction;
	}
	
	public ParserRule getMathFunctionRule() {
		return getMathFunctionAccess().getRule();
	}
	
	//VariableFunction:
	//	{VariableFunction} target=[VariableDeclaration] '.' feature=ID '(' expressions+=ArithmeticExpression? (','
	//	expressions+=ArithmeticExpression)* ')';
	public VariableFunctionElements getVariableFunctionAccess() {
		return pVariableFunction;
	}
	
	public ParserRule getVariableFunctionRule() {
		return getVariableFunctionAccess().getRule();
	}
	
	//FunctionReturn:
	//	{FunctionReturn} 'return' expression=ArithmeticExpression;
	public FunctionReturnElements getFunctionReturnAccess() {
		return pFunctionReturn;
	}
	
	public ParserRule getFunctionReturnRule() {
		return getFunctionReturnAccess().getRule();
	}
	
	//FunctionDefinition:
	//	{FunctionDefinition}
	//	'func' name=ID '(' parameters+=Params? (',' parameters+=Params)* ')' body=BlockExpression;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	//Params Expression:
	//	{VariableDeclaration} name=ID;
	public ParamsElements getParamsAccess() {
		return pParams;
	}
	
	public ParserRule getParamsRule() {
		return getParamsAccess().getRule();
	}
	
	//ChannelSend:
	//	{ChannelSend} target=[ChannelDeclaration] '!' expression=ArithmeticExpression;
	public ChannelSendElements getChannelSendAccess() {
		return pChannelSend;
	}
	
	public ParserRule getChannelSendRule() {
		return getChannelSendAccess().getRule();
	}
	
	//ChannelReceive:
	//	{ChannelReceive} target=[ChannelDeclaration] '?';
	public ChannelReceiveElements getChannelReceiveAccess() {
		return pChannelReceive;
	}
	
	public ParserRule getChannelReceiveRule() {
		return getChannelReceiveAccess().getRule();
	}
	
	//LocalFunctionCall:
	//	{LocalFunctionCall} target=[FunctionDefinition] '(' input=LocalFunctionInput ')';
	public LocalFunctionCallElements getLocalFunctionCallAccess() {
		return pLocalFunctionCall;
	}
	
	public ParserRule getLocalFunctionCallRule() {
		return getLocalFunctionCallAccess().getRule();
	}
	
	//LocalFunctionInput:
	//	{LocalFunctionInput} inputs+=ArithmeticExpression? (',' inputs+=ArithmeticExpression)*;
	public LocalFunctionInputElements getLocalFunctionInputAccess() {
		return pLocalFunctionInput;
	}
	
	public ParserRule getLocalFunctionInputRule() {
		return getLocalFunctionInputAccess().getRule();
	}
	
	//FlyFunctionCall:
	//	{FlyFunctionCall} isAsync?='async'? 'fly' target=[FunctionDefinition] input=FunctionInput? 'on'
	//	environment=[EnvironmentDeclaration] (is_then?='then' then=[FunctionDefinition])? (is_thenall?='thenall'
	//	thenall=[FunctionDefinition])?;
	public FlyFunctionCallElements getFlyFunctionCallAccess() {
		return pFlyFunctionCall;
	}
	
	public ParserRule getFlyFunctionCallRule() {
		return getFlyFunctionCallAccess().getRule();
	}
	
	//FunctionInput:
	//	{FunctionInput} '(' expressions+=ArithmeticExpression? (',' expressions+=ArithmeticExpression)* ')' | {FunctionInput}
	//	is_for_index?='in' f_index=ArithmeticExpression;
	public FunctionInputElements getFunctionInputAccess() {
		return pFunctionInput;
	}
	
	public ParserRule getFunctionInputRule() {
		return getFunctionInputAccess().getRule();
	}
	
	//NativeExpression:
	//	{NativeExpression} 'native' code=NATIVE_CODE;
	public NativeExpressionElements getNativeExpressionAccess() {
		return pNativeExpression;
	}
	
	public ParserRule getNativeExpressionRule() {
		return getNativeExpressionAccess().getRule();
	}
	
	//RequireExpression:
	//	{RequireExpression} 'require' '(' lib=STRING ')' 'on' environment=[EnvironmentDeclaration];
	public RequireExpressionElements getRequireExpressionAccess() {
		return pRequireExpression;
	}
	
	public ParserRule getRequireExpressionRule() {
		return getRequireExpressionAccess().getRule();
	}
	
	//PostfixOperation:
	//	variable=VariableLiteral feature=OpPostfix;
	public PostfixOperationElements getPostfixOperationAccess() {
		return pPostfixOperation;
	}
	
	public ParserRule getPostfixOperationRule() {
		return getPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	'++' | '--';
	public OpPostfixElements getOpPostfixAccess() {
		return pOpPostfix;
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	////rules for Aritmethic Expression
	//ArithmeticExpression:
	//	OrExpression;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//OrExpression ArithmeticExpression:
	//	AndExpression (=> ({BinaryOperation.left=current} feature=OpOr) right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'or';
	public OpOrElements getOpOrAccess() {
		return pOpOr;
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//AndExpression ArithmeticExpression:
	//	EqualityExpression (=> ({BinaryOperation.left=current} feature=OpAnd) right=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'and';
	public OpAndElements getOpAndAccess() {
		return pOpAnd;
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//EqualityExpression ArithmeticExpression:
	//	RelationalExpression (=> ({BinaryOperation.left=current} feature=OpEquality) right=RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=';
	public OpEqualityElements getOpEqualityAccess() {
		return pOpEquality;
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//RelationalExpression ArithmeticExpression:
	//	AdditiveExpression (=> ({BinaryOperation.left=current} feature=OpCompare) right=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<=' | '<' | '>';
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//AdditiveExpression ArithmeticExpression:
	//	MultiplicativeExpression (=> ({BinaryOperation.left=current} feature=OpAdd) right=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public OpAddElements getOpAddAccess() {
		return pOpAdd;
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//MultiplicativeExpression ArithmeticExpression:
	//	UnaryOperation (=> ({BinaryOperation.left=current} feature=OpMulti) right=UnaryOperation)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '/';
	public OpMultiElements getOpMultiAccess() {
		return pOpMulti;
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//UnaryOperation ArithmeticExpression:
	//	{UnaryOperation} feature=OpUnary operand=UnaryOperation | CastExpression;
	public UnaryOperationElements getUnaryOperationAccess() {
		return pUnaryOperation;
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	'not' | '-' | '+';
	public OpUnaryElements getOpUnaryAccess() {
		return pOpUnary;
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//CastExpression ArithmeticExpression:
	//	PrimaryExpression (=> ({CastExpression.target=current} op=('as' | 'parse')) type=Type)*;
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//Type:
	//	'String' | 'Integer' | 'Date' | 'Dat' | 'Object' | 'Double';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//PrimaryExpression ArithmeticExpression:
	//	ParenthesizedExpression | LiteralExpression | LocalFunctionCall | MathFunction | ChannelSend | ChannelReceive |
	//	TimeFunction | VariableFunction;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//LiteralExpression ArithmeticExpression:
	//	BooleanLiteral | NumberLiteral | StringLiteral | ObjectLiteral | VariableLiteral | RangeLiteral | FloatLiteral;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//TimeFunction ArithmeticExpression:
	//	{TimeFunction} 'time' '(' value=[VariableDeclaration]* ')';
	public TimeFunctionElements getTimeFunctionAccess() {
		return pTimeFunction;
	}
	
	public ParserRule getTimeFunctionRule() {
		return getTimeFunctionAccess().getRule();
	}
	
	//BooleanLiteral ArithmeticExpression:
	//	{BooleanLiteral} value="false" | {BooleanLiteral} value="true";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//NumberLiteral ArithmeticExpression:
	//	{NumberLiteral} value=INT;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//StringLiteral ArithmeticExpression:
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//FloatLiteral ArithmeticExpression:
	//	{FloatLiteral} value=FLOAT;
	public FloatLiteralElements getFloatLiteralAccess() {
		return pFloatLiteral;
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}
	
	//VariableLiteral ArithmeticExpression:
	//	{VariableLiteral} variable=[VariableDeclaration];
	public VariableLiteralElements getVariableLiteralAccess() {
		return pVariableLiteral;
	}
	
	public ParserRule getVariableLiteralRule() {
		return getVariableLiteralAccess().getRule();
	}
	
	//ParenthesizedExpression ArithmeticExpression:
	//	{ParenthesizedExpression}
	//	'(' expression=ArithmeticExpression ')';
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return pParenthesizedExpression;
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	INT '.' INT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal NATIVE_CODE:
	//	'<<<'->'>>>';
	public TerminalRule getNATIVE_CODERule() {
		return tNATIVE_CODE;
	}
	
	//@Override
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '$') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
