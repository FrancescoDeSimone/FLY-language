/**
 * generated by Xtext 2.16.0
 */
package org.xtext.fLY.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.fLY.ArithmeticExpression;
import org.xtext.fLY.ArrayDefinition;
import org.xtext.fLY.ArrayInit;
import org.xtext.fLY.ArrayValue;
import org.xtext.fLY.Assignment;
import org.xtext.fLY.BinDeclaration;
import org.xtext.fLY.BinaryOperation;
import org.xtext.fLY.BlockExpression;
import org.xtext.fLY.BooleanLiteral;
import org.xtext.fLY.CastExpression;
import org.xtext.fLY.ChannelDeclaration;
import org.xtext.fLY.ChannelReceive;
import org.xtext.fLY.ChannelSend;
import org.xtext.fLY.ConstantDeclaration;
import org.xtext.fLY.DatDeclaration;
import org.xtext.fLY.DatSingleObject;
import org.xtext.fLY.DatTableObject;
import org.xtext.fLY.DeclarationFeature;
import org.xtext.fLY.DeclarationObject;
import org.xtext.fLY.EnvironmentDeclaration;
import org.xtext.fLY.Expression;
import org.xtext.fLY.FLYFactory;
import org.xtext.fLY.FLYPackage;
import org.xtext.fLY.FeautureName;
import org.xtext.fLY.FloatLiteral;
import org.xtext.fLY.Fly;
import org.xtext.fLY.FlyFunctionCall;
import org.xtext.fLY.ForDelimeter;
import org.xtext.fLY.ForExpression;
import org.xtext.fLY.ForIndex;
import org.xtext.fLY.FunctionDefinition;
import org.xtext.fLY.FunctionInput;
import org.xtext.fLY.FunctionReturn;
import org.xtext.fLY.IfExpression;
import org.xtext.fLY.Index;
import org.xtext.fLY.IndexObject;
import org.xtext.fLY.LocalFunctionCall;
import org.xtext.fLY.LocalFunctionInput;
import org.xtext.fLY.MathFunction;
import org.xtext.fLY.NameObject;
import org.xtext.fLY.NameObjectDef;
import org.xtext.fLY.NativeExpression;
import org.xtext.fLY.NumberLiteral;
import org.xtext.fLY.ObjectLiteral;
import org.xtext.fLY.OptimizerDeclaration;
import org.xtext.fLY.ParenthesizedExpression;
import org.xtext.fLY.PostfixOperation;
import org.xtext.fLY.PrintExpression;
import org.xtext.fLY.RandomDeclaration;
import org.xtext.fLY.RangeLiteral;
import org.xtext.fLY.RequireExpression;
import org.xtext.fLY.SortExpression;
import org.xtext.fLY.StringLiteral;
import org.xtext.fLY.SubIndex;
import org.xtext.fLY.TimeFunction;
import org.xtext.fLY.UnaryOperation;
import org.xtext.fLY.VariableDeclaration;
import org.xtext.fLY.VariableFor;
import org.xtext.fLY.VariableFunction;
import org.xtext.fLY.VariableLiteral;
import org.xtext.fLY.WhileExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FLYFactoryImpl extends EFactoryImpl implements FLYFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FLYFactory init()
  {
    try
    {
      FLYFactory theFLYFactory = (FLYFactory)EPackage.Registry.INSTANCE.getEFactory(FLYPackage.eNS_URI);
      if (theFLYFactory != null)
      {
        return theFLYFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FLYFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FLYFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FLYPackage.FLY: return createFly();
      case FLYPackage.EXPRESSION: return createExpression();
      case FLYPackage.SORT_EXPRESSION: return createSortExpression();
      case FLYPackage.ASSIGNMENT: return createAssignment();
      case FLYPackage.PRINT_EXPRESSION: return createPrintExpression();
      case FLYPackage.IF_EXPRESSION: return createIfExpression();
      case FLYPackage.FOR_EXPRESSION: return createForExpression();
      case FLYPackage.FOR_DELIMETER: return createForDelimeter();
      case FLYPackage.FOR_INDEX: return createForIndex();
      case FLYPackage.VARIABLE_FOR: return createVariableFor();
      case FLYPackage.WHILE_EXPRESSION: return createWhileExpression();
      case FLYPackage.BLOCK_EXPRESSION: return createBlockExpression();
      case FLYPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case FLYPackage.OBJECT: return createObject();
      case FLYPackage.INDEX: return createIndex();
      case FLYPackage.ARRAY_VALUE: return createArrayValue();
      case FLYPackage.DECLARATION_OBJECT: return createDeclarationObject();
      case FLYPackage.DECLARATION_FEATURE: return createDeclarationFeature();
      case FLYPackage.FEAUTURE_NAME: return createFeautureName();
      case FLYPackage.OBJECT_LITERAL: return createObjectLiteral();
      case FLYPackage.SUB_INDEX: return createSubIndex();
      case FLYPackage.RANGE_LITERAL: return createRangeLiteral();
      case FLYPackage.MATH_FUNCTION: return createMathFunction();
      case FLYPackage.VARIABLE_FUNCTION: return createVariableFunction();
      case FLYPackage.FUNCTION_RETURN: return createFunctionReturn();
      case FLYPackage.FUNCTION_DEFINITION: return createFunctionDefinition();
      case FLYPackage.CHANNEL_SEND: return createChannelSend();
      case FLYPackage.CHANNEL_RECEIVE: return createChannelReceive();
      case FLYPackage.LOCAL_FUNCTION_CALL: return createLocalFunctionCall();
      case FLYPackage.LOCAL_FUNCTION_INPUT: return createLocalFunctionInput();
      case FLYPackage.FLY_FUNCTION_CALL: return createFlyFunctionCall();
      case FLYPackage.FUNCTION_INPUT: return createFunctionInput();
      case FLYPackage.NATIVE_EXPRESSION: return createNativeExpression();
      case FLYPackage.REQUIRE_EXPRESSION: return createRequireExpression();
      case FLYPackage.POSTFIX_OPERATION: return createPostfixOperation();
      case FLYPackage.ARITHMETIC_EXPRESSION: return createArithmeticExpression();
      case FLYPackage.ENVIRONMENT_DECLARATION: return createEnvironmentDeclaration();
      case FLYPackage.DAT_DECLARATION: return createDatDeclaration();
      case FLYPackage.RANDOM_DECLARATION: return createRandomDeclaration();
      case FLYPackage.BIN_DECLARATION: return createBinDeclaration();
      case FLYPackage.OPTIMIZER_DECLARATION: return createOptimizerDeclaration();
      case FLYPackage.CHANNEL_DECLARATION: return createChannelDeclaration();
      case FLYPackage.CONSTANT_DECLARATION: return createConstantDeclaration();
      case FLYPackage.NAME_OBJECT_DEF: return createNameObjectDef();
      case FLYPackage.ARRAY_DEFINITION: return createArrayDefinition();
      case FLYPackage.ARRAY_INIT: return createArrayInit();
      case FLYPackage.NAME_OBJECT: return createNameObject();
      case FLYPackage.INDEX_OBJECT: return createIndexObject();
      case FLYPackage.DAT_SINGLE_OBJECT: return createDatSingleObject();
      case FLYPackage.DAT_TABLE_OBJECT: return createDatTableObject();
      case FLYPackage.BINARY_OPERATION: return createBinaryOperation();
      case FLYPackage.UNARY_OPERATION: return createUnaryOperation();
      case FLYPackage.CAST_EXPRESSION: return createCastExpression();
      case FLYPackage.TIME_FUNCTION: return createTimeFunction();
      case FLYPackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case FLYPackage.NUMBER_LITERAL: return createNumberLiteral();
      case FLYPackage.STRING_LITERAL: return createStringLiteral();
      case FLYPackage.FLOAT_LITERAL: return createFloatLiteral();
      case FLYPackage.VARIABLE_LITERAL: return createVariableLiteral();
      case FLYPackage.PARENTHESIZED_EXPRESSION: return createParenthesizedExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fly createFly()
  {
    FlyImpl fly = new FlyImpl();
    return fly;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SortExpression createSortExpression()
  {
    SortExpressionImpl sortExpression = new SortExpressionImpl();
    return sortExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrintExpression createPrintExpression()
  {
    PrintExpressionImpl printExpression = new PrintExpressionImpl();
    return printExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfExpression createIfExpression()
  {
    IfExpressionImpl ifExpression = new IfExpressionImpl();
    return ifExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForExpression createForExpression()
  {
    ForExpressionImpl forExpression = new ForExpressionImpl();
    return forExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForDelimeter createForDelimeter()
  {
    ForDelimeterImpl forDelimeter = new ForDelimeterImpl();
    return forDelimeter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForIndex createForIndex()
  {
    ForIndexImpl forIndex = new ForIndexImpl();
    return forIndex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableFor createVariableFor()
  {
    VariableForImpl variableFor = new VariableForImpl();
    return variableFor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileExpression createWhileExpression()
  {
    WhileExpressionImpl whileExpression = new WhileExpressionImpl();
    return whileExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockExpression createBlockExpression()
  {
    BlockExpressionImpl blockExpression = new BlockExpressionImpl();
    return blockExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.fLY.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Index createIndex()
  {
    IndexImpl index = new IndexImpl();
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayValue createArrayValue()
  {
    ArrayValueImpl arrayValue = new ArrayValueImpl();
    return arrayValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclarationObject createDeclarationObject()
  {
    DeclarationObjectImpl declarationObject = new DeclarationObjectImpl();
    return declarationObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclarationFeature createDeclarationFeature()
  {
    DeclarationFeatureImpl declarationFeature = new DeclarationFeatureImpl();
    return declarationFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeautureName createFeautureName()
  {
    FeautureNameImpl feautureName = new FeautureNameImpl();
    return feautureName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectLiteral createObjectLiteral()
  {
    ObjectLiteralImpl objectLiteral = new ObjectLiteralImpl();
    return objectLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubIndex createSubIndex()
  {
    SubIndexImpl subIndex = new SubIndexImpl();
    return subIndex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RangeLiteral createRangeLiteral()
  {
    RangeLiteralImpl rangeLiteral = new RangeLiteralImpl();
    return rangeLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MathFunction createMathFunction()
  {
    MathFunctionImpl mathFunction = new MathFunctionImpl();
    return mathFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableFunction createVariableFunction()
  {
    VariableFunctionImpl variableFunction = new VariableFunctionImpl();
    return variableFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionReturn createFunctionReturn()
  {
    FunctionReturnImpl functionReturn = new FunctionReturnImpl();
    return functionReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDefinition createFunctionDefinition()
  {
    FunctionDefinitionImpl functionDefinition = new FunctionDefinitionImpl();
    return functionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChannelSend createChannelSend()
  {
    ChannelSendImpl channelSend = new ChannelSendImpl();
    return channelSend;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChannelReceive createChannelReceive()
  {
    ChannelReceiveImpl channelReceive = new ChannelReceiveImpl();
    return channelReceive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LocalFunctionCall createLocalFunctionCall()
  {
    LocalFunctionCallImpl localFunctionCall = new LocalFunctionCallImpl();
    return localFunctionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LocalFunctionInput createLocalFunctionInput()
  {
    LocalFunctionInputImpl localFunctionInput = new LocalFunctionInputImpl();
    return localFunctionInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FlyFunctionCall createFlyFunctionCall()
  {
    FlyFunctionCallImpl flyFunctionCall = new FlyFunctionCallImpl();
    return flyFunctionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionInput createFunctionInput()
  {
    FunctionInputImpl functionInput = new FunctionInputImpl();
    return functionInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NativeExpression createNativeExpression()
  {
    NativeExpressionImpl nativeExpression = new NativeExpressionImpl();
    return nativeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequireExpression createRequireExpression()
  {
    RequireExpressionImpl requireExpression = new RequireExpressionImpl();
    return requireExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PostfixOperation createPostfixOperation()
  {
    PostfixOperationImpl postfixOperation = new PostfixOperationImpl();
    return postfixOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticExpression createArithmeticExpression()
  {
    ArithmeticExpressionImpl arithmeticExpression = new ArithmeticExpressionImpl();
    return arithmeticExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnvironmentDeclaration createEnvironmentDeclaration()
  {
    EnvironmentDeclarationImpl environmentDeclaration = new EnvironmentDeclarationImpl();
    return environmentDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatDeclaration createDatDeclaration()
  {
    DatDeclarationImpl datDeclaration = new DatDeclarationImpl();
    return datDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RandomDeclaration createRandomDeclaration()
  {
    RandomDeclarationImpl randomDeclaration = new RandomDeclarationImpl();
    return randomDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinDeclaration createBinDeclaration()
  {
    BinDeclarationImpl binDeclaration = new BinDeclarationImpl();
    return binDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptimizerDeclaration createOptimizerDeclaration()
  {
    OptimizerDeclarationImpl optimizerDeclaration = new OptimizerDeclarationImpl();
    return optimizerDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChannelDeclaration createChannelDeclaration()
  {
    ChannelDeclarationImpl channelDeclaration = new ChannelDeclarationImpl();
    return channelDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstantDeclaration createConstantDeclaration()
  {
    ConstantDeclarationImpl constantDeclaration = new ConstantDeclarationImpl();
    return constantDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NameObjectDef createNameObjectDef()
  {
    NameObjectDefImpl nameObjectDef = new NameObjectDefImpl();
    return nameObjectDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayDefinition createArrayDefinition()
  {
    ArrayDefinitionImpl arrayDefinition = new ArrayDefinitionImpl();
    return arrayDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayInit createArrayInit()
  {
    ArrayInitImpl arrayInit = new ArrayInitImpl();
    return arrayInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NameObject createNameObject()
  {
    NameObjectImpl nameObject = new NameObjectImpl();
    return nameObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexObject createIndexObject()
  {
    IndexObjectImpl indexObject = new IndexObjectImpl();
    return indexObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatSingleObject createDatSingleObject()
  {
    DatSingleObjectImpl datSingleObject = new DatSingleObjectImpl();
    return datSingleObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatTableObject createDatTableObject()
  {
    DatTableObjectImpl datTableObject = new DatTableObjectImpl();
    return datTableObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryOperation createBinaryOperation()
  {
    BinaryOperationImpl binaryOperation = new BinaryOperationImpl();
    return binaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryOperation createUnaryOperation()
  {
    UnaryOperationImpl unaryOperation = new UnaryOperationImpl();
    return unaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CastExpression createCastExpression()
  {
    CastExpressionImpl castExpression = new CastExpressionImpl();
    return castExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeFunction createTimeFunction()
  {
    TimeFunctionImpl timeFunction = new TimeFunctionImpl();
    return timeFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FloatLiteral createFloatLiteral()
  {
    FloatLiteralImpl floatLiteral = new FloatLiteralImpl();
    return floatLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableLiteral createVariableLiteral()
  {
    VariableLiteralImpl variableLiteral = new VariableLiteralImpl();
    return variableLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParenthesizedExpression createParenthesizedExpression()
  {
    ParenthesizedExpressionImpl parenthesizedExpression = new ParenthesizedExpressionImpl();
    return parenthesizedExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FLYPackage getFLYPackage()
  {
    return (FLYPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FLYPackage getPackage()
  {
    return FLYPackage.eINSTANCE;
  }

} //FLYFactoryImpl
