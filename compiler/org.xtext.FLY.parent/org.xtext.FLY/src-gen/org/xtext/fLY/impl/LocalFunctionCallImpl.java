/**
 * generated by Xtext 2.16.0
 */
package org.xtext.fLY.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.fLY.ArithmeticExpression;
import org.xtext.fLY.ArrayValue;
import org.xtext.fLY.FLYPackage;
import org.xtext.fLY.FunctionDefinition;
import org.xtext.fLY.LocalFunctionCall;
import org.xtext.fLY.LocalFunctionInput;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Local Function Call</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.fLY.impl.LocalFunctionCallImpl#getValues <em>Values</em>}</li>
 *   <li>{@link org.xtext.fLY.impl.LocalFunctionCallImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link org.xtext.fLY.impl.LocalFunctionCallImpl#getInput <em>Input</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LocalFunctionCallImpl extends ExpressionImpl implements LocalFunctionCall
{
  /**
   * The cached value of the '{@link #getValues() <em>Values</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValues()
   * @generated
   * @ordered
   */
  protected EList<ArrayValue> values;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected FunctionDefinition target;

  /**
   * The cached value of the '{@link #getInput() <em>Input</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInput()
   * @generated
   * @ordered
   */
  protected LocalFunctionInput input;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LocalFunctionCallImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FLYPackage.Literals.LOCAL_FUNCTION_CALL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ArrayValue> getValues()
  {
    if (values == null)
    {
      values = new EObjectContainmentEList<ArrayValue>(ArrayValue.class, this, FLYPackage.LOCAL_FUNCTION_CALL__VALUES);
    }
    return values;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDefinition getTarget()
  {
    if (target != null && target.eIsProxy())
    {
      InternalEObject oldTarget = (InternalEObject)target;
      target = (FunctionDefinition)eResolveProxy(oldTarget);
      if (target != oldTarget)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FLYPackage.LOCAL_FUNCTION_CALL__TARGET, oldTarget, target));
      }
    }
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDefinition basicGetTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTarget(FunctionDefinition newTarget)
  {
    FunctionDefinition oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FLYPackage.LOCAL_FUNCTION_CALL__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LocalFunctionInput getInput()
  {
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInput(LocalFunctionInput newInput, NotificationChain msgs)
  {
    LocalFunctionInput oldInput = input;
    input = newInput;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FLYPackage.LOCAL_FUNCTION_CALL__INPUT, oldInput, newInput);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInput(LocalFunctionInput newInput)
  {
    if (newInput != input)
    {
      NotificationChain msgs = null;
      if (input != null)
        msgs = ((InternalEObject)input).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FLYPackage.LOCAL_FUNCTION_CALL__INPUT, null, msgs);
      if (newInput != null)
        msgs = ((InternalEObject)newInput).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FLYPackage.LOCAL_FUNCTION_CALL__INPUT, null, msgs);
      msgs = basicSetInput(newInput, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FLYPackage.LOCAL_FUNCTION_CALL__INPUT, newInput, newInput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FLYPackage.LOCAL_FUNCTION_CALL__VALUES:
        return ((InternalEList<?>)getValues()).basicRemove(otherEnd, msgs);
      case FLYPackage.LOCAL_FUNCTION_CALL__INPUT:
        return basicSetInput(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FLYPackage.LOCAL_FUNCTION_CALL__VALUES:
        return getValues();
      case FLYPackage.LOCAL_FUNCTION_CALL__TARGET:
        if (resolve) return getTarget();
        return basicGetTarget();
      case FLYPackage.LOCAL_FUNCTION_CALL__INPUT:
        return getInput();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FLYPackage.LOCAL_FUNCTION_CALL__VALUES:
        getValues().clear();
        getValues().addAll((Collection<? extends ArrayValue>)newValue);
        return;
      case FLYPackage.LOCAL_FUNCTION_CALL__TARGET:
        setTarget((FunctionDefinition)newValue);
        return;
      case FLYPackage.LOCAL_FUNCTION_CALL__INPUT:
        setInput((LocalFunctionInput)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FLYPackage.LOCAL_FUNCTION_CALL__VALUES:
        getValues().clear();
        return;
      case FLYPackage.LOCAL_FUNCTION_CALL__TARGET:
        setTarget((FunctionDefinition)null);
        return;
      case FLYPackage.LOCAL_FUNCTION_CALL__INPUT:
        setInput((LocalFunctionInput)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FLYPackage.LOCAL_FUNCTION_CALL__VALUES:
        return values != null && !values.isEmpty();
      case FLYPackage.LOCAL_FUNCTION_CALL__TARGET:
        return target != null;
      case FLYPackage.LOCAL_FUNCTION_CALL__INPUT:
        return input != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == ArrayValue.class)
    {
      switch (derivedFeatureID)
      {
        case FLYPackage.LOCAL_FUNCTION_CALL__VALUES: return FLYPackage.ARRAY_VALUE__VALUES;
        default: return -1;
      }
    }
    if (baseClass == ArithmeticExpression.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == ArrayValue.class)
    {
      switch (baseFeatureID)
      {
        case FLYPackage.ARRAY_VALUE__VALUES: return FLYPackage.LOCAL_FUNCTION_CALL__VALUES;
        default: return -1;
      }
    }
    if (baseClass == ArithmeticExpression.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //LocalFunctionCallImpl
