/**
 * generated by Xtext 2.16.0
 */
package org.xtext.fLY.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.fLY.EnvironmentDeclaration;
import org.xtext.fLY.FLYPackage;
import org.xtext.fLY.RequireExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Require Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.fLY.impl.RequireExpressionImpl#getLib <em>Lib</em>}</li>
 *   <li>{@link org.xtext.fLY.impl.RequireExpressionImpl#getEnvironment <em>Environment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RequireExpressionImpl extends ExpressionImpl implements RequireExpression
{
  /**
   * The default value of the '{@link #getLib() <em>Lib</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLib()
   * @generated
   * @ordered
   */
  protected static final String LIB_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLib() <em>Lib</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLib()
   * @generated
   * @ordered
   */
  protected String lib = LIB_EDEFAULT;

  /**
   * The cached value of the '{@link #getEnvironment() <em>Environment</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnvironment()
   * @generated
   * @ordered
   */
  protected EnvironmentDeclaration environment;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequireExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FLYPackage.Literals.REQUIRE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLib()
  {
    return lib;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLib(String newLib)
  {
    String oldLib = lib;
    lib = newLib;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FLYPackage.REQUIRE_EXPRESSION__LIB, oldLib, lib));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnvironmentDeclaration getEnvironment()
  {
    if (environment != null && environment.eIsProxy())
    {
      InternalEObject oldEnvironment = (InternalEObject)environment;
      environment = (EnvironmentDeclaration)eResolveProxy(oldEnvironment);
      if (environment != oldEnvironment)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FLYPackage.REQUIRE_EXPRESSION__ENVIRONMENT, oldEnvironment, environment));
      }
    }
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnvironmentDeclaration basicGetEnvironment()
  {
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEnvironment(EnvironmentDeclaration newEnvironment)
  {
    EnvironmentDeclaration oldEnvironment = environment;
    environment = newEnvironment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FLYPackage.REQUIRE_EXPRESSION__ENVIRONMENT, oldEnvironment, environment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FLYPackage.REQUIRE_EXPRESSION__LIB:
        return getLib();
      case FLYPackage.REQUIRE_EXPRESSION__ENVIRONMENT:
        if (resolve) return getEnvironment();
        return basicGetEnvironment();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FLYPackage.REQUIRE_EXPRESSION__LIB:
        setLib((String)newValue);
        return;
      case FLYPackage.REQUIRE_EXPRESSION__ENVIRONMENT:
        setEnvironment((EnvironmentDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FLYPackage.REQUIRE_EXPRESSION__LIB:
        setLib(LIB_EDEFAULT);
        return;
      case FLYPackage.REQUIRE_EXPRESSION__ENVIRONMENT:
        setEnvironment((EnvironmentDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FLYPackage.REQUIRE_EXPRESSION__LIB:
        return LIB_EDEFAULT == null ? lib != null : !LIB_EDEFAULT.equals(lib);
      case FLYPackage.REQUIRE_EXPRESSION__ENVIRONMENT:
        return environment != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (lib: ");
    result.append(lib);
    result.append(')');
    return result.toString();
  }

} //RequireExpressionImpl
