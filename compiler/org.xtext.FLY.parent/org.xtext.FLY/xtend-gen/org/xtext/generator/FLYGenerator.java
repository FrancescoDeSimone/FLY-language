/**
 * generated by Xtext 2.13.0
 */
package org.xtext.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.fLY.ArithmeticExpression;
import org.xtext.fLY.ArrayDefinition;
import org.xtext.fLY.ArrayInit;
import org.xtext.fLY.ArrayValue;
import org.xtext.fLY.Assignment;
import org.xtext.fLY.BinaryOperation;
import org.xtext.fLY.BlockExpression;
import org.xtext.fLY.BooleanLiteral;
import org.xtext.fLY.CastExpression;
import org.xtext.fLY.ChannelDeclaration;
import org.xtext.fLY.ChannelReceive;
import org.xtext.fLY.ChannelSend;
import org.xtext.fLY.ConstantDeclaration;
import org.xtext.fLY.DatDeclaration;
import org.xtext.fLY.DatSingleObject;
import org.xtext.fLY.DatTableObject;
import org.xtext.fLY.DeclarationFeature;
import org.xtext.fLY.DeclarationObject;
import org.xtext.fLY.EnvironmentDeclaration;
import org.xtext.fLY.Expression;
import org.xtext.fLY.FeautureName;
import org.xtext.fLY.FloatLiteral;
import org.xtext.fLY.Fly;
import org.xtext.fLY.FlyFunctionCall;
import org.xtext.fLY.ForExpression;
import org.xtext.fLY.ForIndex;
import org.xtext.fLY.FunctionDefinition;
import org.xtext.fLY.FunctionInput;
import org.xtext.fLY.FunctionReturn;
import org.xtext.fLY.IfExpression;
import org.xtext.fLY.IndexObject;
import org.xtext.fLY.LocalFunctionCall;
import org.xtext.fLY.LocalFunctionInput;
import org.xtext.fLY.MathFunction;
import org.xtext.fLY.NameObject;
import org.xtext.fLY.NameObjectDef;
import org.xtext.fLY.NativeExpression;
import org.xtext.fLY.NumberLiteral;
import org.xtext.fLY.ObjectLiteral;
import org.xtext.fLY.ParenthesizedExpression;
import org.xtext.fLY.PostfixOperation;
import org.xtext.fLY.PrintExpression;
import org.xtext.fLY.RandomDeclaration;
import org.xtext.fLY.RangeLiteral;
import org.xtext.fLY.SortExpression;
import org.xtext.fLY.StringLiteral;
import org.xtext.fLY.TimeFunction;
import org.xtext.fLY.UnaryOperation;
import org.xtext.fLY.VariableDeclaration;
import org.xtext.fLY.VariableFor;
import org.xtext.fLY.VariableFunction;
import org.xtext.fLY.VariableLiteral;
import org.xtext.fLY.WhileExpression;
import org.xtext.generator.FLYGeneratorJs;
import org.xtext.generator.FLYGeneratorPython;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FLYGenerator extends AbstractGenerator {
  @Inject
  private FLYGeneratorPython pyGen;
  
  @Inject
  private FLYGeneratorJs jsGen;
  
  private HashMap<String, HashMap<String, String>> typeSystem = new HashMap<String, HashMap<String, String>>();
  
  private String name = "";
  
  private int func_ID = 0;
  
  private int file_deploy_id = 0;
  
  private long id_execution = System.currentTimeMillis();
  
  private Object last_func_result = null;
  
  private ArrayList<String> deployed_function = new ArrayList<String>();
  
  private Resource res = null;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.res = resource;
    String name_extension = IterableExtensions.<String>last(((Iterable<String>)Conversions.doWrapArray(resource.getURI().toString().split("/"))));
    this.name = name_extension.toString().split(".fly")[0];
    HashMap<String, String> _hashMap = new HashMap<String, String>();
    this.typeSystem.put("main", _hashMap);
    fsa.generateFile((this.name + ".java"), this.compileJava(resource));
    Iterable<FlyFunctionCall> _filter = Iterables.<FlyFunctionCall>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FlyFunctionCall.class);
    for (final FlyFunctionCall element : _filter) {
      {
        boolean is_async = element.isIsAsync();
        EObject _right = element.getEnvironment().getRight();
        DeclarationFeature _get = ((DeclarationObject) _right).getFeatures().get(0);
        String type_env = ((DeclarationFeature) _get).getValue_s();
        if ((type_env.equals("local") && (((Object[])Conversions.unwrapArray(((DeclarationObject) element.getEnvironment().getRight()).getFeatures(), Object.class)).length == 3))) {
          this.pyGen.generatePython(resource, fsa, context, this.name, element.getTarget(), element.getEnvironment(), this.typeSystem, this.id_execution, true, is_async);
        }
        boolean _notEquals = (!Objects.equal(type_env, "local"));
        if (_notEquals) {
          EObject _right_1 = element.getEnvironment().getRight();
          DeclarationFeature _get_1 = ((DeclarationObject) _right_1).getFeatures().get(4);
          String language = ((DeclarationFeature) _get_1).getValue_s();
          boolean _contains = language.contains("python");
          if (_contains) {
            this.pyGen.generatePython(resource, fsa, context, this.name, element.getTarget(), element.getEnvironment(), this.typeSystem, this.id_execution, false, is_async);
          } else {
            boolean _contains_1 = language.contains("nodejs");
            if (_contains_1) {
              this.jsGen.generateJS(resource, fsa, context, this.name, element.getTarget(), element.getEnvironment(), this.typeSystem, this.id_execution, false, is_async);
            }
          }
        }
      }
    }
  }
  
  public CharSequence compileJava(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.FileInputStream;");
    _builder.newLine();
    _builder.append("import java.io.InputStreamReader;");
    _builder.newLine();
    _builder.append("import java.io.FileOutputStream;");
    _builder.newLine();
    _builder.append("import java.io.OutputStreamWriter;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.nio.ByteBuffer;");
    _builder.newLine();
    _builder.append("import java.nio.channels.FileChannel;");
    _builder.newLine();
    _builder.append("import java.nio.file.StandardOpenOption;");
    _builder.newLine();
    _builder.append("import java.io.InputStream;");
    _builder.newLine();
    _builder.append("import java.net.ServerSocket;");
    _builder.newLine();
    _builder.append("import java.net.Socket;");
    _builder.newLine();
    _builder.append("import java.io.BufferedReader;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.zip.ZipEntry;");
    _builder.newLine();
    _builder.append("import java.util.zip.ZipOutputStream;");
    _builder.newLine();
    _builder.append("import java.io.BufferedWriter;");
    _builder.newLine();
    _builder.append("import java.io.FileWriter;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.time.LocalDate;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.api.Table;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.io.csv.CsvReadOptions;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.columns.Column;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.selection.Selection;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.table.Rows;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.api.Row;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.LinkedTransferQueue;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ExecutorService;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Executors;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ExecutionException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Callable;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Future;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.atomic.AtomicInteger;");
    _builder.newLine();
    _builder.append("import java.util.Random;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.Comparator;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.Scanner;");
    _builder.newLine();
    _builder.append("import com.amazonaws.AmazonClientException;");
    _builder.newLine();
    _builder.append("import com.amazonaws.auth.AWSStaticCredentialsProvider;");
    _builder.newLine();
    _builder.append("import com.amazonaws.auth.BasicAWSCredentials;");
    _builder.newLine();
    _builder.append("import com.amazonaws.auth.profile.ProfileCredentialsProvider;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.AmazonIdentityManagement;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.AmazonIdentityManagementClientBuilder;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.CreateRoleRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.CreateRoleResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.DeleteRolePolicyRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.DeleteRoleRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.PutRolePolicyRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.AWSLambda;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.AWSLambdaClientBuilder;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.AddPermissionRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.AddPermissionResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.CreateFunctionRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.CreateFunctionResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.DeleteFunctionRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.FunctionCode;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.InvokeRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.AmazonSQS;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.Message;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.AmazonSQSClient;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.CreateQueueRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.CreateQueueResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.ReceiveMessageRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.ReceiveMessageResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.SendMessageRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.AmazonSQSException;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.GetQueueAttributesRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.GetQueueUrlResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.DeleteQueueRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.GetRoleRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.GetRoleResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.AmazonS3;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.AmazonS3Client;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.AmazonS3ClientBuilder;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.AmazonS3Exception;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.Bucket;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.CannedAccessControlList;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.PutObjectRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.ListObjectsV2Result;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.PutObjectRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.S3ObjectSummary;");
    _builder.newLine();
    _builder.append("import com.google.gson.Gson;");
    _builder.newLine();
    _builder.append("import com.google.gson.reflect.TypeToken;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static HashMap<String,HashMap<String, Object>> __fly_environment = new HashMap<String,HashMap<String,Object>>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      Iterable<Expression> _filter = Iterables.<Expression>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Expression.class);
      for(final Expression element : _filter) {
        {
          if ((element instanceof ChannelDeclaration)) {
            _builder.append("\t");
            String _generateChannelDeclaration = this.generateChannelDeclaration(((ChannelDeclaration)element));
            _builder.append(_generateChannelDeclaration, "\t");
            _builder.append("\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
        {
          if ((element instanceof ConstantDeclaration)) {
            _builder.append("\t");
            String _generateConstantDeclaration = this.generateConstantDeclaration(((ConstantDeclaration)element), "main");
            _builder.append(_generateConstantDeclaration, "\t");
            _builder.append("\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((element instanceof EnvironmentDeclaration)) {
            _builder.append("\t");
            String _generateEnvironmentDeclaration = this.generateEnvironmentDeclaration(((EnvironmentDeclaration)element));
            _builder.append(_generateEnvironmentDeclaration, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static long  __id_execution =  System.currentTimeMillis();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws Exception{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    {
      Iterable<EnvironmentDeclaration> _filter_1 = Iterables.<EnvironmentDeclaration>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EnvironmentDeclaration.class);
      for(final EnvironmentDeclaration element_1 : _filter_1) {
        _builder.append("\t\t");
        String _setEnvironmentDeclarationInfo = this.setEnvironmentDeclarationInfo(element_1);
        _builder.append(_setEnvironmentDeclarationInfo, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      final Function1<DatDeclaration, Boolean> _function = (DatDeclaration it) -> {
        return Boolean.valueOf(it.isOnCloud());
      };
      int _length = ((Object[])Conversions.unwrapArray(IterableExtensions.<DatDeclaration>filter(Iterables.<DatDeclaration>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), DatDeclaration.class), _function), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        _builder.append("\t\t");
        _builder.append("if(!__s3.doesBucketExist(\"bucket-\"+__id_execution)){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("__s3.createBucket(\"bucket-\"+__id_execution);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      final Function1<EnvironmentDeclaration, Boolean> _function_1 = (EnvironmentDeclaration it) -> {
        EObject _right = it.getRight();
        boolean _equals = ((DeclarationObject) _right).getFeatures().get(0).getValue_s().equals("local");
        return Boolean.valueOf((!_equals));
      };
      Iterable<EnvironmentDeclaration> _filter_2 = IterableExtensions.<EnvironmentDeclaration>filter(Iterables.<EnvironmentDeclaration>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EnvironmentDeclaration.class), _function_1);
      for(final EnvironmentDeclaration element_2 : _filter_2) {
        _builder.append("\t\t");
        _builder.append("ExecutorService __thread_pool_");
        String _name = element_2.getName();
        _builder.append(_name, "\t\t");
        _builder.append(" = Executors.newFixedThreadPool((int) __fly_environment.get(\"local\").get(\"nthread\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      final Function1<DatDeclaration, Boolean> _function_2 = (DatDeclaration it) -> {
        return Boolean.valueOf(it.isOnCloud());
      };
      Iterable<DatDeclaration> _filter_3 = IterableExtensions.<DatDeclaration>filter(Iterables.<DatDeclaration>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), DatDeclaration.class), _function_2);
      for(final DatDeclaration element_3 : _filter_3) {
        _builder.append("\t\t");
        int _plusPlus = this.file_deploy_id++;
        String _deployFileOnCloud = this.deployFileOnCloud(element_3, _plusPlus);
        _builder.append(_deployFileOnCloud, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      final Function1<FlyFunctionCall, Boolean> _function_3 = (FlyFunctionCall it) -> {
        EObject _right = it.getEnvironment().getRight();
        boolean _equals = ((DeclarationObject) _right).getFeatures().get(0).equals("local");
        return Boolean.valueOf((!_equals));
      };
      Iterable<FlyFunctionCall> _filter_4 = IterableExtensions.<FlyFunctionCall>filter(Iterables.<FlyFunctionCall>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FlyFunctionCall.class), _function_3);
      for(final FlyFunctionCall element_4 : _filter_4) {
        _builder.append("\t\t");
        String _deployFlyFunctionOnCloud = this.deployFlyFunctionOnCloud(element_4);
        _builder.append(_deployFlyFunctionOnCloud, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    {
      Iterable<Expression> _filter_5 = Iterables.<Expression>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Expression.class);
      for(final Expression element_5 : _filter_5) {
        {
          Object _checkBlock = this.checkBlock(element_5.eContainer());
          boolean _equals = Objects.equal(_checkBlock, Boolean.valueOf(false));
          if (_equals) {
            _builder.append("\t\t");
            CharSequence _generateExpression = this.generateExpression(element_5, "main");
            _builder.append(_generateExpression, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      final Function1<FlyFunctionCall, Boolean> _function_4 = (FlyFunctionCall it) -> {
        EObject _right = it.getEnvironment().getRight();
        boolean _equals_1 = ((DeclarationObject) _right).getFeatures().get(0).equals("local");
        return Boolean.valueOf((!_equals_1));
      };
      Iterable<FlyFunctionCall> _filter_6 = IterableExtensions.<FlyFunctionCall>filter(Iterables.<FlyFunctionCall>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FlyFunctionCall.class), _function_4);
      for(final FlyFunctionCall element_6 : _filter_6) {
        _builder.append("\t\t");
        String _undeployFlyFunctionOnCloud = this.undeployFlyFunctionOnCloud(element_6);
        _builder.append(_undeployFlyFunctionOnCloud, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      final Function1<EnvironmentDeclaration, Boolean> _function_5 = (EnvironmentDeclaration it) -> {
        EObject _right = it.getRight();
        boolean _equals_1 = ((DeclarationObject) _right).getFeatures().get(0).getValue_s().equals("local");
        return Boolean.valueOf((!_equals_1));
      };
      Iterable<EnvironmentDeclaration> _filter_7 = IterableExtensions.<EnvironmentDeclaration>filter(Iterables.<EnvironmentDeclaration>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EnvironmentDeclaration.class), _function_5);
      for(final EnvironmentDeclaration element_7 : _filter_7) {
        _builder.append("\t\t");
        _builder.append("__thread_pool_");
        String _name_1 = element_7.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append(".shutdown();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.exit(0);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      Iterable<FunctionDefinition> _filter_8 = Iterables.<FunctionDefinition>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FunctionDefinition.class);
      for(final FunctionDefinition element_8 : _filter_8) {
        {
          Object _checkBlock_1 = this.checkBlock(element_8.eContainer());
          boolean _equals_1 = Objects.equal(_checkBlock_1, Boolean.valueOf(false));
          if (_equals_1) {
            _builder.append("\t");
            String _generateFunctionDefinition = this.generateFunctionDefinition(element_8);
            _builder.append(_generateFunctionDefinition, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String __generateString(Table t) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuilder b = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b.append(\"[\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int i_r = t.rowCount();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Row r : t) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.append(\'{\');");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int i=0;i< r.columnCount();i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("b.append(\"\\\"\"+ r.columnNames().get(i) +\"\\\":\"+r.getObject(i)+ ((i<r.columnCount()-1)?\",\":\"\"));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.append(\"}\"+(((i_r != 1 ))?\",\":\"\"));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("i_r--;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b.append(\"]\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return b.toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String __generateString(String s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuilder b = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b.append(\"[\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String[] tmp = s.split(\"\\n\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String t: tmp){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.append(t);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(t != tmp[tmp.length-1]){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("b.append(\",\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b.append(\"]\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return b.toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String undeployFlyFunctionOnCloud(final FlyFunctionCall call) {
    boolean _contains = this.deployed_function.contains(call.getTarget().getName());
    if (_contains) {
      this.deployed_function.remove(call.getTarget().getName());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Runtime.getRuntime().exec(\"chmod +x src-gen/");
      String _name = call.getTarget().getName();
      _builder.append(_name);
      _builder.append("_undeploy.sh\");");
      _builder.newLineIfNotEmpty();
      _builder.append("ProcessBuilder __processBuilder_undeploy_");
      String _name_1 = call.getTarget().getName();
      _builder.append(_name_1);
      _builder.append(" = new ProcessBuilder(\"/bin/bash\", \"-c\", \"src-gen/");
      String _name_2 = call.getTarget().getName();
      _builder.append(_name_2);
      _builder.append("_undeploy.sh ");
      String _name_3 = call.getTarget().getName();
      _builder.append(_name_3);
      _builder.append(" \"+__id_execution);");
      _builder.newLineIfNotEmpty();
      _builder.append("Process __p_undeploy_");
      String _name_4 = call.getTarget().getName();
      _builder.append(_name_4);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("try {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("__p_undeploy_");
      String _name_5 = call.getTarget().getName();
      _builder.append(_name_5, "\t");
      _builder.append("= __processBuilder_undeploy_");
      String _name_6 = call.getTarget().getName();
      _builder.append(_name_6, "\t");
      _builder.append(".start();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("__p_undeploy_");
      String _name_7 = call.getTarget().getName();
      _builder.append(_name_7, "\t");
      _builder.append(".waitFor();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("if(__p_undeploy_");
      String _name_8 = call.getTarget().getName();
      _builder.append(_name_8, "\t");
      _builder.append(".exitValue()!=0){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("System.out.println(\"Error in ");
      String _name_9 = call.getTarget().getName();
      _builder.append(_name_9, "\t\t");
      _builder.append("_undeploy.sh \");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("System.exit(1);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("} catch (Exception e) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("e.printStackTrace();");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      return _builder_1.toString();
    }
  }
  
  public String deployFlyFunctionOnCloud(final FlyFunctionCall call) {
    boolean _contains = this.deployed_function.contains(call.getTarget().getName());
    boolean _not = (!_contains);
    if (_not) {
      this.deployed_function.add(call.getTarget().getName());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Runtime.getRuntime().exec(\"chmod +x src-gen/");
      String _name = call.getTarget().getName();
      _builder.append(_name);
      _builder.append("_deploy.sh\");");
      _builder.newLineIfNotEmpty();
      _builder.append("ProcessBuilder __processBuilder_deploy_");
      String _name_1 = call.getTarget().getName();
      _builder.append(_name_1);
      _builder.append(" = new ProcessBuilder(\"/bin/bash\", \"-c\", \"src-gen/");
      String _name_2 = call.getTarget().getName();
      _builder.append(_name_2);
      _builder.append("_deploy.sh ");
      String _name_3 = call.getTarget().getName();
      _builder.append(_name_3);
      _builder.append(" \"+__id_execution);");
      _builder.newLineIfNotEmpty();
      _builder.append("__processBuilder_deploy_");
      String _name_4 = call.getTarget().getName();
      _builder.append(_name_4);
      _builder.append(".redirectOutput(ProcessBuilder.Redirect.INHERIT);");
      _builder.newLineIfNotEmpty();
      _builder.append("Map<String, String> __env = __processBuilder_deploy_");
      String _name_5 = call.getTarget().getName();
      _builder.append(_name_5);
      _builder.append(".environment();");
      _builder.newLineIfNotEmpty();
      _builder.append("__processBuilder_deploy_");
      String _name_6 = call.getTarget().getName();
      _builder.append(_name_6);
      _builder.append(".redirectError(ProcessBuilder.Redirect.INHERIT);");
      _builder.newLineIfNotEmpty();
      _builder.append("String __path_env = __env.get(\"PATH\");");
      _builder.newLine();
      _builder.append("if (!__path_env.contains(\"/usr/local/bin\")) {");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("__env.put(\"PATH\", __path_env+\":/usr/local/bin\");");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("Process __p_deploy_");
      String _name_7 = call.getTarget().getName();
      _builder.append(_name_7);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("try {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("__p_deploy_");
      String _name_8 = call.getTarget().getName();
      _builder.append(_name_8, "\t");
      _builder.append(" = __processBuilder_deploy_");
      String _name_9 = call.getTarget().getName();
      _builder.append(_name_9, "\t");
      _builder.append(".start();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("__p_deploy_");
      String _name_10 = call.getTarget().getName();
      _builder.append(_name_10, "\t");
      _builder.append(".waitFor();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("if(__p_deploy_");
      String _name_11 = call.getTarget().getName();
      _builder.append(_name_11, "\t");
      _builder.append(".exitValue()!=0){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("System.out.println(\"Error in ");
      String _name_12 = call.getTarget().getName();
      _builder.append(_name_12, "\t\t");
      _builder.append("_deploy.sh \");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("System.exit(1);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("} catch (Exception e) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("e.printStackTrace();");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      return _builder_1.toString();
    }
  }
  
  public CharSequence generateExpression(final Expression element, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((element instanceof VariableDeclaration)) {
        String _generateVariableDeclaration = this.generateVariableDeclaration(((VariableDeclaration)element), scope);
        _builder.append(_generateVariableDeclaration);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof DatDeclaration)) {
        String _generateDatDeclaration = this.generateDatDeclaration(((DatDeclaration)element), scope);
        _builder.append(_generateDatDeclaration);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof RandomDeclaration)) {
        String _generateRandomDeclaration = this.generateRandomDeclaration(((RandomDeclaration)element));
        _builder.append(_generateRandomDeclaration);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof Assignment)) {
        String _generateAssignment = this.generateAssignment(((Assignment)element), scope);
        _builder.append(_generateAssignment);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof PrintExpression)) {
        String _generatePrintExpression = this.generatePrintExpression(((PrintExpression)element), scope);
        _builder.append(_generatePrintExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof IfExpression)) {
        CharSequence _generateIfExpression = this.generateIfExpression(((IfExpression)element), scope);
        _builder.append(_generateIfExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof ForExpression)) {
        String _generateForExpression = this.generateForExpression(((ForExpression)element), scope);
        _builder.append(_generateForExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof WhileExpression)) {
        CharSequence _generateWhileExpression = this.generateWhileExpression(((WhileExpression)element), scope);
        _builder.append(_generateWhileExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof ChannelSend)) {
        String _generateChannelSend = this.generateChannelSend(((ChannelSend)element), scope);
        _builder.append(_generateChannelSend);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof ChannelReceive)) {
        String _generateChannelReceive = this.generateChannelReceive(((ChannelReceive)element), scope);
        _builder.append(_generateChannelReceive);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof FlyFunctionCall)) {
        String _generateFlyFunctionCall = this.generateFlyFunctionCall(((FlyFunctionCall)element), scope);
        _builder.append(_generateFlyFunctionCall);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof LocalFunctionCall)) {
        String _generateLocalFunctionCall = this.generateLocalFunctionCall(((LocalFunctionCall)element), scope);
        _builder.append(_generateLocalFunctionCall);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof FunctionReturn)) {
        CharSequence _generateFunctionReturn = this.generateFunctionReturn(((FunctionReturn)element), scope);
        _builder.append(_generateFunctionReturn);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof BlockExpression)) {
        CharSequence _generateBlockExpression = this.generateBlockExpression(((BlockExpression)element), scope);
        _builder.append(_generateBlockExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof VariableFunction)) {
        String _generateVariableFunction = this.generateVariableFunction(((VariableFunction)element), Boolean.valueOf(true), scope);
        _builder.append(_generateVariableFunction);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof ChannelDeclaration)) {
        String _generateChanelDeclarationForCloud = this.generateChanelDeclarationForCloud(((ChannelDeclaration)element));
        _builder.append(_generateChanelDeclarationForCloud);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof ChannelDeclaration)) {
        String _generateChannelDeclarationForLanguage = this.generateChannelDeclarationForLanguage(((ChannelDeclaration)element));
        _builder.append(_generateChannelDeclarationForLanguage);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof SortExpression)) {
        String _generateSortExpression = this.generateSortExpression(((SortExpression)element), scope);
        _builder.append(_generateSortExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof PostfixOperation)) {
        String _generatePostfixOperation = this.generatePostfixOperation(((PostfixOperation)element), scope);
        _builder.append(_generatePostfixOperation);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String generatePostfixOperation(final PostfixOperation exp, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    String _generateArithmeticExpression = this.generateArithmeticExpression(exp.getVariable(), scope);
    _builder.append(_generateArithmeticExpression);
    String _feature = exp.getFeature();
    _builder.append(_feature);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateSortExpression(final SortExpression exp, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ArrayList<Entry<Object,Object>> __sup = new ArrayList<Entry<Object,Object>>(");
    String _name = exp.getTarget().getName();
    _builder.append(_name);
    _builder.append(".entrySet());");
    _builder.newLineIfNotEmpty();
    _builder.append("Collections.sort(__sup, new Comparator<Entry<Object,Object>>() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public int compare(Entry<Object,Object> o1, Entry<Object,Object> o2) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(o1.getValue() instanceof Integer && o2.getValue() instanceof Integer)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return Integer.compare((Integer) o1.getValue(),(Integer) o2.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else if(o1.getValue() instanceof Double && o2.getValue() instanceof Double)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return Double.compare((Double) o1.getValue(), (Double) o2.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else return 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    String _name_1 = exp.getTarget().getName();
    _builder.append(_name_1);
    _builder.append(".clear();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _equals = exp.getType().equals("desc");
      if (_equals) {
        _builder.append("Collections.reverse(__sup);");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("for (int __i=0; __i<__sup.size();__i++) {");
    _builder.newLine();
    _builder.append("\t");
    String _name_2 = exp.getTarget().getName();
    _builder.append(_name_2, "\t");
    _builder.append(".put(\"\"+__i, __sup.get(__i).getValue());");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateVariableDeclaration(final VariableDeclaration dec, final String scope) {
    boolean _equals = dec.getTypeobject().equals("var");
    if (_equals) {
      EObject _right = dec.getRight();
      if ((_right instanceof NameObjectDef)) {
        this.typeSystem.get(scope).put(dec.getName(), "HashMap");
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("HashMap<Object,Object> ");
        String _name = dec.getName();
        _builder.append(_name);
        _builder.append(" = new HashMap<Object,Object>();");
        _builder.newLineIfNotEmpty();
        String s = _builder.toString();
        int i = 0;
        EObject _right_1 = dec.getRight();
        EList<FeautureName> _features = ((NameObjectDef) _right_1).getFeatures();
        for (final FeautureName f : _features) {
          String _feature = f.getFeature();
          boolean _notEquals = (!Objects.equal(_feature, null));
          if (_notEquals) {
            HashMap<String, String> _get = this.typeSystem.get(scope);
            String _name_1 = dec.getName();
            String _plus = (_name_1 + ".");
            String _feature_1 = f.getFeature();
            String _plus_1 = (_plus + _feature_1);
            _get.put(_plus_1, 
              this.valuateArithmeticExpression(f.getValue(), scope));
            StringConcatenation _builder_1 = new StringConcatenation();
            String _name_2 = dec.getName();
            _builder_1.append(_name_2);
            _builder_1.append(".put(\"");
            String _feature_2 = f.getFeature();
            _builder_1.append(_feature_2);
            _builder_1.append("\",");
            String _generateArithmeticExpression = this.generateArithmeticExpression(f.getValue(), scope);
            _builder_1.append(_generateArithmeticExpression);
            _builder_1.append(");");
            _builder_1.newLineIfNotEmpty();
            String _plus_2 = (s + _builder_1);
            s = _plus_2;
          } else {
            HashMap<String, String> _get_1 = this.typeSystem.get(scope);
            String _name_3 = dec.getName();
            String _plus_3 = (_name_3 + "[");
            String _plus_4 = (_plus_3 + Integer.valueOf(i));
            String _plus_5 = (_plus_4 + "]");
            _get_1.put(_plus_5, this.valuateArithmeticExpression(f.getValue(), scope));
            StringConcatenation _builder_2 = new StringConcatenation();
            String _name_4 = dec.getName();
            _builder_2.append(_name_4);
            _builder_2.append(".put(");
            _builder_2.append(i);
            _builder_2.append(",");
            String _generateArithmeticExpression_1 = this.generateArithmeticExpression(f.getValue(), scope);
            _builder_2.append(_generateArithmeticExpression_1);
            _builder_2.append(");");
            _builder_2.newLineIfNotEmpty();
            String _plus_6 = (s + _builder_2);
            s = _plus_6;
            i++;
          }
        }
        return s;
      } else {
        EObject _right_2 = dec.getRight();
        if ((_right_2 instanceof ArrayDefinition)) {
          EObject _right_3 = dec.getRight();
          String type_decl = ((ArrayDefinition) _right_3).getType();
          String real_type = "";
          boolean _equals_1 = type_decl.equals("Integer");
          if (_equals_1) {
            real_type = "int";
          } else {
            boolean _equals_2 = type_decl.equals("Double");
            if (_equals_2) {
              real_type = "double";
            } else {
              boolean _equals_3 = type_decl.equals("String");
              if (_equals_3) {
                real_type = "String";
              }
            }
          }
          EObject _right_4 = dec.getRight();
          int _length = ((Object[])Conversions.unwrapArray(((ArrayDefinition) _right_4).getIndexes(), Object.class)).length;
          boolean _equals_4 = (_length == 1);
          if (_equals_4) {
            this.typeSystem.get(scope).put(dec.getName(), ("Array_" + type_decl));
            EObject _right_5 = dec.getRight();
            String array_len = this.generateArithmeticExpression(((ArrayDefinition) _right_5).getIndexes().get(0).getValue(), scope);
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append(real_type);
            _builder_3.append("[] ");
            String _name_5 = dec.getName();
            _builder_3.append(_name_5);
            _builder_3.append(" = new ");
            _builder_3.append(real_type);
            _builder_3.append("[");
            _builder_3.append(array_len);
            _builder_3.append("];");
            String s_1 = _builder_3.toString();
            return s_1;
          } else {
            EObject _right_6 = dec.getRight();
            int _length_1 = ((Object[])Conversions.unwrapArray(((ArrayDefinition) _right_6).getIndexes(), Object.class)).length;
            boolean _equals_5 = (_length_1 == 2);
            if (_equals_5) {
              EObject _right_7 = dec.getRight();
              String row = this.generateArithmeticExpression(((ArrayDefinition) _right_7).getIndexes().get(0).getValue(), scope);
              EObject _right_8 = dec.getRight();
              String col = this.generateArithmeticExpression(((ArrayDefinition) _right_8).getIndexes().get(1).getValue(), scope);
              this.typeSystem.get(scope).put(dec.getName(), ((("Matrix_" + type_decl) + "_") + col));
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append(real_type);
              _builder_4.append("[][] ");
              String _name_6 = dec.getName();
              _builder_4.append(_name_6);
              _builder_4.append(" = new ");
              _builder_4.append(real_type);
              _builder_4.append("[");
              _builder_4.append(row);
              _builder_4.append("][");
              _builder_4.append(col);
              _builder_4.append("];");
              String s_2 = _builder_4.toString();
              return s_2;
            } else {
              EObject _right_9 = dec.getRight();
              int _length_2 = ((Object[])Conversions.unwrapArray(((ArrayDefinition) _right_9).getIndexes(), Object.class)).length;
              boolean _equals_6 = (_length_2 == 3);
              if (_equals_6) {
                EObject _right_10 = dec.getRight();
                String row_1 = this.generateArithmeticExpression(((ArrayDefinition) _right_10).getIndexes().get(0).getValue(), scope);
                EObject _right_11 = dec.getRight();
                String col_1 = this.generateArithmeticExpression(((ArrayDefinition) _right_11).getIndexes().get(1).getValue(), scope);
                EObject _right_12 = dec.getRight();
                String dep = this.generateArithmeticExpression(((ArrayDefinition) _right_12).getIndexes().get(2).getValue(), scope);
                this.typeSystem.get(scope).put(dec.getName(), ((((("Matrix_" + type_decl) + "_") + col_1) + "_") + dep));
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append(real_type);
                _builder_5.append("[][][] ");
                String _name_7 = dec.getName();
                _builder_5.append(_name_7);
                _builder_5.append(" = new ");
                _builder_5.append(real_type);
                _builder_5.append("[");
                _builder_5.append(row_1);
                _builder_5.append("][");
                _builder_5.append(col_1);
                _builder_5.append("][");
                _builder_5.append(dep);
                _builder_5.append("];");
                String s_3 = _builder_5.toString();
                return s_3;
              }
            }
          }
        } else {
          EObject _right_13 = dec.getRight();
          if ((_right_13 instanceof ArrayInit)) {
            if ((((((ArrayInit) dec.getRight()).getValues().get(0) instanceof NumberLiteral) || (((ArrayInit) dec.getRight()).getValues().get(0) instanceof StringLiteral)) || (((ArrayInit) dec.getRight()).getValues().get(0) instanceof FloatLiteral))) {
              EObject _right_14 = dec.getRight();
              ArrayValue _get_2 = ((ArrayInit) _right_14).getValues().get(0);
              String real_type_1 = this.valuateArithmeticExpression(((ArithmeticExpression) _get_2), scope);
              this.typeSystem.get(scope).put(dec.getName(), ("Array_" + real_type_1));
              StringConcatenation _builder_6 = new StringConcatenation();
              _builder_6.append(real_type_1);
              _builder_6.append(" [] ");
              String _name_8 = dec.getName();
              _builder_6.append(_name_8);
              _builder_6.append(" = {");
              {
                EObject _right_15 = dec.getRight();
                EList<ArrayValue> _values = ((ArrayInit) _right_15).getValues();
                for(final ArrayValue e : _values) {
                  String _generateArithmeticExpression_2 = this.generateArithmeticExpression(((ArithmeticExpression) e), scope);
                  _builder_6.append(_generateArithmeticExpression_2);
                  {
                    EObject _right_16 = dec.getRight();
                    ArrayValue _last = IterableExtensions.<ArrayValue>last(((ArrayInit) _right_16).getValues());
                    boolean _notEquals_1 = (!Objects.equal(e, _last));
                    if (_notEquals_1) {
                      _builder_6.append(",");
                    }
                  }
                }
              }
              _builder_6.append("};");
              _builder_6.newLineIfNotEmpty();
              return _builder_6.toString();
            } else {
              EObject _right_17 = dec.getRight();
              ArrayValue _get_3 = ((ArrayInit) _right_17).getValues().get(0);
              if ((_get_3 instanceof ArrayValue)) {
                if ((((((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0) instanceof NumberLiteral) || 
                  (((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0) instanceof StringLiteral)) || 
                  (((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0) instanceof FloatLiteral))) {
                  EObject _right_18 = dec.getRight();
                  ArrayValue _get_4 = ((ArrayInit) _right_18).getValues().get(0);
                  ArrayValue _get_5 = ((ArrayValue) _get_4).getValues().get(0);
                  String real_type_2 = this.valuateArithmeticExpression(((ArithmeticExpression) _get_5), scope);
                  EObject _right_19 = dec.getRight();
                  ArrayValue _get_6 = ((ArrayInit) _right_19).getValues().get(0);
                  ArrayValue _get_7 = ((ArrayValue) _get_6).getValues().get(0);
                  int col_2 = ((Object[])Conversions.unwrapArray(((ArrayValue) _get_7).getValues(), Object.class)).length;
                  this.typeSystem.get(scope).put(dec.getName(), ((("Matrix_" + real_type_2) + "_") + Integer.valueOf(col_2)));
                  StringConcatenation _builder_7 = new StringConcatenation();
                  _builder_7.append(real_type_2);
                  _builder_7.append(" [][] ");
                  String _name_9 = dec.getName();
                  _builder_7.append(_name_9);
                  _builder_7.append(" = {");
                  String ret = _builder_7.toString();
                  EObject _right_20 = dec.getRight();
                  EList<ArrayValue> _values_1 = ((ArrayInit) _right_20).getValues();
                  for (final ArrayValue e_1 : _values_1) {
                    {
                      String _ret = ret;
                      StringConcatenation _builder_8 = new StringConcatenation();
                      _builder_8.append("{");
                      ret = (_ret + _builder_8);
                      EList<ArrayValue> _values_2 = ((ArrayValue) e_1).getValues();
                      for (final ArrayValue e1 : _values_2) {
                        {
                          String _ret_1 = ret;
                          String _generateArithmeticExpression_3 = this.generateArithmeticExpression(((ArithmeticExpression) e1), scope);
                          ret = (_ret_1 + _generateArithmeticExpression_3);
                          ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayValue) e_1).getValues());
                          boolean _notEquals_2 = (!Objects.equal(e1, _last_1));
                          if (_notEquals_2) {
                            String _ret_2 = ret;
                            StringConcatenation _builder_9 = new StringConcatenation();
                            _builder_9.append(",");
                            ret = (_ret_2 + _builder_9);
                          }
                        }
                      }
                      String _ret_1 = ret;
                      StringConcatenation _builder_9 = new StringConcatenation();
                      _builder_9.append("}");
                      ret = (_ret_1 + _builder_9);
                      EObject _right_21 = dec.getRight();
                      ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayInit) _right_21).getValues());
                      boolean _notEquals_2 = (!Objects.equal(e_1, _last_1));
                      if (_notEquals_2) {
                        String _ret_2 = ret;
                        StringConcatenation _builder_10 = new StringConcatenation();
                        _builder_10.append(",");
                        ret = (_ret_2 + _builder_10);
                      }
                    }
                  }
                  String _ret = ret;
                  StringConcatenation _builder_8 = new StringConcatenation();
                  _builder_8.append("};");
                  ret = (_ret + _builder_8);
                  return ret;
                } else {
                  EObject _right_21 = dec.getRight();
                  ArrayValue _get_8 = ((ArrayInit) _right_21).getValues().get(0);
                  ArrayValue _get_9 = ((ArrayValue) _get_8).getValues().get(0);
                  if ((_get_9 instanceof ArrayValue)) {
                    if ((((((ArrayValue) ((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0)).getValues().get(0) instanceof NumberLiteral) || 
                      (((ArrayValue) ((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0)).getValues().get(0) instanceof StringLiteral)) || 
                      (((ArrayValue) ((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0)).getValues().get(0) instanceof FloatLiteral))) {
                      EObject _right_22 = dec.getRight();
                      ArrayValue _get_10 = ((ArrayInit) _right_22).getValues().get(0);
                      ArrayValue _get_11 = ((ArrayValue) _get_10).getValues().get(0);
                      ArrayValue _get_12 = ((ArrayValue) _get_11).getValues().get(0);
                      String real_type_3 = this.valuateArithmeticExpression(((ArithmeticExpression) _get_12), scope);
                      EObject _right_23 = dec.getRight();
                      ArrayValue _get_13 = ((ArrayInit) _right_23).getValues().get(0);
                      ArrayValue _get_14 = ((ArrayValue) _get_13).getValues().get(0);
                      int col_3 = ((Object[])Conversions.unwrapArray(((ArrayValue) _get_14).getValues(), Object.class)).length;
                      EObject _right_24 = dec.getRight();
                      ArrayValue _get_15 = ((ArrayInit) _right_24).getValues().get(0);
                      ArrayValue _get_16 = ((ArrayValue) _get_15).getValues().get(0);
                      ArrayValue _get_17 = ((ArrayValue) _get_16).getValues().get(0);
                      int dep_1 = ((Object[])Conversions.unwrapArray(((ArrayValue) _get_17).getValues(), Object.class)).length;
                      this.typeSystem.get(scope).put(dec.getName(), ((((("Matrix_" + real_type_3) + "_") + Integer.valueOf(col_3)) + "_") + Integer.valueOf(dep_1)));
                      StringConcatenation _builder_9 = new StringConcatenation();
                      _builder_9.append(real_type_3);
                      _builder_9.append(" [][][] ");
                      String _name_10 = dec.getName();
                      _builder_9.append(_name_10);
                      _builder_9.append(" = {");
                      String ret_1 = _builder_9.toString();
                      EObject _right_25 = dec.getRight();
                      EList<ArrayValue> _values_2 = ((ArrayInit) _right_25).getValues();
                      for (final ArrayValue e_2 : _values_2) {
                        {
                          String _ret_1 = ret_1;
                          StringConcatenation _builder_10 = new StringConcatenation();
                          _builder_10.append("{");
                          ret_1 = (_ret_1 + _builder_10);
                          EList<ArrayValue> _values_3 = ((ArrayValue) e_2).getValues();
                          for (final ArrayValue e1 : _values_3) {
                            {
                              String _ret_2 = ret_1;
                              StringConcatenation _builder_11 = new StringConcatenation();
                              _builder_11.append("{");
                              ret_1 = (_ret_2 + _builder_11);
                              EList<ArrayValue> _values_4 = ((ArrayValue) e1).getValues();
                              for (final ArrayValue e2 : _values_4) {
                                {
                                  String _ret_3 = ret_1;
                                  String _generateArithmeticExpression_3 = this.generateArithmeticExpression(((ArithmeticExpression) e2), scope);
                                  ret_1 = (_ret_3 + _generateArithmeticExpression_3);
                                  ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayValue) e1).getValues());
                                  boolean _notEquals_2 = (!Objects.equal(e2, _last_1));
                                  if (_notEquals_2) {
                                    String _ret_4 = ret_1;
                                    StringConcatenation _builder_12 = new StringConcatenation();
                                    _builder_12.append(",");
                                    ret_1 = (_ret_4 + _builder_12);
                                  }
                                }
                              }
                              String _ret_3 = ret_1;
                              StringConcatenation _builder_12 = new StringConcatenation();
                              _builder_12.append("}");
                              ret_1 = (_ret_3 + _builder_12);
                              ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayValue) e_2).getValues());
                              boolean _notEquals_2 = (!Objects.equal(e1, _last_1));
                              if (_notEquals_2) {
                                String _ret_4 = ret_1;
                                StringConcatenation _builder_13 = new StringConcatenation();
                                _builder_13.append(",");
                                ret_1 = (_ret_4 + _builder_13);
                              }
                            }
                          }
                          String _ret_2 = ret_1;
                          StringConcatenation _builder_11 = new StringConcatenation();
                          _builder_11.append("}");
                          ret_1 = (_ret_2 + _builder_11);
                          EObject _right_26 = dec.getRight();
                          ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayInit) _right_26).getValues());
                          boolean _notEquals_2 = (!Objects.equal(e_2, _last_1));
                          if (_notEquals_2) {
                            String _ret_3 = ret_1;
                            StringConcatenation _builder_12 = new StringConcatenation();
                            _builder_12.append(",");
                            ret_1 = (_ret_3 + _builder_12);
                          }
                        }
                      }
                      String _ret_1 = ret_1;
                      StringConcatenation _builder_10 = new StringConcatenation();
                      _builder_10.append("};");
                      ret_1 = (_ret_1 + _builder_10);
                      return ret_1;
                    }
                  }
                }
              }
            }
          } else {
            EObject _right_26 = dec.getRight();
            if ((_right_26 instanceof FlyFunctionCall)) {
              StringConcatenation _builder_11 = new StringConcatenation();
              EObject _right_27 = dec.getRight();
              String _generateFlyFunctionCall = this.generateFlyFunctionCall(((FlyFunctionCall) _right_27), scope);
              _builder_11.append(_generateFlyFunctionCall);
              _builder_11.newLineIfNotEmpty();
              _builder_11.append("List<Future<Object>> ");
              String _name_11 = dec.getName();
              _builder_11.append(_name_11);
              _builder_11.append(" = ");
              _builder_11.append(this.last_func_result);
              _builder_11.append(";");
              _builder_11.newLineIfNotEmpty();
              String s_4 = _builder_11.toString();
              this.typeSystem.get(scope).put(dec.getName(), "FutureList");
              return s_4;
            } else {
              EObject _right_28 = dec.getRight();
              if ((_right_28 instanceof ChannelReceive)) {
                StringConcatenation _builder_12 = new StringConcatenation();
                _builder_12.append("Object ");
                String _name_12 = dec.getName();
                _builder_12.append(_name_12);
                _builder_12.append(" = null;");
                _builder_12.newLineIfNotEmpty();
                _builder_12.append("try{");
                _builder_12.newLine();
                _builder_12.append("\t");
                _builder_12.append("e = ");
                EObject _right_29 = dec.getRight();
                String _generateChannelReceive = this.generateChannelReceive(((ChannelReceive) _right_29), scope);
                _builder_12.append(_generateChannelReceive, "\t");
                _builder_12.newLineIfNotEmpty();
                _builder_12.append("}catch(InterruptedException e1){");
                _builder_12.newLine();
                _builder_12.append("\t");
                _builder_12.append("e1.printStackTrace();");
                _builder_12.newLine();
                _builder_12.append("}");
                _builder_12.newLine();
                String s_5 = _builder_12.toString();
                return s_5;
              } else {
                EObject _right_30 = dec.getRight();
                if ((_right_30 instanceof VariableFunction)) {
                  EObject _right_31 = dec.getRight();
                  boolean _equals_7 = ((VariableFunction) _right_31).getFeature().equals("split");
                  if (_equals_7) {
                    this.typeSystem.get(scope).put(dec.getName(), "HashMap");
                    StringConcatenation _builder_13 = new StringConcatenation();
                    _builder_13.append("HashMap<Object,Object> ");
                    String _name_13 = dec.getName();
                    _builder_13.append(_name_13);
                    _builder_13.append(" = new HashMap<Object,Object>();");
                    _builder_13.newLineIfNotEmpty();
                    _builder_13.append("int _");
                    String _name_14 = dec.getName();
                    _builder_13.append(_name_14);
                    _builder_13.append("_crt=0;");
                    _builder_13.newLineIfNotEmpty();
                    _builder_13.append("for(String _");
                    String _name_15 = dec.getName();
                    _builder_13.append(_name_15);
                    _builder_13.append(" : ");
                    EObject _right_32 = dec.getRight();
                    String _name_16 = ((VariableFunction) _right_32).getTarget().getName();
                    _builder_13.append(_name_16);
                    _builder_13.append(".");
                    EObject _right_33 = dec.getRight();
                    String _feature_3 = ((VariableFunction) _right_33).getFeature();
                    _builder_13.append(_feature_3);
                    _builder_13.append("(");
                    EObject _right_34 = dec.getRight();
                    String _generateArithmeticExpression_3 = this.generateArithmeticExpression(((VariableFunction) _right_34).getExpressions().get(0), scope);
                    _builder_13.append(_generateArithmeticExpression_3);
                    _builder_13.append(")){");
                    _builder_13.newLineIfNotEmpty();
                    _builder_13.append("\t");
                    String _name_17 = dec.getName();
                    _builder_13.append(_name_17, "\t");
                    _builder_13.append(".put(_");
                    String _name_18 = dec.getName();
                    _builder_13.append(_name_18, "\t");
                    _builder_13.append("_crt++,_");
                    String _name_19 = dec.getName();
                    _builder_13.append(_name_19, "\t");
                    _builder_13.append(");");
                    _builder_13.newLineIfNotEmpty();
                    _builder_13.append("}");
                    _builder_13.newLine();
                    return _builder_13.toString();
                  } else {
                    EObject _right_35 = dec.getRight();
                    this.typeSystem.get(scope).put(dec.getName(), 
                      this.valuateArithmeticExpression(((VariableFunction) _right_35), scope));
                    StringConcatenation _builder_14 = new StringConcatenation();
                    EObject _right_36 = dec.getRight();
                    String _valuateArithmeticExpression = this.valuateArithmeticExpression(((VariableFunction) _right_36), scope);
                    _builder_14.append(_valuateArithmeticExpression);
                    _builder_14.append(" ");
                    String _name_20 = dec.getName();
                    _builder_14.append(_name_20);
                    _builder_14.append(" = ");
                    EObject _right_37 = dec.getRight();
                    String _generateArithmeticExpression_4 = this.generateArithmeticExpression(((VariableFunction) _right_37), scope);
                    _builder_14.append(_generateArithmeticExpression_4);
                    _builder_14.append(";");
                    _builder_14.newLineIfNotEmpty();
                    return _builder_14.toString();
                  }
                } else {
                  if (((dec.getRight() instanceof CastExpression) && (((CastExpression) dec.getRight()).getTarget() instanceof ChannelReceive))) {
                    if ((((DeclarationObject) ((ChannelReceive) ((CastExpression) dec.getRight()).getTarget()).getTarget().getEnvironment().getRight()).getFeatures().get(0).getValue_s().equals("aws") || (((DeclarationObject) ((ChannelReceive) ((CastExpression) dec.getRight()).getTarget()).getTarget().getEnvironment().getRight()).getFeatures().get(0).getValue_s().equals("local") && 
                      (((Object[])Conversions.unwrapArray(((DeclarationObject) ((ChannelReceive) ((CastExpression) dec.getRight()).getTarget()).getTarget().getEnvironment().getRight()).getFeatures(), Object.class)).length == 3)))) {
                      EObject _right_38 = dec.getRight();
                      boolean _equals_8 = ((CastExpression) _right_38).getType().equals("Object");
                      if (_equals_8) {
                        this.typeSystem.get(scope).put(dec.getName(), "HashMap");
                        StringConcatenation _builder_15 = new StringConcatenation();
                        _builder_15.append("String __res_");
                        EObject _right_39 = dec.getRight();
                        ArithmeticExpression _target = ((CastExpression) _right_39).getTarget();
                        String _name_21 = ((ChannelReceive) _target).getTarget().getName();
                        _builder_15.append(_name_21);
                        _builder_15.append(" = (String) ");
                        EObject _right_40 = dec.getRight();
                        ArithmeticExpression _target_1 = ((CastExpression) _right_40).getTarget();
                        String _name_22 = ((ChannelReceive) _target_1).getTarget().getName();
                        _builder_15.append(_name_22);
                        _builder_15.append(".take();");
                        _builder_15.newLineIfNotEmpty();
                        _builder_15.append("HashMap ");
                        String _name_23 = dec.getName();
                        _builder_15.append(_name_23);
                        _builder_15.append(" = new Gson().fromJson(__res_");
                        EObject _right_41 = dec.getRight();
                        ArithmeticExpression _target_2 = ((CastExpression) _right_41).getTarget();
                        String _name_24 = ((ChannelReceive) _target_2).getTarget().getName();
                        _builder_15.append(_name_24);
                        _builder_15.append(",new TypeToken<HashMap<String, String>>() {}.getType());");
                        _builder_15.newLineIfNotEmpty();
                        return _builder_15.toString();
                      } else {
                        EObject _right_42 = dec.getRight();
                        boolean _equals_9 = ((CastExpression) _right_42).getType().equals("Integer");
                        if (_equals_9) {
                          this.typeSystem.get(scope).put(dec.getName(), "Integer");
                          StringConcatenation _builder_16 = new StringConcatenation();
                          _builder_16.append("String __res_");
                          EObject _right_43 = dec.getRight();
                          ArithmeticExpression _target_3 = ((CastExpression) _right_43).getTarget();
                          String _name_25 = ((ChannelReceive) _target_3).getTarget().getName();
                          _builder_16.append(_name_25);
                          _builder_16.append(" = (String) ");
                          EObject _right_44 = dec.getRight();
                          ArithmeticExpression _target_4 = ((CastExpression) _right_44).getTarget();
                          String _name_26 = ((ChannelReceive) _target_4).getTarget().getName();
                          _builder_16.append(_name_26);
                          _builder_16.append(".take();");
                          _builder_16.newLineIfNotEmpty();
                          _builder_16.append("int ");
                          String _name_27 = dec.getName();
                          _builder_16.append(_name_27);
                          _builder_16.append(" = Integer.parseInt(__res_");
                          EObject _right_45 = dec.getRight();
                          ArithmeticExpression _target_5 = ((CastExpression) _right_45).getTarget();
                          String _name_28 = ((ChannelReceive) _target_5).getTarget().getName();
                          _builder_16.append(_name_28);
                          _builder_16.append(");");
                          _builder_16.newLineIfNotEmpty();
                          return _builder_16.toString();
                        } else {
                          EObject _right_46 = dec.getRight();
                          boolean _equals_10 = ((CastExpression) _right_46).getType().equals("Float");
                          if (_equals_10) {
                            this.typeSystem.get(scope).put(dec.getName(), "Double");
                            StringConcatenation _builder_17 = new StringConcatenation();
                            _builder_17.append("String __res_");
                            EObject _right_47 = dec.getRight();
                            ArithmeticExpression _target_6 = ((CastExpression) _right_47).getTarget();
                            String _name_29 = ((ChannelReceive) _target_6).getTarget().getName();
                            _builder_17.append(_name_29);
                            _builder_17.append(" = (String) ");
                            EObject _right_48 = dec.getRight();
                            ArithmeticExpression _target_7 = ((CastExpression) _right_48).getTarget();
                            String _name_30 = ((ChannelReceive) _target_7).getTarget().getName();
                            _builder_17.append(_name_30);
                            _builder_17.append(".take();");
                            _builder_17.newLineIfNotEmpty();
                            _builder_17.append("double ");
                            String _name_31 = dec.getName();
                            _builder_17.append(_name_31);
                            _builder_17.append(" = Double.parseDouble(__res_");
                            EObject _right_49 = dec.getRight();
                            ArithmeticExpression _target_8 = ((CastExpression) _right_49).getTarget();
                            String _name_32 = ((ChannelReceive) _target_8).getTarget().getName();
                            _builder_17.append(_name_32);
                            _builder_17.append(");");
                            _builder_17.newLineIfNotEmpty();
                            return _builder_17.toString();
                          } else {
                            EObject _right_50 = dec.getRight();
                            boolean _equals_11 = ((CastExpression) _right_50).getType().equals("String");
                            if (_equals_11) {
                              this.typeSystem.get(scope).put(dec.getName(), "String");
                              StringConcatenation _builder_18 = new StringConcatenation();
                              _builder_18.append("String ");
                              String _name_33 = dec.getName();
                              _builder_18.append(_name_33);
                              _builder_18.append(" = (String) ");
                              EObject _right_51 = dec.getRight();
                              ArithmeticExpression _target_9 = ((CastExpression) _right_51).getTarget();
                              String _name_34 = ((ChannelReceive) _target_9).getTarget().getName();
                              _builder_18.append(_name_34);
                              _builder_18.append(".take();");
                              _builder_18.newLineIfNotEmpty();
                              return _builder_18.toString();
                            }
                          }
                        }
                      }
                    } else {
                      EObject _right_52 = dec.getRight();
                      ArithmeticExpression _target_10 = ((CastExpression) _right_52).getTarget();
                      EObject _right_53 = ((ChannelReceive) _target_10).getTarget().getEnvironment().getRight();
                      boolean _equals_12 = ((DeclarationObject) _right_53).getFeatures().get(0).getValue_s().equals("local");
                      if (_equals_12) {
                        EObject _right_54 = dec.getRight();
                        this.typeSystem.get(scope).put(dec.getName(), this.valuateArithmeticExpression(((CastExpression) _right_54), scope));
                        InputOutput.<HashMap<String, String>>println(this.typeSystem.get(scope));
                        StringConcatenation _builder_19 = new StringConcatenation();
                        EObject _right_55 = dec.getRight();
                        String _valuateArithmeticExpression_1 = this.valuateArithmeticExpression(((CastExpression) _right_55), scope);
                        _builder_19.append(_valuateArithmeticExpression_1);
                        _builder_19.append(" ");
                        String _name_35 = dec.getName();
                        _builder_19.append(_name_35);
                        _builder_19.append(" = (");
                        EObject _right_56 = dec.getRight();
                        String _valuateArithmeticExpression_2 = this.valuateArithmeticExpression(((CastExpression) _right_56), scope);
                        _builder_19.append(_valuateArithmeticExpression_2);
                        _builder_19.append(") ");
                        EObject _right_57 = dec.getRight();
                        ArithmeticExpression _target_11 = ((CastExpression) _right_57).getTarget();
                        String _name_36 = ((ChannelReceive) _target_11).getTarget().getName();
                        _builder_19.append(_name_36);
                        _builder_19.append(".take(); ");
                        _builder_19.newLineIfNotEmpty();
                        return _builder_19.toString();
                      }
                    }
                  } else {
                    EObject _right_58 = dec.getRight();
                    this.typeSystem.get(scope).put(dec.getName(), 
                      this.valuateArithmeticExpression(((ArithmeticExpression) _right_58), scope));
                    StringConcatenation _builder_20 = new StringConcatenation();
                    EObject _right_59 = dec.getRight();
                    String _valuateArithmeticExpression_3 = this.valuateArithmeticExpression(((ArithmeticExpression) _right_59), scope);
                    _builder_20.append(_valuateArithmeticExpression_3);
                    _builder_20.append(" ");
                    String _name_37 = dec.getName();
                    _builder_20.append(_name_37);
                    _builder_20.append(" = ");
                    EObject _right_60 = dec.getRight();
                    String _generateArithmeticExpression_5 = this.generateArithmeticExpression(((ArithmeticExpression) _right_60), scope);
                    _builder_20.append(_generateArithmeticExpression_5);
                    _builder_20.append(";");
                    return _builder_20.toString();
                  }
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public String generateConstantDeclaration(final ConstantDeclaration dec, final String scope) {
    EObject _right = dec.getRight();
    if ((_right instanceof NameObjectDef)) {
      this.typeSystem.get(scope).put(dec.getName(), "HashMap");
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("static HashMap<Object,Object> ");
      String _name = dec.getName();
      _builder.append(_name);
      _builder.append(" = new HashMap<Object,Object>();");
      _builder.newLineIfNotEmpty();
      String s = _builder.toString();
      int i = 0;
      EObject _right_1 = dec.getRight();
      EList<FeautureName> _features = ((NameObjectDef) _right_1).getFeatures();
      for (final FeautureName f : _features) {
        String _feature = f.getFeature();
        boolean _notEquals = (!Objects.equal(_feature, null));
        if (_notEquals) {
          HashMap<String, String> _get = this.typeSystem.get(scope);
          String _name_1 = dec.getName();
          String _plus = (_name_1 + ".");
          String _feature_1 = f.getFeature();
          String _plus_1 = (_plus + _feature_1);
          _get.put(_plus_1, 
            this.valuateArithmeticExpression(f.getValue(), scope));
        } else {
          HashMap<String, String> _get_1 = this.typeSystem.get(scope);
          String _name_2 = dec.getName();
          String _plus_2 = (_name_2 + "[");
          String _plus_3 = (_plus_2 + Integer.valueOf(i));
          String _plus_4 = (_plus_3 + "]");
          _get_1.put(_plus_4, this.valuateArithmeticExpression(f.getValue(), scope));
          i++;
        }
      }
      return s;
    } else {
      EObject _right_2 = dec.getRight();
      if ((_right_2 instanceof ArrayDefinition)) {
        EObject _right_3 = dec.getRight();
        String type_decl = ((ArrayDefinition) _right_3).getType();
        String real_type = "";
        boolean _equals = type_decl.equals("Integer");
        if (_equals) {
          real_type = "int";
        } else {
          boolean _equals_1 = type_decl.equals("Double");
          if (_equals_1) {
            real_type = "double";
          } else {
            boolean _equals_2 = type_decl.equals("String");
            if (_equals_2) {
              real_type = "String";
            }
          }
        }
        EObject _right_4 = dec.getRight();
        int _length = ((Object[])Conversions.unwrapArray(((ArrayDefinition) _right_4).getIndexes(), Object.class)).length;
        boolean _equals_3 = (_length == 1);
        if (_equals_3) {
          this.typeSystem.get(scope).put(dec.getName(), ("Array_" + type_decl));
          EObject _right_5 = dec.getRight();
          String array_len = this.generateArithmeticExpression(((ArrayDefinition) _right_5).getIndexes().get(0).getValue(), scope);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("static ");
          _builder_1.append(real_type);
          _builder_1.append("[] ");
          String _name_3 = dec.getName();
          _builder_1.append(_name_3);
          _builder_1.append(" = new ");
          _builder_1.append(real_type);
          _builder_1.append("[");
          _builder_1.append(array_len);
          _builder_1.append("];");
          String s_1 = _builder_1.toString();
          return s_1;
        } else {
          EObject _right_6 = dec.getRight();
          int _length_1 = ((Object[])Conversions.unwrapArray(((ArrayDefinition) _right_6).getIndexes(), Object.class)).length;
          boolean _equals_4 = (_length_1 == 2);
          if (_equals_4) {
            EObject _right_7 = dec.getRight();
            String row = this.generateArithmeticExpression(((ArrayDefinition) _right_7).getIndexes().get(0).getValue(), scope);
            EObject _right_8 = dec.getRight();
            String col = this.generateArithmeticExpression(((ArrayDefinition) _right_8).getIndexes().get(1).getValue(), scope);
            this.typeSystem.get(scope).put(dec.getName(), ((("Matrix_" + type_decl) + "_") + col));
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("static ");
            _builder_2.append(real_type);
            _builder_2.append("[][] ");
            String _name_4 = dec.getName();
            _builder_2.append(_name_4);
            _builder_2.append(" = new ");
            _builder_2.append(real_type);
            _builder_2.append("[");
            _builder_2.append(row);
            _builder_2.append("][");
            _builder_2.append(col);
            _builder_2.append("];");
            String s_2 = _builder_2.toString();
            return s_2;
          } else {
            EObject _right_9 = dec.getRight();
            int _length_2 = ((Object[])Conversions.unwrapArray(((ArrayDefinition) _right_9).getIndexes(), Object.class)).length;
            boolean _equals_5 = (_length_2 == 3);
            if (_equals_5) {
              EObject _right_10 = dec.getRight();
              String row_1 = this.generateArithmeticExpression(((ArrayDefinition) _right_10).getIndexes().get(0).getValue(), scope);
              EObject _right_11 = dec.getRight();
              String col_1 = this.generateArithmeticExpression(((ArrayDefinition) _right_11).getIndexes().get(1).getValue(), scope);
              EObject _right_12 = dec.getRight();
              String dep = this.generateArithmeticExpression(((ArrayDefinition) _right_12).getIndexes().get(2).getValue(), scope);
              this.typeSystem.get(scope).put(dec.getName(), ((((("Matrix_" + type_decl) + "_") + col_1) + "_") + dep));
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("static ");
              _builder_3.append(real_type);
              _builder_3.append("[][][] ");
              String _name_5 = dec.getName();
              _builder_3.append(_name_5);
              _builder_3.append(" = new ");
              _builder_3.append(real_type);
              _builder_3.append("[");
              _builder_3.append(row_1);
              _builder_3.append("][");
              _builder_3.append(col_1);
              _builder_3.append("][");
              _builder_3.append(dep);
              _builder_3.append("];");
              String s_3 = _builder_3.toString();
              return s_3;
            }
          }
        }
      } else {
        EObject _right_13 = dec.getRight();
        if ((_right_13 instanceof ArrayInit)) {
          if ((((((ArrayInit) dec.getRight()).getValues().get(0) instanceof NumberLiteral) || (((ArrayInit) dec.getRight()).getValues().get(0) instanceof StringLiteral)) || (((ArrayInit) dec.getRight()).getValues().get(0) instanceof FloatLiteral))) {
            EObject _right_14 = dec.getRight();
            ArrayValue _get_2 = ((ArrayInit) _right_14).getValues().get(0);
            String real_type_1 = this.valuateArithmeticExpression(((ArithmeticExpression) _get_2), scope);
            this.typeSystem.get(scope).put(dec.getName(), ("Array_" + real_type_1));
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("final static ");
            _builder_4.append(real_type_1);
            _builder_4.append(" [] ");
            String _name_6 = dec.getName();
            _builder_4.append(_name_6);
            _builder_4.append(" = {");
            {
              EObject _right_15 = dec.getRight();
              EList<ArrayValue> _values = ((ArrayInit) _right_15).getValues();
              for(final ArrayValue e : _values) {
                String _generateArithmeticExpression = this.generateArithmeticExpression(((ArithmeticExpression) e), scope);
                _builder_4.append(_generateArithmeticExpression);
                {
                  EObject _right_16 = dec.getRight();
                  ArrayValue _last = IterableExtensions.<ArrayValue>last(((ArrayInit) _right_16).getValues());
                  boolean _notEquals_1 = (!Objects.equal(e, _last));
                  if (_notEquals_1) {
                    _builder_4.append(",");
                  }
                }
              }
            }
            _builder_4.append("};");
            _builder_4.newLineIfNotEmpty();
            return _builder_4.toString();
          } else {
            EObject _right_17 = dec.getRight();
            ArrayValue _get_3 = ((ArrayInit) _right_17).getValues().get(0);
            if ((_get_3 instanceof ArrayValue)) {
              if ((((((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0) instanceof NumberLiteral) || 
                (((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0) instanceof StringLiteral)) || 
                (((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0) instanceof FloatLiteral))) {
                EObject _right_18 = dec.getRight();
                ArrayValue _get_4 = ((ArrayInit) _right_18).getValues().get(0);
                ArrayValue _get_5 = ((ArrayValue) _get_4).getValues().get(0);
                String real_type_2 = this.valuateArithmeticExpression(((ArithmeticExpression) _get_5), scope);
                EObject _right_19 = dec.getRight();
                ArrayValue _get_6 = ((ArrayInit) _right_19).getValues().get(0);
                ArrayValue _get_7 = ((ArrayValue) _get_6).getValues().get(0);
                int col_2 = ((Object[])Conversions.unwrapArray(((ArrayValue) _get_7).getValues(), Object.class)).length;
                this.typeSystem.get(scope).put(dec.getName(), ((("Matrix_" + real_type_2) + "_") + Integer.valueOf(col_2)));
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("final static ");
                _builder_5.append(real_type_2);
                _builder_5.append(" [][] ");
                String _name_7 = dec.getName();
                _builder_5.append(_name_7);
                _builder_5.append(" = {");
                String ret = _builder_5.toString();
                EObject _right_20 = dec.getRight();
                EList<ArrayValue> _values_1 = ((ArrayInit) _right_20).getValues();
                for (final ArrayValue e_1 : _values_1) {
                  {
                    String _ret = ret;
                    StringConcatenation _builder_6 = new StringConcatenation();
                    _builder_6.append("{");
                    ret = (_ret + _builder_6);
                    EList<ArrayValue> _values_2 = ((ArrayValue) e_1).getValues();
                    for (final ArrayValue e1 : _values_2) {
                      {
                        String _ret_1 = ret;
                        String _generateArithmeticExpression_1 = this.generateArithmeticExpression(((ArithmeticExpression) e1), scope);
                        ret = (_ret_1 + _generateArithmeticExpression_1);
                        ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayValue) e_1).getValues());
                        boolean _notEquals_2 = (!Objects.equal(e1, _last_1));
                        if (_notEquals_2) {
                          String _ret_2 = ret;
                          StringConcatenation _builder_7 = new StringConcatenation();
                          _builder_7.append(",");
                          ret = (_ret_2 + _builder_7);
                        }
                      }
                    }
                    String _ret_1 = ret;
                    StringConcatenation _builder_7 = new StringConcatenation();
                    _builder_7.append("}");
                    ret = (_ret_1 + _builder_7);
                    EObject _right_21 = dec.getRight();
                    ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayInit) _right_21).getValues());
                    boolean _notEquals_2 = (!Objects.equal(e_1, _last_1));
                    if (_notEquals_2) {
                      String _ret_2 = ret;
                      StringConcatenation _builder_8 = new StringConcatenation();
                      _builder_8.append(",");
                      ret = (_ret_2 + _builder_8);
                    }
                  }
                }
                String _ret = ret;
                StringConcatenation _builder_6 = new StringConcatenation();
                _builder_6.append("};");
                ret = (_ret + _builder_6);
                return ret;
              } else {
                EObject _right_21 = dec.getRight();
                ArrayValue _get_8 = ((ArrayInit) _right_21).getValues().get(0);
                ArrayValue _get_9 = ((ArrayValue) _get_8).getValues().get(0);
                if ((_get_9 instanceof ArrayValue)) {
                  if ((((((ArrayValue) ((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0)).getValues().get(0) instanceof NumberLiteral) || 
                    (((ArrayValue) ((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0)).getValues().get(0) instanceof StringLiteral)) || 
                    (((ArrayValue) ((ArrayValue) ((ArrayInit) dec.getRight()).getValues().get(0)).getValues().get(0)).getValues().get(0) instanceof FloatLiteral))) {
                    EObject _right_22 = dec.getRight();
                    ArrayValue _get_10 = ((ArrayInit) _right_22).getValues().get(0);
                    ArrayValue _get_11 = ((ArrayValue) _get_10).getValues().get(0);
                    ArrayValue _get_12 = ((ArrayValue) _get_11).getValues().get(0);
                    String real_type_3 = this.valuateArithmeticExpression(((ArithmeticExpression) _get_12), scope);
                    EObject _right_23 = dec.getRight();
                    ArrayValue _get_13 = ((ArrayInit) _right_23).getValues().get(0);
                    ArrayValue _get_14 = ((ArrayValue) _get_13).getValues().get(0);
                    int col_3 = ((Object[])Conversions.unwrapArray(((ArrayValue) _get_14).getValues(), Object.class)).length;
                    EObject _right_24 = dec.getRight();
                    ArrayValue _get_15 = ((ArrayInit) _right_24).getValues().get(0);
                    ArrayValue _get_16 = ((ArrayValue) _get_15).getValues().get(0);
                    ArrayValue _get_17 = ((ArrayValue) _get_16).getValues().get(0);
                    int dep_1 = ((Object[])Conversions.unwrapArray(((ArrayValue) _get_17).getValues(), Object.class)).length;
                    this.typeSystem.get(scope).put(dec.getName(), ((((("Matrix_" + real_type_3) + "_") + Integer.valueOf(col_3)) + "_") + Integer.valueOf(dep_1)));
                    StringConcatenation _builder_7 = new StringConcatenation();
                    _builder_7.append("final static ");
                    _builder_7.append(real_type_3);
                    _builder_7.append(" [][][] ");
                    String _name_8 = dec.getName();
                    _builder_7.append(_name_8);
                    _builder_7.append(" = {");
                    String ret_1 = _builder_7.toString();
                    EObject _right_25 = dec.getRight();
                    EList<ArrayValue> _values_2 = ((ArrayInit) _right_25).getValues();
                    for (final ArrayValue e_2 : _values_2) {
                      {
                        String _ret_1 = ret_1;
                        StringConcatenation _builder_8 = new StringConcatenation();
                        _builder_8.append("{");
                        ret_1 = (_ret_1 + _builder_8);
                        EList<ArrayValue> _values_3 = ((ArrayValue) e_2).getValues();
                        for (final ArrayValue e1 : _values_3) {
                          {
                            String _ret_2 = ret_1;
                            StringConcatenation _builder_9 = new StringConcatenation();
                            _builder_9.append("{");
                            ret_1 = (_ret_2 + _builder_9);
                            EList<ArrayValue> _values_4 = ((ArrayValue) e1).getValues();
                            for (final ArrayValue e2 : _values_4) {
                              {
                                String _ret_3 = ret_1;
                                String _generateArithmeticExpression_1 = this.generateArithmeticExpression(((ArithmeticExpression) e2), scope);
                                ret_1 = (_ret_3 + _generateArithmeticExpression_1);
                                ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayValue) e1).getValues());
                                boolean _notEquals_2 = (!Objects.equal(e2, _last_1));
                                if (_notEquals_2) {
                                  String _ret_4 = ret_1;
                                  StringConcatenation _builder_10 = new StringConcatenation();
                                  _builder_10.append(",");
                                  ret_1 = (_ret_4 + _builder_10);
                                }
                              }
                            }
                            String _ret_3 = ret_1;
                            StringConcatenation _builder_10 = new StringConcatenation();
                            _builder_10.append("}");
                            ret_1 = (_ret_3 + _builder_10);
                            ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayValue) e_2).getValues());
                            boolean _notEquals_2 = (!Objects.equal(e1, _last_1));
                            if (_notEquals_2) {
                              String _ret_4 = ret_1;
                              StringConcatenation _builder_11 = new StringConcatenation();
                              _builder_11.append(",");
                              ret_1 = (_ret_4 + _builder_11);
                            }
                          }
                        }
                        String _ret_2 = ret_1;
                        StringConcatenation _builder_9 = new StringConcatenation();
                        _builder_9.append("}");
                        ret_1 = (_ret_2 + _builder_9);
                        EObject _right_26 = dec.getRight();
                        ArrayValue _last_1 = IterableExtensions.<ArrayValue>last(((ArrayInit) _right_26).getValues());
                        boolean _notEquals_2 = (!Objects.equal(e_2, _last_1));
                        if (_notEquals_2) {
                          String _ret_3 = ret_1;
                          StringConcatenation _builder_10 = new StringConcatenation();
                          _builder_10.append(",");
                          ret_1 = (_ret_3 + _builder_10);
                        }
                      }
                    }
                    String _ret_1 = ret_1;
                    StringConcatenation _builder_8 = new StringConcatenation();
                    _builder_8.append("};");
                    ret_1 = (_ret_1 + _builder_8);
                    return ret_1;
                  }
                }
              }
            }
          }
        } else {
          EObject _right_26 = dec.getRight();
          if ((_right_26 instanceof ArithmeticExpression)) {
            EObject _right_27 = dec.getRight();
            this.typeSystem.get(scope).put(dec.getName(), 
              this.valuateArithmeticExpression(((ArithmeticExpression) _right_27), scope));
            StringConcatenation _builder_9 = new StringConcatenation();
            _builder_9.append("static ");
            EObject _right_28 = dec.getRight();
            String _valuateArithmeticExpression = this.valuateArithmeticExpression(((ArithmeticExpression) _right_28), scope);
            _builder_9.append(_valuateArithmeticExpression);
            _builder_9.append(" ");
            String _name_9 = dec.getName();
            _builder_9.append(_name_9);
            _builder_9.append(" = ");
            EObject _right_29 = dec.getRight();
            String _generateArithmeticExpression_1 = this.generateArithmeticExpression(((ArithmeticExpression) _right_29), scope);
            _builder_9.append(_generateArithmeticExpression_1);
            _builder_9.append(";");
            return _builder_9.toString();
          }
        }
      }
    }
    return null;
  }
  
  public String deployFileOnCloud(final DatDeclaration dec, final long id) {
    EObject _right = dec.getRight();
    String path = ((DeclarationObject) _right).getFeatures().get(1).getValue_s();
    boolean _contains = path.contains("https://");
    boolean _not = (!_contains);
    if (_not) {
      String name_file_ext = IterableExtensions.<String>last(((Iterable<String>)Conversions.doWrapArray(path.split("/"))));
      String name_file = name_file_ext.substring(0, name_file_ext.indexOf(".")).replaceAll("-", "_");
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("ListObjectsV2Result __result__listObjects_");
      _builder.append(id);
      _builder.append(" = __s3.listObjectsV2(\"bucket-\"+__id_execution);");
      _builder.newLineIfNotEmpty();
      _builder.append("List<S3ObjectSummary> __result_objects_");
      _builder.append(id);
      _builder.append(" = __result__listObjects_");
      _builder.append(id);
      _builder.append(".getObjectSummaries();");
      _builder.newLineIfNotEmpty();
      _builder.append("Boolean __exists_");
      _builder.append(name_file);
      _builder.append("_");
      _builder.append(id);
      _builder.append("=false;");
      _builder.newLineIfNotEmpty();
      _builder.append("for (S3ObjectSummary os: __result_objects_");
      _builder.append(id);
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("if(os.getKey().equals(\"");
      _builder.append(name_file_ext, "    ");
      _builder.append("\")){");
      _builder.newLineIfNotEmpty();
      _builder.append("    \t");
      _builder.append("__exists_");
      _builder.append(name_file, "    \t");
      _builder.append("_");
      _builder.append(id, "    \t");
      _builder.append(" = true;");
      _builder.newLineIfNotEmpty();
      _builder.append("    \t");
      _builder.append("break;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("if(!__exists_");
      _builder.append(name_file);
      _builder.append("_");
      _builder.append(id);
      _builder.append("){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("PutObjectRequest __putObjectRequest = new PutObjectRequest(\"bucket-\"+__id_execution, \"");
      _builder.append(name_file_ext, "\t");
      _builder.append("\" , new File(\"");
      _builder.append(path, "\t");
      _builder.append("\"));");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("__putObjectRequest.setCannedAcl(CannedAccessControlList.PublicReadWrite);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("__s3.putObject(__putObjectRequest);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    }
    return null;
  }
  
  public String generateEnvironmentDeclaration(final EnvironmentDeclaration dec) {
    EObject _right = dec.getRight();
    String env = ((DeclarationObject) _right).getFeatures().get(0).getValue_s();
    boolean _equals = env.equals("local");
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("static ExecutorService __thread_pool_");
      String _name = dec.getName();
      _builder.append(_name);
      _builder.append(" = Executors.newFixedThreadPool(");
      EObject _right_1 = dec.getRight();
      int _value_t = ((DeclarationObject) _right_1).getFeatures().get(1).getValue_t();
      _builder.append(_value_t);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      return _builder.toString();
    } else {
      boolean _equals_1 = env.equals("aws");
      if (_equals_1) {
        EObject _right_2 = dec.getRight();
        DeclarationFeature _get = ((DeclarationObject) _right_2).getFeatures().get(1);
        String access_id_key = ((DeclarationFeature) _get).getValue_s();
        EObject _right_3 = dec.getRight();
        DeclarationFeature _get_1 = ((DeclarationObject) _right_3).getFeatures().get(2);
        String secret_access_key = ((DeclarationFeature) _get_1).getValue_s();
        EObject _right_4 = dec.getRight();
        DeclarationFeature _get_2 = ((DeclarationObject) _right_4).getFeatures().get(3);
        String region = ((DeclarationFeature) _get_2).getValue_s();
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.newLine();
        _builder_1.append("static BasicAWSCredentials ");
        String _name_1 = dec.getName();
        _builder_1.append(_name_1);
        _builder_1.append(" = new BasicAWSCredentials(\"");
        _builder_1.append(access_id_key);
        _builder_1.append("\", \"");
        _builder_1.append(secret_access_key);
        _builder_1.append("\");");
        _builder_1.newLineIfNotEmpty();
        _builder_1.newLine();
        _builder_1.append("static AmazonSQS __sqs  = AmazonSQSClient.builder()");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append(".withCredentials(new AWSStaticCredentialsProvider(");
        String _name_2 = dec.getName();
        _builder_1.append(_name_2, "\t");
        _builder_1.append("))");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(".withRegion(\"");
        _builder_1.append(region, "\t");
        _builder_1.append("\")");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(".build();");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("static AmazonIdentityManagement __iam = AmazonIdentityManagementClientBuilder.standard()");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append(".withCredentials(new AWSStaticCredentialsProvider(");
        String _name_3 = dec.getName();
        _builder_1.append(_name_3, "\t");
        _builder_1.append("))");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(".withRegion(\"");
        _builder_1.append(region, "\t");
        _builder_1.append("\")");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(".build();");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("static AWSLambda __lambda = AWSLambdaClientBuilder.standard()");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append(".withCredentials(new AWSStaticCredentialsProvider(");
        String _name_4 = dec.getName();
        _builder_1.append(_name_4, "\t");
        _builder_1.append("))");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(".withRegion(\"");
        _builder_1.append(region, "\t");
        _builder_1.append("\")");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(".build();");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("static AmazonS3 __s3 = AmazonS3Client.builder()");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append(".withCredentials(new AWSStaticCredentialsProvider(");
        String _name_5 = dec.getName();
        _builder_1.append(_name_5, "\t");
        _builder_1.append("))");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(".withRegion(\"");
        _builder_1.append(region, "\t");
        _builder_1.append("\")");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append(".build();");
        _builder_1.newLine();
        return _builder_1.toString();
      }
    }
    return null;
  }
  
  public String setEnvironmentDeclarationInfo(final EnvironmentDeclaration dec) {
    EObject _right = dec.getRight();
    String env = ((DeclarationObject) _right).getFeatures().get(0).getValue_s();
    boolean _equals = env.equals("local");
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("__fly_environment.put(\"");
      _builder.append(env);
      _builder.append("\", new HashMap<String,Object>());");
      _builder.newLineIfNotEmpty();
      _builder.append("__fly_environment.get(\"");
      _builder.append(env);
      _builder.append("\").put(\"nthread\",");
      EObject _right_1 = dec.getRight();
      int _value_t = ((DeclarationObject) _right_1).getFeatures().get(1).getValue_t();
      _builder.append(_value_t);
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      {
        EObject _right_2 = dec.getRight();
        int _length = ((Object[])Conversions.unwrapArray(((DeclarationObject) _right_2).getFeatures(), Object.class)).length;
        boolean _equals_1 = (_length == 3);
        if (_equals_1) {
          _builder.append("__fly_environment.get(\"");
          _builder.append(env);
          _builder.append("\").put(\"language\",\"");
          EObject _right_3 = dec.getRight();
          String _value_s = ((DeclarationObject) _right_3).getFeatures().get(2).getValue_s();
          _builder.append(_value_s);
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
        }
      }
      return _builder.toString();
    } else {
      boolean _equals_2 = env.equals("aws");
      if (_equals_2) {
        EObject _right_4 = dec.getRight();
        DeclarationFeature _get = ((DeclarationObject) _right_4).getFeatures().get(5);
        int threads = ((DeclarationFeature) _get).getValue_t();
        EObject _right_5 = dec.getRight();
        DeclarationFeature _get_1 = ((DeclarationObject) _right_5).getFeatures().get(6);
        int memory = ((DeclarationFeature) _get_1).getValue_t();
        EObject _right_6 = dec.getRight();
        DeclarationFeature _get_2 = ((DeclarationObject) _right_6).getFeatures().get(7);
        int time = ((DeclarationFeature) _get_2).getValue_t();
        EObject _right_7 = dec.getRight();
        DeclarationFeature _get_3 = ((DeclarationObject) _right_7).getFeatures().get(4);
        String language = ((DeclarationFeature) _get_3).getValue_s();
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("__fly_environment.put(\"");
        _builder_1.append(env);
        _builder_1.append("\", new HashMap<String,Object>());");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("__fly_environment.get(\"");
        _builder_1.append(env);
        _builder_1.append("\").put(\"nthread\",");
        _builder_1.append(threads);
        _builder_1.append(");");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("__fly_environment.get(\"");
        _builder_1.append(env);
        _builder_1.append("\").put(\"memory\",");
        _builder_1.append(memory);
        _builder_1.append(");");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("__fly_environment.get(\"");
        _builder_1.append(env);
        _builder_1.append("\").put(\"time\",");
        _builder_1.append(time);
        _builder_1.append(");");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("__fly_environment.get(\"");
        _builder_1.append(env);
        _builder_1.append("\").put(\"language\",\"");
        _builder_1.append(language);
        _builder_1.append("\");");
        _builder_1.newLineIfNotEmpty();
        return _builder_1.toString();
      }
    }
    return null;
  }
  
  public String generateChannelDeclaration(final ChannelDeclaration declaration) {
    EObject _right = declaration.getEnvironment().getRight();
    String env = ((DeclarationObject) _right).getFeatures().get(0).getValue_s();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("static LinkedTransferQueue<Object> ");
    String _name = declaration.getName();
    _builder.append(_name);
    _builder.append(" = new LinkedTransferQueue<Object>();");
    _builder.newLineIfNotEmpty();
    {
      boolean _equals = env.equals("local");
      boolean _not = (!_equals);
      if (_not) {
        _builder.append("static Boolean __wait_on_");
        String _name_1 = declaration.getName();
        _builder.append(_name_1);
        _builder.append(" = true;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EObject _right_1 = declaration.getEnvironment().getRight();
      int _length = ((Object[])Conversions.unwrapArray(((DeclarationObject) _right_1).getFeatures(), Object.class)).length;
      boolean _equals_1 = (_length == 3);
      if (_equals_1) {
        _builder.append("static ServerSocket __socket_server_");
        String _name_2 = declaration.getName();
        _builder.append(_name_2);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String generateChannelDeclarationForLanguage(final ChannelDeclaration declaration) {
    EObject _right = declaration.getEnvironment().getRight();
    String env = ((DeclarationObject) _right).getFeatures().get(0).getValue_s();
    if ((env.equals("local") && (((Object[])Conversions.unwrapArray(((DeclarationObject) declaration.getEnvironment().getRight()).getFeatures(), Object.class)).length == 3))) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("__socket_server_");
      String _name = declaration.getName();
      _builder.append(_name);
      _builder.append("= new ServerSocket(9090);");
      _builder.newLineIfNotEmpty();
      _builder.append("__thread_pool_");
      String _name_1 = declaration.getEnvironment().getName();
      _builder.append(_name_1);
      _builder.append(".submit(new Runnable() {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void run() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("try {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("while(true) {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("Socket __socket = __socket_server_");
      String _name_2 = declaration.getName();
      _builder.append(_name_2, "                ");
      _builder.append(".accept();");
      _builder.newLineIfNotEmpty();
      _builder.append("                ");
      _builder.append("InputStreamReader __isr = new InputStreamReader(__socket.getInputStream());");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("BufferedReader __br = new BufferedReader(__isr);");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("String __response = __br.readLine();");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("__socket.close();");
      _builder.newLine();
      _builder.append("\t\t\t    ");
      String _name_3 = declaration.getName();
      _builder.append(_name_3, "\t\t\t    ");
      _builder.append(".put(__response);");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}catch (Exception e) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("});");
      _builder.newLine();
      return _builder.toString();
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    return _builder_1.toString();
  }
  
  public String generateChanelDeclarationForCloud(final ChannelDeclaration declaration) {
    EObject _right = declaration.getEnvironment().getRight();
    String env = ((DeclarationObject) _right).getFeatures().get(0).getValue_s();
    final Function1<EnvironmentDeclaration, Boolean> _function = (EnvironmentDeclaration it) -> {
      EObject _right_1 = it.getRight();
      return Boolean.valueOf(((DeclarationObject) _right_1).getFeatures().get(0).getValue_s().equals("local"));
    };
    EnvironmentDeclaration _get = ((EnvironmentDeclaration[])Conversions.unwrapArray(IterableExtensions.<EnvironmentDeclaration>filter(Iterables.<EnvironmentDeclaration>filter(IteratorExtensions.<EObject>toIterable(this.res.getAllContents()), EnvironmentDeclaration.class), _function), EnvironmentDeclaration.class))[0];
    String local = ((EnvironmentDeclaration) _get).getName();
    boolean _equals = env.equals("aws");
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("__sqs.createQueue(new CreateQueueRequest(\"");
      String _name = declaration.getName();
      _builder.append(_name);
      _builder.append("_\"+__id_execution));");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("for(int __i=0;__i< (Integer)__fly_environment.get(\"");
      _builder.append(local);
      _builder.append("\").get(\"nthread\");__i++){ ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("__thread_pool_");
      _builder.append(local, "\t");
      _builder.append(".submit(new Callable<Object>() {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public Object call() throws Exception {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("while(__wait_on_");
      String _name_1 = declaration.getName();
      _builder.append(_name_1, "\t\t\t");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl(\"");
      String _name_2 = declaration.getName();
      _builder.append(_name_2, "\t\t\t\t");
      _builder.append("_\"+__id_execution).getQueueUrl()).");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("withWaitTimeSeconds(1).withMaxNumberOfMessages(10);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("for(Message msg : __res.getMessages()) { ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      String _name_3 = declaration.getName();
      _builder.append(_name_3, "\t\t\t\t\t");
      _builder.append(".put(msg.getBody());");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t\t");
      _builder.append("__sqs.deleteMessage(__sqs.getQueueUrl(\"");
      String _name_4 = declaration.getName();
      _builder.append(_name_4, "\t\t\t\t\t");
      _builder.append("_\"+__id_execution).getQueueUrl(), msg.getReceiptHandle());");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return null;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("});");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    }
    return null;
  }
  
  public String generateDatDeclaration(final DatDeclaration dec, final String scope) {
    EObject _right = dec.getRight();
    if ((_right instanceof DeclarationObject)) {
      EObject _right_1 = dec.getRight();
      String type = ((DeclarationObject) _right_1).getFeatures().get(2).getValue_s();
      EObject _right_2 = dec.getRight();
      String path = ((DeclarationObject) _right_2).getFeatures().get(1).getValue_s();
      InputOutput.<String>println(("type: " + type));
      boolean _equals = type.equals("txt");
      if (_equals) {
        this.typeSystem.get(scope).put(dec.getName(), "File");
        InputOutput.<HashMap<String, String>>println(this.typeSystem.get(scope));
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("File ");
        String _name = dec.getName();
        _builder.append(_name);
        _builder.append(" = new File(\"");
        _builder.append(path);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        return _builder.toString();
      } else {
        boolean _equals_1 = type.equals("csv");
        if (_equals_1) {
          this.typeSystem.get(scope).put(dec.getName(), "Table");
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("Table ");
          String _name_1 = dec.getName();
          _builder_1.append(_name_1);
          _builder_1.append(" = Table.read().csv(CsvReadOptions");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("\t");
          _builder_1.append(".builder(");
          {
            if ((dec.isOnCloud() && (!path.contains("https://")))) {
              _builder_1.append(" \"https://s3.us-east-2.amazonaws.com/bucket-\"+__id_execution+\"/");
              _builder_1.append(path, "\t");
              _builder_1.append("\" ");
            } else {
              _builder_1.append("\"");
              _builder_1.append(path, "\t");
              _builder_1.append("\"");
            }
          }
          _builder_1.append(")");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("\t");
          _builder_1.append(".maxNumberOfColumns(5000)");
          _builder_1.newLine();
          _builder_1.append("\t");
          _builder_1.append(".tableName(\"");
          EObject _right_3 = dec.getRight();
          String _value_s = ((DeclarationObject) _right_3).getFeatures().get(0).getValue_s();
          _builder_1.append(_value_s, "\t");
          _builder_1.append("\")");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("\t");
          _builder_1.append(".separator(\'");
          EObject _right_4 = dec.getRight();
          String _value_s_1 = ((DeclarationObject) _right_4).getFeatures().get(3).getValue_s();
          _builder_1.append(_value_s_1, "\t");
          _builder_1.append("\')");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append(");");
          _builder_1.newLine();
          return _builder_1.toString();
        }
      }
    } else {
      EObject _right_5 = dec.getRight();
      this.typeSystem.get(scope).put(dec.getName(), this.valuateArithmeticExpression(((ArithmeticExpression) _right_5), scope));
      StringConcatenation _builder_2 = new StringConcatenation();
      EObject _right_6 = dec.getRight();
      String _valuateArithmeticExpression = this.valuateArithmeticExpression(((ArithmeticExpression) _right_6), scope);
      _builder_2.append(_valuateArithmeticExpression);
      _builder_2.append(" ");
      String _name_2 = dec.getName();
      _builder_2.append(_name_2);
      _builder_2.append(" = ");
      EObject _right_7 = dec.getRight();
      String _generateArithmeticExpression = this.generateArithmeticExpression(((ArithmeticExpression) _right_7), scope);
      _builder_2.append(_generateArithmeticExpression);
      _builder_2.append(";");
      return _builder_2.toString();
    }
    return null;
  }
  
  public String generateRandomDeclaration(final RandomDeclaration declaration) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Random ");
    String _name = declaration.getName();
    _builder.append(_name);
    _builder.append(" = new Random();");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateArithmeticExpression(final ArithmeticExpression expression, final String scope) {
    Object _xifexpression = null;
    if ((expression instanceof BinaryOperation)) {
      boolean _equals = ((BinaryOperation)expression).getFeature().equals("and");
      if (_equals) {
        StringConcatenation _builder = new StringConcatenation();
        Object _generateArithmeticExpression = this.generateArithmeticExpression(((BinaryOperation)expression).getLeft(), scope);
        _builder.append(_generateArithmeticExpression);
        _builder.append(" && ");
        Object _generateArithmeticExpression_1 = this.generateArithmeticExpression(((BinaryOperation)expression).getRight(), scope);
        _builder.append(_generateArithmeticExpression_1);
        return _builder.toString();
      } else {
        boolean _equals_1 = ((BinaryOperation)expression).getFeature().equals("or");
        if (_equals_1) {
          StringConcatenation _builder_1 = new StringConcatenation();
          Object _generateArithmeticExpression_2 = this.generateArithmeticExpression(((BinaryOperation)expression).getLeft(), scope);
          _builder_1.append(_generateArithmeticExpression_2);
          _builder_1.append(" || ");
          Object _generateArithmeticExpression_3 = this.generateArithmeticExpression(((BinaryOperation)expression).getRight(), scope);
          _builder_1.append(_generateArithmeticExpression_3);
          return _builder_1.toString();
        } else {
          StringConcatenation _builder_2 = new StringConcatenation();
          Object _generateArithmeticExpression_4 = this.generateArithmeticExpression(((BinaryOperation)expression).getLeft(), scope);
          _builder_2.append(_generateArithmeticExpression_4);
          _builder_2.append(" ");
          String _feature = ((BinaryOperation)expression).getFeature();
          _builder_2.append(_feature);
          _builder_2.append(" ");
          Object _generateArithmeticExpression_5 = this.generateArithmeticExpression(((BinaryOperation)expression).getRight(), scope);
          _builder_2.append(_generateArithmeticExpression_5);
          return _builder_2.toString();
        }
      }
    } else {
      Object _xifexpression_1 = null;
      if ((expression instanceof UnaryOperation)) {
        StringConcatenation _builder_3 = new StringConcatenation();
        String _feature_1 = ((UnaryOperation)expression).getFeature();
        _builder_3.append(_feature_1);
        Object _generateArithmeticExpression_6 = this.generateArithmeticExpression(((UnaryOperation)expression).getOperand(), scope);
        _builder_3.append(_generateArithmeticExpression_6);
        return _builder_3.toString();
      } else {
        Object _xifexpression_2 = null;
        if ((expression instanceof ParenthesizedExpression)) {
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("(");
          Object _generateArithmeticExpression_7 = this.generateArithmeticExpression(((ParenthesizedExpression)expression).getExpression(), scope);
          _builder_4.append(_generateArithmeticExpression_7);
          _builder_4.append(")");
          return _builder_4.toString();
        } else {
          Object _xifexpression_3 = null;
          if ((expression instanceof NumberLiteral)) {
            StringConcatenation _builder_5 = new StringConcatenation();
            int _value = ((NumberLiteral)expression).getValue();
            _builder_5.append(_value);
            return _builder_5.toString();
          } else {
            Object _xifexpression_4 = null;
            if ((expression instanceof BooleanLiteral)) {
              StringConcatenation _builder_6 = new StringConcatenation();
              String _value_1 = ((BooleanLiteral)expression).getValue();
              _builder_6.append(_value_1);
              return _builder_6.toString();
            } else {
              Object _xifexpression_5 = null;
              if ((expression instanceof StringLiteral)) {
                StringConcatenation _builder_7 = new StringConcatenation();
                _builder_7.append("\"");
                String _value_2 = ((StringLiteral)expression).getValue();
                _builder_7.append(_value_2);
                _builder_7.append("\"");
                return _builder_7.toString();
              } else {
                Object _xifexpression_6 = null;
                if ((expression instanceof FloatLiteral)) {
                  StringConcatenation _builder_8 = new StringConcatenation();
                  float _value_3 = ((FloatLiteral)expression).getValue();
                  _builder_8.append(_value_3);
                  return _builder_8.toString();
                } else {
                  Object _xifexpression_7 = null;
                  if ((expression instanceof VariableLiteral)) {
                    StringConcatenation _builder_9 = new StringConcatenation();
                    String _name = ((VariableLiteral)expression).getVariable().getName();
                    _builder_9.append(_name);
                    return _builder_9.toString();
                  } else {
                    Object _xifexpression_8 = null;
                    if ((expression instanceof NameObject)) {
                      VariableDeclaration _name_1 = ((NameObject)expression).getName();
                      if ((_name_1 instanceof EnvironmentDeclaration)) {
                        StringConcatenation _builder_10 = new StringConcatenation();
                        _builder_10.append("__fly_environment.get(");
                        String _name_2 = ((NameObject)expression).getName().getName();
                        _builder_10.append(_name_2);
                        _builder_10.append(").get(\"");
                        String _value_4 = ((NameObject)expression).getValue();
                        _builder_10.append(_value_4);
                        _builder_10.append("\")");
                        return _builder_10.toString();
                      } else {
                        HashMap<String, String> _get = this.typeSystem.get(scope);
                        String _name_3 = ((NameObject)expression).getName().getName();
                        String _plus = (_name_3 + ".");
                        String _value_5 = ((NameObject)expression).getValue();
                        String _plus_1 = (_plus + _value_5);
                        String _get_1 = _get.get(_plus_1);
                        boolean _tripleNotEquals = (_get_1 != null);
                        if (_tripleNotEquals) {
                          StringConcatenation _builder_11 = new StringConcatenation();
                          _builder_11.append("(");
                          HashMap<String, String> _get_2 = this.typeSystem.get(scope);
                          String _name_4 = ((NameObject)expression).getName().getName();
                          String _plus_2 = (_name_4 + ".");
                          String _value_6 = ((NameObject)expression).getValue();
                          String _plus_3 = (_plus_2 + _value_6);
                          String _get_3 = _get_2.get(_plus_3);
                          _builder_11.append(_get_3);
                          _builder_11.append(") ");
                          String _name_5 = ((NameObject)expression).getName().getName();
                          _builder_11.append(_name_5);
                          _builder_11.append(".get(\"");
                          String _value_7 = ((NameObject)expression).getValue();
                          _builder_11.append(_value_7);
                          _builder_11.append("\")");
                          return _builder_11.toString();
                        } else {
                          StringConcatenation _builder_12 = new StringConcatenation();
                          String _name_6 = ((NameObject)expression).getName().getName();
                          _builder_12.append(_name_6);
                          _builder_12.append(".get(\"");
                          String _value_8 = ((NameObject)expression).getValue();
                          _builder_12.append(_value_8);
                          _builder_12.append("\")");
                          return _builder_12.toString();
                        }
                      }
                    } else {
                      Object _xifexpression_9 = null;
                      if ((expression instanceof IndexObject)) {
                        boolean _contains = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName()).contains("Array");
                        if (_contains) {
                          ArithmeticExpression _value2 = ((IndexObject)expression).getIndexes().get(0).getValue2();
                          boolean _tripleEquals = (_value2 == null);
                          if (_tripleEquals) {
                            StringConcatenation _builder_13 = new StringConcatenation();
                            String _name_7 = ((IndexObject)expression).getName().getName();
                            _builder_13.append(_name_7);
                            _builder_13.append("[");
                            Object _generateArithmeticExpression_8 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue(), scope);
                            _builder_13.append(_generateArithmeticExpression_8);
                            _builder_13.append("]");
                            return _builder_13.toString();
                          } else {
                            StringConcatenation _builder_14 = new StringConcatenation();
                            _builder_14.append("Arrays.copyOfRange(");
                            String _name_8 = ((IndexObject)expression).getName().getName();
                            _builder_14.append(_name_8);
                            _builder_14.append(", ");
                            Object _generateArithmeticExpression_9 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue(), scope);
                            _builder_14.append(_generateArithmeticExpression_9);
                            _builder_14.append(", ");
                            Object _generateArithmeticExpression_10 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue2(), scope);
                            _builder_14.append(_generateArithmeticExpression_10);
                            _builder_14.append(")");
                            return _builder_14.toString();
                          }
                        } else {
                          boolean _contains_1 = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName()).contains("Matrix");
                          if (_contains_1) {
                            int _length = ((Object[])Conversions.unwrapArray(((IndexObject)expression).getIndexes(), Object.class)).length;
                            boolean _equals_2 = (_length == 2);
                            if (_equals_2) {
                              if (((((IndexObject)expression).getIndexes().get(0).getValue2() == null) && (((IndexObject)expression).getIndexes().get(1).getValue2() == null))) {
                                StringConcatenation _builder_15 = new StringConcatenation();
                                String _name_9 = ((IndexObject)expression).getName().getName();
                                _builder_15.append(_name_9);
                                _builder_15.append("[");
                                Object _generateArithmeticExpression_11 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue(), scope);
                                _builder_15.append(_generateArithmeticExpression_11);
                                _builder_15.append("][");
                                Object _generateArithmeticExpression_12 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(1).getValue(), scope);
                                _builder_15.append(_generateArithmeticExpression_12);
                                _builder_15.append("]");
                                return _builder_15.toString();
                              } else {
                                StringConcatenation _builder_16 = new StringConcatenation();
                                return _builder_16.toString();
                              }
                            } else {
                              if ((((((IndexObject)expression).getIndexes().get(0).getValue2() == null) && (((IndexObject)expression).getIndexes().get(1).getValue2() == null)) && (((IndexObject)expression).getIndexes().get(2).getValue2() == null))) {
                                StringConcatenation _builder_17 = new StringConcatenation();
                                String _name_10 = ((IndexObject)expression).getName().getName();
                                _builder_17.append(_name_10);
                                _builder_17.append("[");
                                Object _generateArithmeticExpression_13 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue(), scope);
                                _builder_17.append(_generateArithmeticExpression_13);
                                _builder_17.append("][");
                                Object _generateArithmeticExpression_14 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(1).getValue(), scope);
                                _builder_17.append(_generateArithmeticExpression_14);
                                _builder_17.append("][");
                                Object _generateArithmeticExpression_15 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(1).getValue(), scope);
                                _builder_17.append(_generateArithmeticExpression_15);
                                _builder_17.append("]");
                                return _builder_17.toString();
                              } else {
                                StringConcatenation _builder_18 = new StringConcatenation();
                                return _builder_18.toString();
                              }
                            }
                          } else {
                            HashMap<String, String> _get_4 = this.typeSystem.get(scope);
                            String _name_11 = ((IndexObject)expression).getName().getName();
                            String _plus_4 = (_name_11 + "[");
                            Object _generateArithmeticExpression_16 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue(), scope);
                            String _plus_5 = (_plus_4 + _generateArithmeticExpression_16);
                            String _plus_6 = (_plus_5 + "]");
                            String _get_5 = _get_4.get(_plus_6);
                            boolean _tripleNotEquals_1 = (_get_5 != null);
                            if (_tripleNotEquals_1) {
                              StringConcatenation _builder_19 = new StringConcatenation();
                              _builder_19.append("(");
                              HashMap<String, String> _get_6 = this.typeSystem.get(scope);
                              String _name_12 = ((IndexObject)expression).getName().getName();
                              String _plus_7 = (_name_12 + "[");
                              Object _generateArithmeticExpression_17 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue(), scope);
                              String _plus_8 = (_plus_7 + _generateArithmeticExpression_17);
                              String _plus_9 = (_plus_8 + "]");
                              String _get_7 = _get_6.get(_plus_9);
                              _builder_19.append(_get_7);
                              _builder_19.append(") ");
                              String _name_13 = ((IndexObject)expression).getName().getName();
                              _builder_19.append(_name_13);
                              _builder_19.append(".get(\"");
                              Object _generateArithmeticExpression_18 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue(), scope);
                              _builder_19.append(_generateArithmeticExpression_18);
                              _builder_19.append("\")");
                              return _builder_19.toString();
                            } else {
                              boolean _equals_3 = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName()).equals("HashMap");
                              if (_equals_3) {
                                StringConcatenation _builder_20 = new StringConcatenation();
                                String _name_14 = ((IndexObject)expression).getName().getName();
                                _builder_20.append(_name_14);
                                _builder_20.append(".get(");
                                Object _generateArithmeticExpression_19 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue(), scope);
                                _builder_20.append(_generateArithmeticExpression_19);
                                _builder_20.append(")");
                                return _builder_20.toString();
                              } else {
                                boolean _equals_4 = this.typeSystem.get(scope).get(this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName())).equals("Table");
                                if (_equals_4) {
                                  StringConcatenation _builder_21 = new StringConcatenation();
                                  String _get_8 = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName());
                                  _builder_21.append(_get_8);
                                  _builder_21.append(".get(_");
                                  String _get_9 = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName());
                                  _builder_21.append(_get_9);
                                  _builder_21.append(", ");
                                  Object _generateArithmeticExpression_20 = this.generateArithmeticExpression(((IndexObject)expression).getIndexes().get(0).getValue(), scope);
                                  _builder_21.append(_generateArithmeticExpression_20);
                                  _builder_21.append(")");
                                  return _builder_21.toString();
                                }
                              }
                            }
                          }
                        }
                      } else {
                        Object _xifexpression_10 = null;
                        if ((expression instanceof DatSingleObject)) {
                          StringConcatenation _builder_22 = new StringConcatenation();
                          String _name_15 = ((DatSingleObject)expression).getName().getName();
                          _builder_22.append(_name_15);
                          _builder_22.append(".get(");
                          Object _generateArithmeticExpression_21 = this.generateArithmeticExpression(((DatSingleObject)expression).getValue1(), scope);
                          _builder_22.append(_generateArithmeticExpression_21);
                          _builder_22.append(",");
                          Object _generateArithmeticExpression_22 = this.generateArithmeticExpression(((DatSingleObject)expression).getValue2(), scope);
                          _builder_22.append(_generateArithmeticExpression_22);
                          _builder_22.append(")");
                          return _builder_22.toString();
                        } else {
                          Object _xifexpression_11 = null;
                          if ((expression instanceof DatTableObject)) {
                            _xifexpression_11 = null;
                          } else {
                            if ((expression instanceof CastExpression)) {
                              boolean _equals_5 = ((CastExpression)expression).getOp().equals("as");
                              if (_equals_5) {
                                ArithmeticExpression _target = ((CastExpression)expression).getTarget();
                                if ((_target instanceof ChannelReceive)) {
                                  ArithmeticExpression _target_1 = ((CastExpression)expression).getTarget();
                                  EnvironmentDeclaration _environment = ((ChannelReceive) _target_1).getTarget().getEnvironment();
                                  EObject _right = ((EnvironmentDeclaration) _environment).getRight();
                                  boolean _equals_6 = ((DeclarationObject) _right).getFeatures().get(0).getValue_s().equals("aws");
                                  if (_equals_6) {
                                    boolean _equals_7 = ((CastExpression)expression).getType().equals("Integer");
                                    if (_equals_7) {
                                      StringConcatenation _builder_23 = new StringConcatenation();
                                      _builder_23.append("__");
                                      _builder_23.newLine();
                                      _builder_23.append("ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl(\"");
                                      ArithmeticExpression _target_2 = ((CastExpression)expression).getTarget();
                                      String _name_16 = ((ChannelReceive) _target_2).getTarget().getName();
                                      _builder_23.append(_name_16);
                                      _builder_23.append("\"+__id_execution).getQueueUrl());");
                                      _builder_23.newLineIfNotEmpty();
                                      _builder_23.append("ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);");
                                      _builder_23.newLine();
                                      _builder_23.append("while(__res.getMessages().size() == 0){");
                                      _builder_23.newLine();
                                      _builder_23.append("\t");
                                      _builder_23.append("__res = __sqs.receiveMessage(__recmsg);");
                                      _builder_23.newLine();
                                      _builder_23.append("}");
                                      _builder_23.newLine();
                                      _builder_23.append("Integer.parseInt(__res.getMessages().get(0).getBody());");
                                      _builder_23.newLine();
                                      _builder_23.append("__sqs.deleteMessage(__sqs.getQueueUrl(\"");
                                      ArithmeticExpression _target_3 = ((CastExpression)expression).getTarget();
                                      String _name_17 = ((ChannelReceive) _target_3).getTarget().getName();
                                      _builder_23.append(_name_17);
                                      _builder_23.append("\"+__id_execution).getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());");
                                      _builder_23.newLineIfNotEmpty();
                                      return _builder_23.toString();
                                    } else {
                                      boolean _equals_8 = ((CastExpression)expression).getType().equals("Float");
                                      if (_equals_8) {
                                        StringConcatenation _builder_24 = new StringConcatenation();
                                        _builder_24.append("ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl(\"");
                                        ArithmeticExpression _target_4 = ((CastExpression)expression).getTarget();
                                        String _name_18 = ((ChannelReceive) _target_4).getTarget().getName();
                                        _builder_24.append(_name_18);
                                        _builder_24.append("\"+__id_execution).getQueueUrl());");
                                        _builder_24.newLineIfNotEmpty();
                                        _builder_24.append("ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);");
                                        _builder_24.newLine();
                                        _builder_24.append("while(__res.getMessages().size() == 0){");
                                        _builder_24.newLine();
                                        _builder_24.append("__res = __sqs.receiveMessage(__recmsg);");
                                        _builder_24.newLine();
                                        _builder_24.append("}");
                                        _builder_24.newLine();
                                        _builder_24.append("Double.parseDouble(__res.getMessages().get(0).getBody());");
                                        _builder_24.newLine();
                                        _builder_24.append("__sqs.deleteMessage(__sqs.getQueueUrl(\"");
                                        ArithmeticExpression _target_5 = ((CastExpression)expression).getTarget();
                                        String _name_19 = ((ChannelReceive) _target_5).getTarget().getName();
                                        _builder_24.append(_name_19);
                                        _builder_24.append("\"+__id_execution).getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());");
                                        _builder_24.newLineIfNotEmpty();
                                        return _builder_24.toString();
                                      }
                                    }
                                  }
                                }
                                boolean _equals_9 = ((CastExpression)expression).getType().equals("String");
                                if (_equals_9) {
                                  StringConcatenation _builder_25 = new StringConcatenation();
                                  _builder_25.append("(String) ");
                                  Object _generateArithmeticExpression_23 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_25.append(_generateArithmeticExpression_23);
                                  return _builder_25.toString();
                                }
                                boolean _equals_10 = ((CastExpression)expression).getType().equals("Integer");
                                if (_equals_10) {
                                  StringConcatenation _builder_26 = new StringConcatenation();
                                  _builder_26.append("(int)((");
                                  Object _generateArithmeticExpression_24 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_26.append(_generateArithmeticExpression_24);
                                  _builder_26.append(" instanceof Short)? new Integer((Short) ");
                                  Object _generateArithmeticExpression_25 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_26.append(_generateArithmeticExpression_25);
                                  _builder_26.append("):(Integer) ");
                                  Object _generateArithmeticExpression_26 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_26.append(_generateArithmeticExpression_26);
                                  _builder_26.append(")");
                                  return _builder_26.toString();
                                }
                                boolean _equals_11 = ((CastExpression)expression).getType().equals("Double");
                                if (_equals_11) {
                                  StringConcatenation _builder_27 = new StringConcatenation();
                                  _builder_27.append("(double)((");
                                  Object _generateArithmeticExpression_27 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_27.append(_generateArithmeticExpression_27);
                                  _builder_27.append(" instanceof Float)? new Double((Float) ");
                                  Object _generateArithmeticExpression_28 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_27.append(_generateArithmeticExpression_28);
                                  _builder_27.append("):(Double) ");
                                  Object _generateArithmeticExpression_29 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_27.append(_generateArithmeticExpression_29);
                                  _builder_27.append(")");
                                  return _builder_27.toString();
                                }
                                boolean _equals_12 = ((CastExpression)expression).getType().equals("Dat");
                                if (_equals_12) {
                                  StringConcatenation _builder_28 = new StringConcatenation();
                                  _builder_28.append("(Table) ");
                                  Object _generateArithmeticExpression_30 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_28.append(_generateArithmeticExpression_30);
                                  return _builder_28.toString();
                                }
                                boolean _equals_13 = ((CastExpression)expression).getType().equals("Date");
                                if (_equals_13) {
                                  StringConcatenation _builder_29 = new StringConcatenation();
                                  _builder_29.append("LocalDate.parse(");
                                  Object _generateArithmeticExpression_31 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_29.append(_generateArithmeticExpression_31);
                                  _builder_29.append(")");
                                  return _builder_29.toString();
                                }
                                boolean _equals_14 = ((CastExpression)expression).getType().equals("Object");
                                if (_equals_14) {
                                  StringConcatenation _builder_30 = new StringConcatenation();
                                  _builder_30.append("((HashMap<Object,Object>) ");
                                  Object _generateArithmeticExpression_32 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_30.append(_generateArithmeticExpression_32);
                                  _builder_30.append(")");
                                  return _builder_30.toString();
                                }
                              } else {
                                boolean _equals_15 = ((CastExpression)expression).getType().equals("Integer");
                                if (_equals_15) {
                                  StringConcatenation _builder_31 = new StringConcatenation();
                                  _builder_31.append("Integer.parseInt( ");
                                  Object _generateArithmeticExpression_33 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_31.append(_generateArithmeticExpression_33);
                                  _builder_31.append(".toString())");
                                  return _builder_31.toString();
                                }
                                boolean _equals_16 = ((CastExpression)expression).getType().equals("Double");
                                if (_equals_16) {
                                  StringConcatenation _builder_32 = new StringConcatenation();
                                  _builder_32.append("Double.parseDouble( ");
                                  Object _generateArithmeticExpression_34 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                  _builder_32.append(_generateArithmeticExpression_34);
                                  _builder_32.append(".toString())");
                                  return _builder_32.toString();
                                }
                              }
                            } else {
                              if ((expression instanceof MathFunction)) {
                                String s = "";
                                boolean _equals_17 = ((MathFunction)expression).getFeature().equals("round");
                                if (_equals_17) {
                                  String _s = s;
                                  s = (_s + "(int) ");
                                }
                                String _s_1 = s;
                                String _feature_2 = ((MathFunction)expression).getFeature();
                                String _plus_10 = ("Math." + _feature_2);
                                String _plus_11 = (_plus_10 + "(");
                                s = (_s_1 + _plus_11);
                                EList<ArithmeticExpression> _expressions = ((MathFunction)expression).getExpressions();
                                for (final ArithmeticExpression exp : _expressions) {
                                  {
                                    String _s_2 = s;
                                    Object _generateArithmeticExpression_35 = this.generateArithmeticExpression(exp, scope);
                                    s = (_s_2 + _generateArithmeticExpression_35);
                                    ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(((MathFunction)expression).getExpressions());
                                    boolean _notEquals = (!Objects.equal(exp, _last));
                                    if (_notEquals) {
                                      String _s_3 = s;
                                      s = (_s_3 + ",");
                                    }
                                  }
                                }
                                String _s_2 = s;
                                s = (_s_2 + ")");
                                return s;
                              } else {
                                if ((expression instanceof TimeFunction)) {
                                  VariableDeclaration _value_9 = ((TimeFunction)expression).getValue();
                                  boolean _notEquals = (!Objects.equal(_value_9, null));
                                  if (_notEquals) {
                                    StringConcatenation _builder_33 = new StringConcatenation();
                                    _builder_33.append("( System.currentTimeMillis() - ");
                                    String _name_20 = ((TimeFunction)expression).getValue().getName();
                                    _builder_33.append(_name_20);
                                    _builder_33.append(" )");
                                    return _builder_33.toString();
                                  } else {
                                    StringConcatenation _builder_34 = new StringConcatenation();
                                    _builder_34.append("System.currentTimeMillis()");
                                    return _builder_34.toString();
                                  }
                                } else {
                                  if ((expression instanceof VariableFunction)) {
                                    return this.generateVariableFunction(((VariableFunction)expression), Boolean.valueOf(false), scope);
                                  } else {
                                    if ((expression instanceof ChannelReceive)) {
                                      return this.generateChannelReceive(((ChannelReceive)expression), scope);
                                    } else {
                                      if ((expression instanceof ChannelSend)) {
                                        return this.generateChannelSend(((ChannelSend)expression), scope);
                                      } else {
                                        if ((expression instanceof LocalFunctionCall)) {
                                          String s_1 = this.generateLocalFunctionCall(((LocalFunctionCall)expression), scope);
                                          int _length_1 = s_1.length();
                                          int _minus = (_length_1 - 1);
                                          return s_1.substring(0, _minus);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _xifexpression_10 = _xifexpression_11;
                        }
                        _xifexpression_9 = _xifexpression_10;
                      }
                      _xifexpression_8 = _xifexpression_9;
                    }
                    _xifexpression_7 = _xifexpression_8;
                  }
                  _xifexpression_6 = _xifexpression_7;
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return ((String)_xifexpression);
  }
  
  public String generateVariableFunction(final VariableFunction expression, final Boolean t, final String scope) {
    EObject _right = expression.getTarget().getRight();
    if ((_right instanceof FlyFunctionCall)) {
      String feature = "";
      boolean _equals = expression.getFeature().equals("wait");
      if (_equals) {
        feature = "get";
      } else {
        feature = expression.getFeature();
      }
      String s = "";
      String _s = s;
      s = (_s + (((("for(Future _el :" + this.last_func_result) + "){\n\t\t\t\t\t\t_el.") + feature) + "("));
      EList<ArithmeticExpression> _expressions = expression.getExpressions();
      for (final ArithmeticExpression exp : _expressions) {
        {
          String _s_1 = s;
          Object _generateArithmeticExpression = this.generateArithmeticExpression(exp, scope);
          s = (_s_1 + _generateArithmeticExpression);
          ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(expression.getExpressions());
          boolean _notEquals = (!Objects.equal(exp, _last));
          if (_notEquals) {
            String _s_2 = s;
            s = (_s_2 + ",");
          }
        }
      }
      String _s_1 = s;
      s = (_s_1 + ");\n\t\t\t\t\t}");
      return s;
    }
    boolean _equals_1 = expression.getTarget().getTypeobject().equals("dat");
    if (_equals_1) {
      boolean _equals_2 = expression.getFeature().equals("rows");
      if (_equals_2) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("HashMap<Integer, HashMap<String,Object> > __");
        String _name = expression.getTarget().getName();
        _builder.append(_name);
        _builder.append("_rows = new HashMap<Integer, HashMap<String,Object>>();");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.append("for(int __i=0; __i<");
        String _name_1 = expression.getTarget().getName();
        _builder.append(_name_1, "    \t");
        _builder.append(".rowCount();__i++) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("HashMap<String, Object> __tmp = new HashMap<String, Object>();");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("for (String __col : ");
        String _name_2 = expression.getTarget().getName();
        _builder.append(_name_2, "    \t\t");
        _builder.append(".columnNames()) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t");
        _builder.append("__tmp.put(__col,");
        String _name_3 = expression.getTarget().getName();
        _builder.append(_name_3, "    \t\t\t");
        _builder.append(".get(__i, ");
        String _name_4 = expression.getTarget().getName();
        _builder.append(_name_4, "    \t\t\t");
        _builder.append(".columnIndex(__col)));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t \t\t");
        _builder.append("__");
        String _name_5 = expression.getTarget().getName();
        _builder.append(_name_5, "\t\t\t \t\t");
        _builder.append("_rows.put(__i,__tmp);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t \t");
        _builder.append("}");
        _builder.newLine();
        return _builder.toString();
      } else {
        boolean _equals_3 = expression.getFeature().equals("delete");
        if (_equals_3) {
          VariableDeclaration _target = expression.getTarget();
          EObject _right_1 = ((DatDeclaration) _target).getRight();
          String path = ((DeclarationObject) _right_1).getFeatures().get(1).getValue_s();
          String filename = IterableExtensions.<String>last(((Iterable<String>)Conversions.doWrapArray(path.split("/"))));
          StringConcatenation _builder_1 = new StringConcatenation();
          {
            VariableDeclaration _target_1 = expression.getTarget();
            boolean _isOnCloud = ((DatDeclaration) _target_1).isOnCloud();
            if (_isOnCloud) {
              _builder_1.append("try {");
              _builder_1.newLine();
              _builder_1.append("    ");
              _builder_1.append("s3.deleteObject(\"bucket-\"+__id_execution), ");
              _builder_1.append(filename, "    ");
              _builder_1.append(");");
              _builder_1.newLineIfNotEmpty();
              _builder_1.append("} catch (AmazonServiceException e) {");
              _builder_1.newLine();
              _builder_1.append("    ");
              _builder_1.append("System.err.println(e.getErrorMessage());");
              _builder_1.newLine();
              _builder_1.append("    ");
              _builder_1.append("System.exit(1);");
              _builder_1.newLine();
              _builder_1.append("}");
              _builder_1.newLine();
            }
          }
          return _builder_1.toString();
        }
      }
    } else {
      boolean _equals_4 = expression.getTarget().getTypeobject().equals("channel");
      if (_equals_4) {
        boolean _equals_5 = expression.getFeature().equals("close");
        if (_equals_5) {
          VariableDeclaration _target_2 = expression.getTarget();
          EObject _right_2 = ((ChannelDeclaration) _target_2).getEnvironment().getRight();
          InputOutput.<DeclarationFeature>println(((DeclarationObject) _right_2).getFeatures().get(0));
          StringConcatenation _builder_2 = new StringConcatenation();
          {
            VariableDeclaration _target_3 = expression.getTarget();
            EObject _right_3 = ((ChannelDeclaration) _target_3).getEnvironment().getRight();
            boolean _equals_6 = ((DeclarationObject) _right_3).getFeatures().get(0).getValue_s().equals("local");
            boolean _not = (!_equals_6);
            if (_not) {
              _builder_2.append("__wait_on_");
              String _name_6 = expression.getTarget().getName();
              _builder_2.append(_name_6);
              _builder_2.append(" = false;");
              _builder_2.newLineIfNotEmpty();
            } else {
              if ((((DeclarationObject) ((ChannelDeclaration) expression.getTarget()).getEnvironment().getRight()).getFeatures().get(0).getValue_s().equals("local") && 
                (((Object[])Conversions.unwrapArray(((DeclarationObject) ((ChannelDeclaration) expression.getTarget()).getEnvironment().getRight()).getFeatures(), Object.class)).length == 3))) {
                _builder_2.append("__socket_server_");
                String _name_7 = expression.getTarget().getName();
                _builder_2.append(_name_7);
                _builder_2.append(".close();");
                _builder_2.newLineIfNotEmpty();
              }
            }
          }
          return _builder_2.toString();
        }
      } else {
        String _name_8 = expression.getTarget().getName();
        String _plus = (_name_8 + ".");
        String _feature = expression.getFeature();
        String _plus_1 = (_plus + _feature);
        String s_1 = (_plus_1 + "(");
        EList<ArithmeticExpression> _expressions_1 = expression.getExpressions();
        for (final ArithmeticExpression exp_1 : _expressions_1) {
          {
            String _s_2 = s_1;
            Object _generateArithmeticExpression = this.generateArithmeticExpression(exp_1, scope);
            s_1 = (_s_2 + _generateArithmeticExpression);
            ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(expression.getExpressions());
            boolean _notEquals = (!Objects.equal(exp_1, _last));
            if (_notEquals) {
              String _s_3 = s_1;
              s_1 = (_s_3 + ",");
            }
          }
        }
        String _s_2 = s_1;
        s_1 = (_s_2 + ")");
        if ((t).booleanValue()) {
          String _s_3 = s_1;
          s_1 = (_s_3 + ";");
        }
        return s_1;
      }
    }
    return null;
  }
  
  public CharSequence generateBlockExpression(final BlockExpression exp, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      EList<Expression> _expressions = exp.getExpressions();
      for(final Expression element : _expressions) {
        _builder.append("\t");
        Object _generateExpression = this.generateExpression(element, scope);
        _builder.append(_generateExpression, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateFunctionReturn(final FunctionReturn return1, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("return ");
    String _generateArithmeticExpression = this.generateArithmeticExpression(return1.getExpression(), scope);
    _builder.append(_generateArithmeticExpression);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String generateLocalFunctionCall(final LocalFunctionCall call, final String scope) {
    String _name = call.getTarget().getName();
    String s = (_name + "(");
    LocalFunctionInput _input = call.getInput();
    boolean _notEquals = (!Objects.equal(_input, null));
    if (_notEquals) {
      EList<ArithmeticExpression> _inputs = call.getInput().getInputs();
      for (final ArithmeticExpression input : _inputs) {
        {
          String _s = s;
          Object _generateArithmeticExpression = this.generateArithmeticExpression(input, scope);
          s = (_s + _generateArithmeticExpression);
          ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(call.getInput().getInputs());
          boolean _notEquals_1 = (!Objects.equal(input, _last));
          if (_notEquals_1) {
            String _s_1 = s;
            s = (_s_1 + ",");
          }
        }
      }
    }
    String _s = s;
    s = (_s + ");");
    return s;
  }
  
  public String generateFlyFunctionCall(final FlyFunctionCall call, final String scope) {
    EObject _right = call.getEnvironment().getRight();
    String env = ((DeclarationObject) _right).getFeatures().get(0).getValue_s();
    boolean _equals = env.equals("local");
    if (_equals) {
      return this.generateLocalFlyFunction(call, scope);
    } else {
      boolean _equals_1 = env.equals("aws");
      if (_equals_1) {
        return this.generateAWSFlyFunctionCall(call, scope);
      }
    }
    return null;
  }
  
  public String generateLocalFlyFunction(final FlyFunctionCall call, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    String s = _builder.toString();
    FunctionInput _input = call.getInput();
    boolean _isIs_for_index = ((FunctionInput) _input).isIs_for_index();
    if (_isIs_for_index) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("final List<Future<Object>> ");
      String _name = call.getTarget().getName();
      _builder_1.append(_name);
      _builder_1.append("_");
      _builder_1.append(this.func_ID);
      _builder_1.append("_return = new ArrayList<Future<Object>>();");
      _builder_1.newLineIfNotEmpty();
      s = _builder_1.toString();
      if ((call.isIsAsync() && call.isIs_thenall())) {
        String _s = s;
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("final AtomicInteger __count = new AtomicInteger(0);");
        _builder_2.newLine();
        s = (_s + _builder_2);
      }
      if ((((((FunctionInput) call.getInput()).getF_index() instanceof VariableLiteral) && 
        (!Objects.equal(this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()), 
          null))) && 
        this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()).equals("HashMap"))) {
        if ((call.isIsAsync() && call.isIs_thenall())) {
          String _s_1 = s;
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("final int __numThread = ");
          FunctionInput _input_1 = call.getInput();
          String _generateArithmeticExpression = this.generateArithmeticExpression(((FunctionInput) _input_1).getF_index(), scope);
          _builder_3.append(_generateArithmeticExpression);
          _builder_3.append(".keySet().size()-1;");
          _builder_3.newLineIfNotEmpty();
          s = (_s_1 + _builder_3);
        }
        String _s_2 = s;
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("for(Object key: ");
        FunctionInput _input_2 = call.getInput();
        String _generateArithmeticExpression_1 = this.generateArithmeticExpression(((FunctionInput) _input_2).getF_index(), scope);
        _builder_4.append(_generateArithmeticExpression_1);
        _builder_4.append(".keySet()){");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("\t");
        _builder_4.append("final Object _el = ");
        FunctionInput _input_3 = call.getInput();
        String _generateArithmeticExpression_2 = this.generateArithmeticExpression(((FunctionInput) _input_3).getF_index(), scope);
        _builder_4.append(_generateArithmeticExpression_2, "\t");
        _builder_4.append(".get(key);");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("\t");
        _builder_4.append("Future<Object> _f = __thread_pool_");
        String _name_1 = call.getEnvironment().getName();
        _builder_4.append(_name_1, "\t");
        _builder_4.append(".submit(new Callable<Object>(){");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("\t\t");
        _builder_4.newLine();
        _builder_4.append("\t\t");
        _builder_4.append("public Object call() throws Exception {");
        _builder_4.newLine();
        _builder_4.append("\t\t\t");
        _builder_4.append("// TODO Auto-generated method stub");
        _builder_4.newLine();
        _builder_4.append("\t\t\t");
        _builder_4.newLine();
        _builder_4.append("\t\t\t");
        _builder_4.append("Object __ret = ");
        String _name_2 = call.getTarget().getName();
        _builder_4.append(_name_2, "\t\t\t");
        _builder_4.append("(");
        {
          int _length = ((Object[])Conversions.unwrapArray(call.getTarget().getParameters(), Object.class)).length;
          boolean _equals = (_length == 1);
          if (_equals) {
            _builder_4.append("_el");
          }
        }
        _builder_4.append(");");
        _builder_4.newLineIfNotEmpty();
        {
          boolean _isIs_then = call.isIs_then();
          if (_isIs_then) {
            _builder_4.append("\t\t\t");
            String _name_3 = call.getThen().getName();
            _builder_4.append(_name_3, "\t\t\t");
            _builder_4.append("();");
            _builder_4.newLineIfNotEmpty();
          }
        }
        {
          if ((call.isIsAsync() && call.isIs_thenall())) {
            _builder_4.append("\t\t\t");
            _builder_4.append("if(__count.getAndIncrement()==__numThread){");
            _builder_4.newLine();
            _builder_4.append("\t\t\t");
            _builder_4.append("\t\t");
            _builder_4.append("__asyncTermination.put(\"Termination\");");
            _builder_4.newLine();
            _builder_4.append("\t\t\t");
            _builder_4.append("}");
            _builder_4.newLine();
          }
        }
        _builder_4.append("\t\t\t");
        _builder_4.append("return __ret;");
        _builder_4.newLine();
        _builder_4.append("\t\t\t");
        _builder_4.append("}");
        _builder_4.newLine();
        _builder_4.append("\t\t");
        _builder_4.append("});");
        _builder_4.newLine();
        _builder_4.append("\t");
        String _name_4 = call.getTarget().getName();
        _builder_4.append(_name_4, "\t");
        _builder_4.append("_");
        _builder_4.append(this.func_ID, "\t");
        _builder_4.append("_return.add(_f);");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("}");
        _builder_4.newLine();
        s = (_s_2 + _builder_4);
      } else {
        if ((((((FunctionInput) call.getInput()).getF_index() instanceof VariableLiteral) && 
          (!Objects.equal(this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()), 
            null))) && 
          this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()).equals("Table"))) {
          String _s_3 = s;
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("final int __numThread = (Integer) __fly_environment.get(\"");
          String _name_5 = call.getEnvironment().getName();
          _builder_5.append(_name_5);
          _builder_5.append("\").get(\"nthread\");");
          _builder_5.newLineIfNotEmpty();
          _builder_5.append("ArrayList<Table> __list_data_");
          String _name_6 = call.getTarget().getName();
          _builder_5.append(_name_6);
          _builder_5.append(" = new ArrayList<Table>();");
          _builder_5.newLineIfNotEmpty();
          _builder_5.append("for (int __i = 0; __i < __numThread; __i++) {");
          _builder_5.newLine();
          _builder_5.append("\t");
          _builder_5.append("__list_data_");
          String _name_7 = call.getTarget().getName();
          _builder_5.append(_name_7, "\t");
          _builder_5.append(".add(");
          FunctionInput _input_4 = call.getInput();
          ArithmeticExpression _f_index = ((FunctionInput) _input_4).getF_index();
          String _name_8 = ((VariableLiteral) _f_index).getVariable().getName();
          _builder_5.append(_name_8, "\t");
          _builder_5.append(".emptyCopy());");
          _builder_5.newLineIfNotEmpty();
          _builder_5.append("}");
          _builder_5.newLine();
          _builder_5.append("for(int __i=0; __i<");
          FunctionInput _input_5 = call.getInput();
          String _generateArithmeticExpression_3 = this.generateArithmeticExpression(((FunctionInput) _input_5).getF_index(), scope);
          _builder_5.append(_generateArithmeticExpression_3);
          _builder_5.append(".rowCount();__i++) {");
          _builder_5.newLineIfNotEmpty();
          _builder_5.append("\t");
          _builder_5.append("__list_data_");
          String _name_9 = call.getTarget().getName();
          _builder_5.append(_name_9, "\t");
          _builder_5.append(".get(__i%__numThread).addRow(__i,");
          FunctionInput _input_6 = call.getInput();
          ArithmeticExpression _f_index_1 = ((FunctionInput) _input_6).getF_index();
          String _name_10 = ((VariableLiteral) _f_index_1).getVariable().getName();
          _builder_5.append(_name_10, "\t");
          _builder_5.append(");");
          _builder_5.newLineIfNotEmpty();
          _builder_5.append("}");
          _builder_5.newLine();
          _builder_5.append("final ServerSocket __server_");
          FunctionInput _input_7 = call.getInput();
          ArithmeticExpression _f_index_2 = ((FunctionInput) _input_7).getF_index();
          String _name_11 = ((VariableLiteral) _f_index_2).getVariable().getName();
          _builder_5.append(_name_11);
          _builder_5.append("_data = new ServerSocket(9091,100);");
          _builder_5.newLineIfNotEmpty();
          _builder_5.append("for(int __i=0; __i<__numThread;__i++) {");
          _builder_5.newLine();
          _builder_5.append("    ");
          _builder_5.append("final int __index=__i;");
          _builder_5.newLine();
          {
            EObject _right = call.getEnvironment().getRight();
            int _length_1 = ((Object[])Conversions.unwrapArray(((DeclarationObject) _right).getFeatures(), Object.class)).length;
            boolean _equals_1 = (_length_1 == 3);
            if (_equals_1) {
              _builder_5.append("    ");
              _builder_5.append("final String __");
              FunctionInput _input_8 = call.getInput();
              ArithmeticExpression _f_index_3 = ((FunctionInput) _input_8).getF_index();
              String _name_12 = ((VariableLiteral) _f_index_3).getVariable().getName();
              _builder_5.append(_name_12, "    ");
              _builder_5.append(" = __generateString(__list_data_");
              String _name_13 = call.getTarget().getName();
              _builder_5.append(_name_13, "    ");
              _builder_5.append(".get(__index));");
              _builder_5.newLineIfNotEmpty();
            } else {
              _builder_5.append("    ");
              _builder_5.append("final Table __");
              FunctionInput _input_9 = call.getInput();
              ArithmeticExpression _f_index_4 = ((FunctionInput) _input_9).getF_index();
              String _name_14 = ((VariableLiteral) _f_index_4).getVariable().getName();
              _builder_5.append(_name_14, "    ");
              _builder_5.append(" =__list_data_");
              String _name_15 = call.getTarget().getName();
              _builder_5.append(_name_15, "    ");
              _builder_5.append(".get(__index);");
              _builder_5.newLineIfNotEmpty();
            }
          }
          _builder_5.append("    ");
          _builder_5.append("Future<Object> __f = __thread_pool_");
          String _name_16 = call.getEnvironment().getName();
          _builder_5.append(_name_16, "    ");
          _builder_5.append(".submit(new Callable<Object>() {");
          _builder_5.newLineIfNotEmpty();
          _builder_5.append("\t\t");
          _builder_5.append("public Object call() throws Exception {");
          _builder_5.newLine();
          {
            EObject _right_1 = call.getEnvironment().getRight();
            int _length_2 = ((Object[])Conversions.unwrapArray(((DeclarationObject) _right_1).getFeatures(), Object.class)).length;
            boolean _equals_2 = (_length_2 == 3);
            if (_equals_2) {
              {
                EObject _right_2 = call.getEnvironment().getRight();
                boolean _contains = ((DeclarationObject) _right_2).getFeatures().get(2).getValue_s().contains("python");
                if (_contains) {
                  _builder_5.append("\t\t\t");
                  _builder_5.append("ProcessBuilder __processBuilder = new ProcessBuilder(\"python\",new File(\"src-gen/");
                  String _name_17 = call.getTarget().getName();
                  _builder_5.append(_name_17, "\t\t\t");
                  _builder_5.append(".py\").getAbsolutePath()");
                  {
                    int _length_3 = ((Object[])Conversions.unwrapArray(call.getTarget().getParameters(), Object.class)).length;
                    boolean _equals_3 = (_length_3 == 1);
                    if (_equals_3) {
                      _builder_5.append(",__");
                      FunctionInput _input_10 = call.getInput();
                      ArithmeticExpression _f_index_5 = ((FunctionInput) _input_10).getF_index();
                      String _name_18 = ((VariableLiteral) _f_index_5).getVariable().getName();
                      _builder_5.append(_name_18, "\t\t\t");
                    }
                  }
                  _builder_5.append("); //for the moment listen on 9090\t");
                  _builder_5.newLineIfNotEmpty();
                } else {
                  EObject _right_3 = call.getEnvironment().getRight();
                  boolean _contains_1 = ((DeclarationObject) _right_3).getFeatures().get(2).getValue_s().contains("nodejs");
                  if (_contains_1) {
                    _builder_5.append("\t\t\t");
                    _builder_5.append("ProcessBuilder __processBuilder = new ProcessBuilder(\"nodejs\",new File(\"src-gen/");
                    String _name_19 = call.getTarget().getName();
                    _builder_5.append(_name_19, "\t\t\t");
                    _builder_5.append(".js\").getAbsolutePath(),");
                    {
                      int _length_4 = ((Object[])Conversions.unwrapArray(call.getTarget().getParameters(), Object.class)).length;
                      boolean _equals_4 = (_length_4 == 1);
                      if (_equals_4) {
                        _builder_5.append(",__");
                        FunctionInput _input_11 = call.getInput();
                        ArithmeticExpression _f_index_6 = ((FunctionInput) _input_11).getF_index();
                        String _name_20 = ((VariableLiteral) _f_index_6).getVariable().getName();
                        _builder_5.append(_name_20, "\t\t\t");
                      }
                    }
                    _builder_5.append("); //for the moment listen on 9090");
                    _builder_5.newLineIfNotEmpty();
                  }
                }
              }
              _builder_5.append("\t\t\t");
              _builder_5.append("Process __p;");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("try {");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("__p = __processBuilder.start();");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("Socket __socket_data = __server_");
              FunctionInput _input_12 = call.getInput();
              ArithmeticExpression _f_index_7 = ((FunctionInput) _input_12).getF_index();
              String _name_21 = ((VariableLiteral) _f_index_7).getVariable().getName();
              _builder_5.append(_name_21, "\t\t\t\t");
              _builder_5.append("_data.accept() ;");
              _builder_5.newLineIfNotEmpty();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("OutputStreamWriter __socket_data_output = new OutputStreamWriter(__socket_data.getOutputStream());");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("__socket_data_output.write(__");
              FunctionInput _input_13 = call.getInput();
              ArithmeticExpression _f_index_8 = ((FunctionInput) _input_13).getF_index();
              String _name_22 = ((VariableLiteral) _f_index_8).getVariable().getName();
              _builder_5.append(_name_22, "\t\t\t\t");
              _builder_5.append(");");
              _builder_5.newLineIfNotEmpty();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("__socket_data_output.flush();");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("__socket_data.close();");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("__p.waitFor();");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("if(__p.exitValue()!=0){");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t\t");
              _builder_5.append("System.out.println(\"Error in local execution of ");
              String _name_23 = call.getTarget().getName();
              _builder_5.append(_name_23, "\t\t\t\t\t");
              _builder_5.append("\");");
              _builder_5.newLineIfNotEmpty();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t\t");
              _builder_5.append("System.exit(1);");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("}");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("} catch (Exception e) {");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("\t");
              _builder_5.append("e.printStackTrace();");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("}");
              _builder_5.newLine();
              _builder_5.append("\t\t\t");
              _builder_5.append("return null;");
              _builder_5.newLine();
            } else {
              _builder_5.append("\t\t\t");
              _builder_5.append("Object __ret = ");
              String _name_24 = call.getTarget().getName();
              _builder_5.append(_name_24, "\t\t\t");
              _builder_5.append("(");
              {
                int _length_5 = ((Object[])Conversions.unwrapArray(call.getTarget().getParameters(), Object.class)).length;
                boolean _equals_5 = (_length_5 == 1);
                if (_equals_5) {
                  _builder_5.append("__");
                  FunctionInput _input_14 = call.getInput();
                  ArithmeticExpression _f_index_9 = ((FunctionInput) _input_14).getF_index();
                  String _name_25 = ((VariableLiteral) _f_index_9).getVariable().getName();
                  _builder_5.append(_name_25, "\t\t\t");
                }
              }
              _builder_5.append(");");
              _builder_5.newLineIfNotEmpty();
              {
                boolean _isIs_then_1 = call.isIs_then();
                if (_isIs_then_1) {
                  _builder_5.append("\t\t\t");
                  String _name_26 = call.getThen().getName();
                  _builder_5.append(_name_26, "\t\t\t");
                  _builder_5.append("();");
                  _builder_5.newLineIfNotEmpty();
                }
              }
              {
                if ((call.isIsAsync() && call.isIs_thenall())) {
                  _builder_5.append("\t\t\t");
                  _builder_5.append("if(__count.getAndIncrement()==__numThread){");
                  _builder_5.newLine();
                  _builder_5.append("\t\t\t");
                  _builder_5.append("\t");
                  _builder_5.append("__asyncTermination.put(\"Termination\");");
                  _builder_5.newLine();
                  _builder_5.append("\t\t\t");
                  _builder_5.append("}");
                  _builder_5.newLine();
                }
              }
              _builder_5.append("\t\t\t");
              _builder_5.append("return __ret;");
              _builder_5.newLine();
            }
          }
          _builder_5.append("\t\t");
          _builder_5.append("}");
          _builder_5.newLine();
          _builder_5.append("\t\t  \t\t\t");
          _builder_5.newLine();
          _builder_5.append("\t");
          _builder_5.append("});");
          _builder_5.newLine();
          _builder_5.append("\t");
          String _name_27 = call.getTarget().getName();
          _builder_5.append(_name_27, "\t");
          _builder_5.append("_");
          _builder_5.append(this.func_ID, "\t");
          _builder_5.append("_return.add(__f);");
          _builder_5.newLineIfNotEmpty();
          _builder_5.append("}");
          _builder_5.newLine();
          s = (_s_3 + _builder_5);
        } else {
          if ((((((FunctionInput) call.getInput()).getF_index() instanceof VariableLiteral) && 
            (!Objects.equal(this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()), 
              null))) && 
            this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()).equals("File"))) {
            String _s_4 = s;
            StringConcatenation _builder_6 = new StringConcatenation();
            _builder_6.append("final int __numThread = (Integer) __fly_environment.get(\"");
            String _name_28 = call.getEnvironment().getName();
            _builder_6.append(_name_28);
            _builder_6.append("\").get(\"nthread\");");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("ArrayList<StringBuilder> __temp_");
            ArithmeticExpression _f_index_10 = call.getInput().getF_index();
            String _name_29 = ((VariableLiteral) _f_index_10).getVariable().getName();
            _builder_6.append(_name_29);
            _builder_6.append(" = new ArrayList<StringBuilder>();");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("final ServerSocket __server_");
            FunctionInput _input_15 = call.getInput();
            ArithmeticExpression _f_index_11 = ((FunctionInput) _input_15).getF_index();
            String _name_30 = ((VariableLiteral) _f_index_11).getVariable().getName();
            _builder_6.append(_name_30);
            _builder_6.append("_data = new ServerSocket(9091,100);");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("int __temp_i_");
            ArithmeticExpression _f_index_12 = call.getInput().getF_index();
            String _name_31 = ((VariableLiteral) _f_index_12).getVariable().getName();
            _builder_6.append(_name_31);
            _builder_6.append(" = 0;");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("Scanner __scanner_");
            ArithmeticExpression _f_index_13 = call.getInput().getF_index();
            String _name_32 = ((VariableLiteral) _f_index_13).getVariable().getName();
            _builder_6.append(_name_32);
            _builder_6.append(" = new Scanner(");
            ArithmeticExpression _f_index_14 = call.getInput().getF_index();
            String _name_33 = ((VariableLiteral) _f_index_14).getVariable().getName();
            _builder_6.append(_name_33);
            _builder_6.append(");");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("while(__scanner_");
            ArithmeticExpression _f_index_15 = call.getInput().getF_index();
            String _name_34 = ((VariableLiteral) _f_index_15).getVariable().getName();
            _builder_6.append(_name_34);
            _builder_6.append(".hasNextLine()){");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t");
            _builder_6.append("String __tmp_line = __scanner_");
            ArithmeticExpression _f_index_16 = call.getInput().getF_index();
            String _name_35 = ((VariableLiteral) _f_index_16).getVariable().getName();
            _builder_6.append(_name_35, "\t");
            _builder_6.append(".nextLine();");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t");
            _builder_6.append("try{");
            _builder_6.newLine();
            _builder_6.append("\t\t");
            _builder_6.append("__temp_");
            ArithmeticExpression _f_index_17 = call.getInput().getF_index();
            String _name_36 = ((VariableLiteral) _f_index_17).getVariable().getName();
            _builder_6.append(_name_36, "\t\t");
            _builder_6.append(".get(__temp_i_");
            ArithmeticExpression _f_index_18 = call.getInput().getF_index();
            String _name_37 = ((VariableLiteral) _f_index_18).getVariable().getName();
            _builder_6.append(_name_37, "\t\t");
            _builder_6.append(" % __numThread).append(__tmp_line);");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t\t");
            _builder_6.append("__temp_");
            ArithmeticExpression _f_index_19 = call.getInput().getF_index();
            String _name_38 = ((VariableLiteral) _f_index_19).getVariable().getName();
            _builder_6.append(_name_38, "\t\t");
            _builder_6.append(".get(__temp_i_");
            ArithmeticExpression _f_index_20 = call.getInput().getF_index();
            String _name_39 = ((VariableLiteral) _f_index_20).getVariable().getName();
            _builder_6.append(_name_39, "\t\t");
            _builder_6.append(" % __numThread).append(\"\\n\");");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t");
            _builder_6.append("}catch(Exception e){");
            _builder_6.newLine();
            _builder_6.append("\t\t");
            _builder_6.append("__temp_");
            ArithmeticExpression _f_index_21 = call.getInput().getF_index();
            String _name_40 = ((VariableLiteral) _f_index_21).getVariable().getName();
            _builder_6.append(_name_40, "\t\t");
            _builder_6.append(".add(__temp_i_");
            ArithmeticExpression _f_index_22 = call.getInput().getF_index();
            String _name_41 = ((VariableLiteral) _f_index_22).getVariable().getName();
            _builder_6.append(_name_41, "\t\t");
            _builder_6.append(" % __numThread,new StringBuilder());");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t\t");
            _builder_6.append("__temp_");
            ArithmeticExpression _f_index_23 = call.getInput().getF_index();
            String _name_42 = ((VariableLiteral) _f_index_23).getVariable().getName();
            _builder_6.append(_name_42, "\t\t");
            _builder_6.append(".get(__temp_i_");
            ArithmeticExpression _f_index_24 = call.getInput().getF_index();
            String _name_43 = ((VariableLiteral) _f_index_24).getVariable().getName();
            _builder_6.append(_name_43, "\t\t");
            _builder_6.append(" % __numThread).append(__tmp_line);");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t\t");
            _builder_6.append("__temp_");
            ArithmeticExpression _f_index_25 = call.getInput().getF_index();
            String _name_44 = ((VariableLiteral) _f_index_25).getVariable().getName();
            _builder_6.append(_name_44, "\t\t");
            _builder_6.append(".get(__temp_i_");
            ArithmeticExpression _f_index_26 = call.getInput().getF_index();
            String _name_45 = ((VariableLiteral) _f_index_26).getVariable().getName();
            _builder_6.append(_name_45, "\t\t");
            _builder_6.append(" % __numThread).append(\"\\n\");");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t");
            _builder_6.append("}");
            _builder_6.newLine();
            _builder_6.append("\t");
            _builder_6.append("__temp_i_");
            ArithmeticExpression _f_index_27 = call.getInput().getF_index();
            String _name_46 = ((VariableLiteral) _f_index_27).getVariable().getName();
            _builder_6.append(_name_46, "\t");
            _builder_6.append("++;");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("}");
            _builder_6.newLine();
            _builder_6.append("for(int __i=0; __i<__numThread;__i++) {");
            _builder_6.newLine();
            _builder_6.append("    ");
            _builder_6.append("final int __index=__i;");
            _builder_6.newLine();
            {
              EObject _right_4 = call.getEnvironment().getRight();
              int _length_6 = ((Object[])Conversions.unwrapArray(((DeclarationObject) _right_4).getFeatures(), Object.class)).length;
              boolean _equals_6 = (_length_6 == 3);
              if (_equals_6) {
                _builder_6.append("    ");
                _builder_6.append("final String __");
                FunctionInput _input_16 = call.getInput();
                ArithmeticExpression _f_index_28 = ((FunctionInput) _input_16).getF_index();
                String _name_47 = ((VariableLiteral) _f_index_28).getVariable().getName();
                _builder_6.append(_name_47, "    ");
                _builder_6.append(" = __generateString(__temp_");
                ArithmeticExpression _f_index_29 = call.getInput().getF_index();
                String _name_48 = ((VariableLiteral) _f_index_29).getVariable().getName();
                _builder_6.append(_name_48, "    ");
                _builder_6.append(".get(__index).toString());");
                _builder_6.newLineIfNotEmpty();
              } else {
                _builder_6.append("    ");
                _builder_6.append("final File __");
                FunctionInput _input_17 = call.getInput();
                ArithmeticExpression _f_index_30 = ((FunctionInput) _input_17).getF_index();
                String _name_49 = ((VariableLiteral) _f_index_30).getVariable().getName();
                _builder_6.append(_name_49, "    ");
                _builder_6.append(" = new File(__temp_");
                ArithmeticExpression _f_index_31 = call.getInput().getF_index();
                String _name_50 = ((VariableLiteral) _f_index_31).getVariable().getName();
                _builder_6.append(_name_50, "    ");
                _builder_6.append(".get(__index).toString());");
                _builder_6.newLineIfNotEmpty();
              }
            }
            _builder_6.append("    ");
            _builder_6.append("Future<Object> __f = __thread_pool_");
            String _name_51 = call.getEnvironment().getName();
            _builder_6.append(_name_51, "    ");
            _builder_6.append(".submit(new Callable<Object>() {");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t\t");
            _builder_6.append("public Object call() throws Exception {");
            _builder_6.newLine();
            {
              EObject _right_5 = call.getEnvironment().getRight();
              int _length_7 = ((Object[])Conversions.unwrapArray(((DeclarationObject) _right_5).getFeatures(), Object.class)).length;
              boolean _equals_7 = (_length_7 == 3);
              if (_equals_7) {
                {
                  EObject _right_6 = call.getEnvironment().getRight();
                  boolean _contains_2 = ((DeclarationObject) _right_6).getFeatures().get(2).getValue_s().contains("python");
                  if (_contains_2) {
                    _builder_6.append("\t\t\t");
                    _builder_6.append("ProcessBuilder __processBuilder = new ProcessBuilder(\"python3\",new File(\"src-gen/");
                    String _name_52 = call.getTarget().getName();
                    _builder_6.append(_name_52, "\t\t\t");
                    _builder_6.append(".py\").getAbsolutePath()); //for the moment listen on 9090\t");
                    _builder_6.newLineIfNotEmpty();
                    _builder_6.append("\t\t\t");
                    _builder_6.append("__processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);");
                    _builder_6.newLine();
                  } else {
                    EObject _right_7 = call.getEnvironment().getRight();
                    boolean _contains_3 = ((DeclarationObject) _right_7).getFeatures().get(2).getValue_s().contains("nodejs");
                    if (_contains_3) {
                      _builder_6.append("\t\t\t");
                      _builder_6.append("ProcessBuilder __processBuilder = new ProcessBuilder(\"nodejs\",new File(\"src-gen/");
                      String _name_53 = call.getTarget().getName();
                      _builder_6.append(_name_53, "\t\t\t");
                      _builder_6.append(".js\").getAbsolutePath()); //for the moment listen on 9090");
                      _builder_6.newLineIfNotEmpty();
                      _builder_6.append("\t\t\t");
                      _builder_6.append("__processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);");
                      _builder_6.newLine();
                    }
                  }
                }
                _builder_6.append("\t\t\t");
                _builder_6.append("Process __p;");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("try {");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("__p = __processBuilder.start();");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("Socket __socket_data = __server_");
                FunctionInput _input_18 = call.getInput();
                ArithmeticExpression _f_index_32 = ((FunctionInput) _input_18).getF_index();
                String _name_54 = ((VariableLiteral) _f_index_32).getVariable().getName();
                _builder_6.append(_name_54, "\t\t\t\t");
                _builder_6.append("_data.accept() ;");
                _builder_6.newLineIfNotEmpty();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("OutputStreamWriter __socket_data_output = new OutputStreamWriter(__socket_data.getOutputStream());");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("__socket_data_output.write(__");
                FunctionInput _input_19 = call.getInput();
                ArithmeticExpression _f_index_33 = ((FunctionInput) _input_19).getF_index();
                String _name_55 = ((VariableLiteral) _f_index_33).getVariable().getName();
                _builder_6.append(_name_55, "\t\t\t\t");
                _builder_6.append(");");
                _builder_6.newLineIfNotEmpty();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("__socket_data_output.flush();");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("__socket_data.close();");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("__p.waitFor();");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("if(__p.exitValue()!=0){");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t\t");
                _builder_6.append("System.out.println(\"Error in local execution of ");
                String _name_56 = call.getTarget().getName();
                _builder_6.append(_name_56, "\t\t\t\t\t");
                _builder_6.append("\");");
                _builder_6.newLineIfNotEmpty();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t\t");
                _builder_6.append("System.exit(1);");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("}");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("} catch (Exception e) {");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("\t");
                _builder_6.append("e.printStackTrace();");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("}");
                _builder_6.newLine();
                _builder_6.append("\t\t\t");
                _builder_6.append("return null;");
                _builder_6.newLine();
              } else {
                _builder_6.append("\t\t\t");
                _builder_6.append("Object __ret = ");
                String _name_57 = call.getTarget().getName();
                _builder_6.append(_name_57, "\t\t\t");
                _builder_6.append("(");
                {
                  int _length_8 = ((Object[])Conversions.unwrapArray(call.getTarget().getParameters(), Object.class)).length;
                  boolean _equals_8 = (_length_8 == 1);
                  if (_equals_8) {
                    _builder_6.append("__");
                    FunctionInput _input_20 = call.getInput();
                    ArithmeticExpression _f_index_34 = ((FunctionInput) _input_20).getF_index();
                    String _name_58 = ((VariableLiteral) _f_index_34).getVariable().getName();
                    _builder_6.append(_name_58, "\t\t\t");
                  }
                }
                _builder_6.append(");");
                _builder_6.newLineIfNotEmpty();
                {
                  boolean _isIs_then_2 = call.isIs_then();
                  if (_isIs_then_2) {
                    _builder_6.append("\t\t\t");
                    String _name_59 = call.getThen().getName();
                    _builder_6.append(_name_59, "\t\t\t");
                    _builder_6.append("();");
                    _builder_6.newLineIfNotEmpty();
                  }
                }
                {
                  if ((call.isIsAsync() && call.isIs_thenall())) {
                    _builder_6.append("\t\t\t");
                    _builder_6.append("if(__count.getAndIncrement()==__numThread){");
                    _builder_6.newLine();
                    _builder_6.append("\t\t\t");
                    _builder_6.append("\t");
                    _builder_6.append("__asyncTermination.put(\"Termination\");");
                    _builder_6.newLine();
                    _builder_6.append("\t\t\t");
                    _builder_6.append("}");
                    _builder_6.newLine();
                  }
                }
                _builder_6.append("\t\t\t");
                _builder_6.append("return __ret;");
                _builder_6.newLine();
              }
            }
            _builder_6.append("\t\t");
            _builder_6.append("}");
            _builder_6.newLine();
            _builder_6.append("\t\t  \t\t\t");
            _builder_6.newLine();
            _builder_6.append("\t");
            _builder_6.append("});");
            _builder_6.newLine();
            _builder_6.append("\t");
            String _name_60 = call.getTarget().getName();
            _builder_6.append(_name_60, "\t");
            _builder_6.append("_");
            _builder_6.append(this.func_ID, "\t");
            _builder_6.append("_return.add(__f);");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("}");
            _builder_6.newLine();
            s = (_s_4 + _builder_6);
          } else {
            if ((call.isIsAsync() && call.isIs_thenall())) {
              String _s_5 = s;
              StringConcatenation _builder_7 = new StringConcatenation();
              _builder_7.append("final int __numThread = ");
              FunctionInput _input_21 = call.getInput();
              ArithmeticExpression _f_index_35 = ((FunctionInput) _input_21).getF_index();
              int _value2 = ((RangeLiteral) _f_index_35).getValue2();
              FunctionInput _input_22 = call.getInput();
              ArithmeticExpression _f_index_36 = ((FunctionInput) _input_22).getF_index();
              int _value1 = ((RangeLiteral) _f_index_36).getValue1();
              int _minus = (_value2 - _value1);
              _builder_7.append(_minus);
              _builder_7.append(" - 1;");
              _builder_7.newLineIfNotEmpty();
              s = (_s_5 + _builder_7);
            }
            Object _xifexpression = null;
            FunctionInput _input_23 = call.getInput();
            ArithmeticExpression _f_index_37 = ((FunctionInput) _input_23).getF_index();
            VariableDeclaration _value_l1 = ((RangeLiteral) _f_index_37).getValue_l1();
            boolean _notEquals = (!Objects.equal(_value_l1, null));
            if (_notEquals) {
              FunctionInput _input_24 = call.getInput();
              ArithmeticExpression _f_index_38 = ((FunctionInput) _input_24).getF_index();
              _xifexpression = ((RangeLiteral) _f_index_38).getValue_l1().getName();
            } else {
              FunctionInput _input_25 = call.getInput();
              ArithmeticExpression _f_index_39 = ((FunctionInput) _input_25).getF_index();
              _xifexpression = Integer.valueOf(((RangeLiteral) _f_index_39).getValue1());
            }
            Object value1 = ((Object)_xifexpression);
            Object _xifexpression_1 = null;
            FunctionInput _input_26 = call.getInput();
            ArithmeticExpression _f_index_40 = ((FunctionInput) _input_26).getF_index();
            VariableDeclaration _value_l2 = ((RangeLiteral) _f_index_40).getValue_l2();
            boolean _notEquals_1 = (!Objects.equal(_value_l2, null));
            if (_notEquals_1) {
              FunctionInput _input_27 = call.getInput();
              ArithmeticExpression _f_index_41 = ((FunctionInput) _input_27).getF_index();
              _xifexpression_1 = ((RangeLiteral) _f_index_41).getValue_l2().getName();
            } else {
              FunctionInput _input_28 = call.getInput();
              ArithmeticExpression _f_index_42 = ((FunctionInput) _input_28).getF_index();
              _xifexpression_1 = Integer.valueOf(((RangeLiteral) _f_index_42).getValue2());
            }
            Object value2 = ((Object)_xifexpression_1);
            String _s_6 = s;
            StringConcatenation _builder_8 = new StringConcatenation();
            _builder_8.append("for(int _i=");
            _builder_8.append(((Object)value1));
            _builder_8.append(";_i<");
            _builder_8.append(((Object)value2));
            _builder_8.append(";_i++){");
            _builder_8.newLineIfNotEmpty();
            _builder_8.append("\t");
            _builder_8.append("final int __i = _i;");
            _builder_8.newLine();
            _builder_8.append("\t");
            _builder_8.append("Future<Object> _f = __thread_pool_");
            String _name_61 = call.getEnvironment().getName();
            _builder_8.append(_name_61, "\t");
            _builder_8.append(".submit(new Callable<Object>(){");
            _builder_8.newLineIfNotEmpty();
            _builder_8.append("\t\t");
            _builder_8.newLine();
            _builder_8.append("\t\t");
            _builder_8.append("public Object call() throws Exception {");
            _builder_8.newLine();
            _builder_8.append("\t\t\t");
            _builder_8.append("// TODO Auto-generated method stub");
            _builder_8.newLine();
            _builder_8.append("\t\t\t");
            _builder_8.newLine();
            _builder_8.append("\t\t\t");
            _builder_8.append("Object __ret = ");
            String _name_62 = call.getTarget().getName();
            _builder_8.append(_name_62, "\t\t\t");
            _builder_8.append("(");
            {
              int _length_9 = ((Object[])Conversions.unwrapArray(call.getTarget().getParameters(), Object.class)).length;
              boolean _equals_9 = (_length_9 == 1);
              if (_equals_9) {
                _builder_8.append("__i");
              }
            }
            _builder_8.append(");");
            _builder_8.newLineIfNotEmpty();
            {
              boolean _isIs_then_3 = call.isIs_then();
              if (_isIs_then_3) {
                _builder_8.append("\t\t\t");
                String _name_63 = call.getThen().getName();
                _builder_8.append(_name_63, "\t\t\t");
                _builder_8.append("();");
                _builder_8.newLineIfNotEmpty();
              }
            }
            {
              if ((call.isIsAsync() && call.isIs_thenall())) {
                _builder_8.append("\t\t\t");
                _builder_8.append("if(__count.getAndIncrement()==__numThread){");
                _builder_8.newLine();
                _builder_8.append("\t\t\t");
                _builder_8.append("\t");
                _builder_8.append("__asyncTermination.put(\"Termination\");");
                _builder_8.newLine();
                _builder_8.append("\t\t\t");
                _builder_8.append("}");
                _builder_8.newLine();
              }
            }
            _builder_8.append("\t\t\t");
            _builder_8.append("return __ret;");
            _builder_8.newLine();
            _builder_8.append("\t\t");
            _builder_8.append("}");
            _builder_8.newLine();
            _builder_8.append("\t");
            _builder_8.append("});");
            _builder_8.newLine();
            _builder_8.append("\t");
            String _name_64 = call.getTarget().getName();
            _builder_8.append(_name_64, "\t");
            _builder_8.append("_");
            _builder_8.append(this.func_ID, "\t");
            _builder_8.append("_return.add(_f);");
            _builder_8.newLineIfNotEmpty();
            _builder_8.append("}");
            _builder_8.newLine();
            s = (_s_6 + _builder_8);
          }
        }
      }
      String _name_65 = call.getTarget().getName();
      String _plus = (_name_65 + "_");
      String _plus_1 = (_plus + Integer.valueOf(this.func_ID));
      String _plus_2 = (_plus_1 + "_return");
      this.last_func_result = _plus_2;
      boolean _isIsAsync = call.isIsAsync();
      boolean _not = (!_isIsAsync);
      if (_not) {
        String _s_7 = s;
        StringConcatenation _builder_9 = new StringConcatenation();
        _builder_9.append("for(Future _f : ");
        String _name_66 = call.getTarget().getName();
        _builder_9.append(_name_66);
        _builder_9.append("_");
        _builder_9.append(this.func_ID);
        _builder_9.append("_return){");
        _builder_9.newLineIfNotEmpty();
        _builder_9.append("\t");
        _builder_9.append("try{");
        _builder_9.newLine();
        _builder_9.append("\t\t");
        _builder_9.append("_f.get();");
        _builder_9.newLine();
        _builder_9.append("\t");
        _builder_9.append("} catch(Exception e){");
        _builder_9.newLine();
        _builder_9.append("\t\t");
        _builder_9.append("e.printStackTrace();");
        _builder_9.newLine();
        _builder_9.append("\t");
        _builder_9.append("}");
        _builder_9.newLine();
        _builder_9.append("}");
        _builder_9.newLine();
        _builder_9.newLine();
        {
          boolean _isIs_thenall = call.isIs_thenall();
          if (_isIs_thenall) {
            String _name_67 = call.getThenall().getName();
            _builder_9.append(_name_67);
            _builder_9.append("();");
            _builder_9.newLineIfNotEmpty();
          }
        }
        s = (_s_7 + _builder_9);
      }
      if ((call.isIsAsync() && call.isIs_thenall())) {
        String _s_8 = s;
        StringConcatenation _builder_10 = new StringConcatenation();
        _builder_10.append("Future<Object> __call = __thread_pool_");
        String _name_68 = call.getEnvironment().getName();
        _builder_10.append(_name_68);
        _builder_10.append(".submit(new Callable<Object>(){");
        _builder_10.newLineIfNotEmpty();
        _builder_10.append("\t\t\t\t\t\t");
        _builder_10.newLine();
        _builder_10.append("\t\t");
        _builder_10.append("public Object call() throws Exception {");
        _builder_10.newLine();
        _builder_10.append("\t\t\t");
        _builder_10.append("//TODO Auto-generated method stub");
        _builder_10.newLine();
        _builder_10.append("\t\t\t\t\t");
        _builder_10.append("__asyncTermination.take();\t");
        _builder_10.newLine();
        _builder_10.append("\t\t\t\t\t");
        String _name_69 = call.getThenall().getName();
        _builder_10.append(_name_69, "\t\t\t\t\t");
        _builder_10.append("();");
        _builder_10.newLineIfNotEmpty();
        _builder_10.append("\t\t\t");
        _builder_10.append("return null;");
        _builder_10.newLine();
        _builder_10.append("\t\t");
        _builder_10.append("}");
        _builder_10.newLine();
        _builder_10.append("\t");
        _builder_10.append("});");
        _builder_10.newLine();
        _builder_10.append("\t");
        _builder_10.newLine();
        s = (_s_8 + _builder_10);
      }
    } else {
      int par_id = 0;
      StringConcatenation _builder_11 = new StringConcatenation();
      String par_1 = _builder_11.toString();
      StringConcatenation _builder_12 = new StringConcatenation();
      String par_2 = _builder_12.toString();
      EList<ArithmeticExpression> _expressions = call.getInput().getExpressions();
      for (final ArithmeticExpression el : _expressions) {
        {
          String _par_1 = par_1;
          StringConcatenation _builder_13 = new StringConcatenation();
          _builder_13.append("final Object _par_");
          _builder_13.append(par_id);
          _builder_13.append(" = ");
          String _generateArithmeticExpression_4 = this.generateArithmeticExpression(el, scope);
          _builder_13.append(_generateArithmeticExpression_4);
          _builder_13.append(";");
          _builder_13.newLineIfNotEmpty();
          par_1 = (_par_1 + _builder_13);
          String _par_2 = par_2;
          StringConcatenation _builder_14 = new StringConcatenation();
          _builder_14.append(" ");
          _builder_14.append("_par_");
          _builder_14.append(par_id, " ");
          _builder_14.append("\t");
          par_2 = (_par_2 + _builder_14);
          ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(call.getInput().getExpressions());
          boolean _notEquals_2 = (!Objects.equal(el, _last));
          if (_notEquals_2) {
            String _par_2_1 = par_2;
            StringConcatenation _builder_15 = new StringConcatenation();
            _builder_15.append(",");
            par_2 = (_par_2_1 + _builder_15);
          }
          par_id++;
        }
      }
      String _s_9 = s;
      StringConcatenation _builder_13 = new StringConcatenation();
      _builder_13.append(par_1);
      _builder_13.newLineIfNotEmpty();
      _builder_13.append("Future<Object> _f_");
      _builder_13.append(this.func_ID);
      _builder_13.append(" = __thread_pool_");
      String _name_70 = call.getEnvironment().getName();
      _builder_13.append(_name_70);
      _builder_13.append(".submit(new Callable<Object>(){");
      _builder_13.newLineIfNotEmpty();
      _builder_13.append("\t");
      _builder_13.newLine();
      _builder_13.append("\t");
      _builder_13.append("public Object call() throws Exception {");
      _builder_13.newLine();
      _builder_13.append("\t\t");
      _builder_13.append("// TODO Auto-generated method stub");
      _builder_13.newLine();
      _builder_13.append("\t\t\t\t\t\t\t");
      _builder_13.newLine();
      _builder_13.append("\t\t");
      _builder_13.append("return ");
      String _name_71 = call.getTarget().getName();
      _builder_13.append(_name_71, "\t\t");
      _builder_13.append("(");
      _builder_13.append(par_2, "\t\t");
      _builder_13.append(");");
      _builder_13.newLineIfNotEmpty();
      _builder_13.append("\t");
      _builder_13.append("}");
      _builder_13.newLine();
      _builder_13.append("});");
      _builder_13.newLine();
      s = (_s_9 + _builder_13);
      boolean _isIsAsync_1 = call.isIsAsync();
      boolean _not_1 = (!_isIsAsync_1);
      if (_not_1) {
        String _s_10 = s;
        StringConcatenation _builder_14 = new StringConcatenation();
        _builder_14.append("try{");
        _builder_14.newLine();
        _builder_14.append("\t");
        _builder_14.append("_f_");
        _builder_14.append(this.func_ID, "\t");
        _builder_14.append(".get();");
        _builder_14.newLineIfNotEmpty();
        {
          boolean _isIs_then_4 = call.isIs_then();
          if (_isIs_then_4) {
            _builder_14.append("\t");
            String _name_72 = call.getThen().getName();
            _builder_14.append(_name_72, "\t");
            _builder_14.append("();");
            _builder_14.newLineIfNotEmpty();
          }
        }
        _builder_14.append("} catch(Exception e){");
        _builder_14.newLine();
        _builder_14.append("\t");
        _builder_14.append("e.printStackTrace();");
        _builder_14.newLine();
        _builder_14.append("}");
        _builder_14.newLine();
        s = (_s_10 + _builder_14);
      }
    }
    this.func_ID++;
    return s;
  }
  
  public String generateAWSFlyFunctionCall(final FlyFunctionCall call, final String scope) {
    boolean async = call.isIsAsync();
    String cred = call.getEnvironment().getName();
    EObject _right = call.getEnvironment().getRight();
    DeclarationFeature _get = ((DeclarationObject) _right).getFeatures().get(3);
    String region = ((DeclarationFeature) _get).getValue_s();
    String function = call.getTarget().getName();
    StringConcatenation _builder = new StringConcatenation();
    String ret = _builder.toString();
    boolean _isIs_for_index = call.getInput().isIs_for_index();
    if (_isIs_for_index) {
      if ((!async)) {
        String _ret = ret;
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("__sqs.createQueue(new CreateQueueRequest(\"__syncTermination_");
        String _name = call.getTarget().getName();
        _builder_1.append(_name);
        _builder_1.append("_\"+__id_execution));");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("ArrayList<Future<Object>> __sync_list_");
        String _name_1 = call.getTarget().getName();
        _builder_1.append(_name_1);
        _builder_1.append("_");
        _builder_1.append(this.func_ID);
        _builder_1.append(" = new ArrayList<Future<Object>>();");
        _builder_1.newLineIfNotEmpty();
        ret = (_ret + _builder_1);
      }
      ArithmeticExpression _f_index = call.getInput().getF_index();
      if ((_f_index instanceof RangeLiteral)) {
        String _ret_1 = ret;
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("int __num_proc_");
        String _name_2 = call.getTarget().getName();
        _builder_2.append(_name_2);
        _builder_2.append("_");
        _builder_2.append(this.func_ID);
        _builder_2.append("= Math.min( (int) __fly_environment.get(\"");
        _builder_2.append(cred);
        _builder_2.append("\").get(\"nthread\"), ");
        ArithmeticExpression _f_index_1 = call.getInput().getF_index();
        int _value2 = ((RangeLiteral) _f_index_1).getValue2();
        ArithmeticExpression _f_index_2 = call.getInput().getF_index();
        int _value1 = ((RangeLiteral) _f_index_2).getValue1();
        int _minus = (_value2 - _value1);
        _builder_2.append(_minus);
        _builder_2.append(");");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("ArrayList<StringBuilder> __temp_Range_");
        _builder_2.append(this.func_ID);
        _builder_2.append(" = new ArrayList<StringBuilder>();");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("int __temp_i_Range_");
        _builder_2.append(this.func_ID);
        _builder_2.append(" = 0;");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("for (int ___i=");
        ArithmeticExpression _f_index_3 = call.getInput().getF_index();
        int _value1_1 = ((RangeLiteral) _f_index_3).getValue1();
        _builder_2.append(_value1_1);
        _builder_2.append(";___i < ");
        ArithmeticExpression _f_index_4 = call.getInput().getF_index();
        int _value2_1 = ((RangeLiteral) _f_index_4).getValue2();
        _builder_2.append(_value2_1);
        _builder_2.append(";___i++){");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append("try{");
        _builder_2.newLine();
        _builder_2.append("\t\t");
        _builder_2.append("__temp_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(".get(__temp_i_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(" % __num_proc_");
        String _name_3 = call.getTarget().getName();
        _builder_2.append(_name_3, "\t\t");
        _builder_2.append("_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(").append(String.valueOf(___i));");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t\t");
        _builder_2.append("__temp_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(".get(__temp_i_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(" % __num_proc_");
        String _name_4 = call.getTarget().getName();
        _builder_2.append(_name_4, "\t\t");
        _builder_2.append("_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(").append(\"\\n\");");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append("}catch(Exception e){");
        _builder_2.newLine();
        _builder_2.append("\t\t");
        _builder_2.append("__temp_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(".add(__temp_i_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(" % __num_proc_");
        String _name_5 = call.getTarget().getName();
        _builder_2.append(_name_5, "\t\t");
        _builder_2.append("_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(",new StringBuilder());");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t\t");
        _builder_2.append("__temp_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(".get(__temp_i_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(" % __num_proc_");
        String _name_6 = call.getTarget().getName();
        _builder_2.append(_name_6, "\t\t");
        _builder_2.append("_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(").append(String.valueOf(___i));");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t\t");
        _builder_2.append("__temp_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(".get(__temp_i_Range_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(" % __num_proc_");
        String _name_7 = call.getTarget().getName();
        _builder_2.append(_name_7, "\t\t");
        _builder_2.append("_");
        _builder_2.append(this.func_ID, "\t\t");
        _builder_2.append(").append(\"\\n\");");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append("}");
        _builder_2.newLine();
        _builder_2.append("\t");
        _builder_2.append("__temp_i_Range_");
        _builder_2.append(this.func_ID, "\t");
        _builder_2.append("++;");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("}");
        _builder_2.newLine();
        _builder_2.append("for(int ___i=0;___i<__num_proc_");
        String _name_8 = call.getTarget().getName();
        _builder_2.append(_name_8);
        _builder_2.append("_");
        _builder_2.append(this.func_ID);
        _builder_2.append(";___i++){");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append("final String __s_temp = __generateString(__temp_Range_");
        _builder_2.append(this.func_ID, "\t");
        _builder_2.append(".get(___i).toString());");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append("Future<Object> f = __thread_pool_");
        String _name_9 = call.getEnvironment().getName();
        _builder_2.append(_name_9, "\t");
        _builder_2.append(".submit(new Callable<Object>() {");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t\t");
        _builder_2.append("@Override");
        _builder_2.newLine();
        _builder_2.append("\t\t");
        _builder_2.append("public Object call() throws Exception {");
        _builder_2.newLine();
        _builder_2.append("\t\t\t");
        _builder_2.append("// TODO Auto-generated method stub");
        _builder_2.newLine();
        _builder_2.append("\t\t\t");
        _builder_2.append("__lambda.invoke(new InvokeRequest()");
        _builder_2.newLine();
        _builder_2.append("\t\t\t\t");
        _builder_2.append(".withInvocationType(\"Event\")");
        _builder_2.newLine();
        _builder_2.append("\t\t\t\t");
        _builder_2.append(".withFunctionName(\"");
        String _name_10 = call.getTarget().getName();
        _builder_2.append(_name_10, "\t\t\t\t");
        _builder_2.append("_\"+__id_execution)");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t\t\t\t");
        _builder_2.append(".withPayload(__s_temp));");
        _builder_2.newLine();
        _builder_2.append("\t\t\t");
        _builder_2.append("return null;");
        _builder_2.newLine();
        _builder_2.append("\t\t");
        _builder_2.append("}");
        _builder_2.newLine();
        _builder_2.append("\t");
        _builder_2.append("});");
        _builder_2.newLine();
        {
          if ((!async)) {
            _builder_2.append("__sync_list_");
            String _name_11 = call.getTarget().getName();
            _builder_2.append(_name_11);
            _builder_2.append("_");
            _builder_2.append(this.func_ID);
            _builder_2.append(".add(f);");
            _builder_2.newLineIfNotEmpty();
          }
        }
        _builder_2.append("}");
        _builder_2.newLine();
        ret = (_ret_1 + _builder_2);
      } else {
        if (((call.getInput().getF_index() instanceof VariableLiteral) && 
          this.typeSystem.get(scope).get(((VariableLiteral) call.getInput().getF_index()).getVariable().getName()).equals("Table"))) {
          String _ret_2 = ret;
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("int __num_row_");
          String _name_12 = call.getTarget().getName();
          _builder_3.append(_name_12);
          _builder_3.append("_");
          _builder_3.append(this.func_ID);
          _builder_3.append("=");
          ArithmeticExpression _f_index_5 = call.getInput().getF_index();
          String _name_13 = ((VariableLiteral) _f_index_5).getVariable().getName();
          _builder_3.append(_name_13);
          _builder_3.append(".rowCount();");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("int __initial_");
          String _name_14 = call.getTarget().getName();
          _builder_3.append(_name_14);
          _builder_3.append("_");
          _builder_3.append(this.func_ID);
          _builder_3.append("=0;");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("int __num_proc_");
          String _name_15 = call.getTarget().getName();
          _builder_3.append(_name_15);
          _builder_3.append("_");
          _builder_3.append(this.func_ID);
          _builder_3.append(" = Math.min((int) __fly_environment.get(\"");
          _builder_3.append(cred);
          _builder_3.append("\").get(\"nthread\"),__num_row_");
          String _name_16 = call.getTarget().getName();
          _builder_3.append(_name_16);
          _builder_3.append("_");
          _builder_3.append(this.func_ID);
          _builder_3.append(");");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("ArrayList<Integer> __splits_");
          String _name_17 = call.getTarget().getName();
          _builder_3.append(_name_17);
          _builder_3.append("_");
          _builder_3.append(this.func_ID);
          _builder_3.append(" = new ArrayList<Integer>();");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("for(int __i=0;__i<__num_proc_");
          String _name_18 = call.getTarget().getName();
          _builder_3.append(_name_18);
          _builder_3.append("_");
          _builder_3.append(this.func_ID);
          _builder_3.append(";__i++) {");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t");
          _builder_3.append("if(__i<(__num_row_");
          String _name_19 = call.getTarget().getName();
          _builder_3.append(_name_19, "\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t");
          _builder_3.append("%__num_proc_");
          String _name_20 = call.getTarget().getName();
          _builder_3.append(_name_20, "\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t");
          _builder_3.append(")) {");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t\t");
          _builder_3.append("__splits_");
          String _name_21 = call.getTarget().getName();
          _builder_3.append(_name_21, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append(".add( __initial_");
          String _name_22 = call.getTarget().getName();
          _builder_3.append(_name_22, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append("+((__num_row_");
          String _name_23 = call.getTarget().getName();
          _builder_3.append(_name_23, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append("/__num_proc_");
          String _name_24 = call.getTarget().getName();
          _builder_3.append(_name_24, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append(")+1));");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t\t");
          _builder_3.append("__initial_");
          String _name_25 = call.getTarget().getName();
          _builder_3.append(_name_25, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append("+=(__num_row_");
          String _name_26 = call.getTarget().getName();
          _builder_3.append(_name_26, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append("/__num_proc_");
          String _name_27 = call.getTarget().getName();
          _builder_3.append(_name_27, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append(")+1;");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t");
          _builder_3.append("}else{");
          _builder_3.newLine();
          _builder_3.append("\t\t");
          _builder_3.append("__splits_");
          String _name_28 = call.getTarget().getName();
          _builder_3.append(_name_28, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append(".add( __initial_");
          String _name_29 = call.getTarget().getName();
          _builder_3.append(_name_29, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append("+((__num_row_");
          String _name_30 = call.getTarget().getName();
          _builder_3.append(_name_30, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append("/__num_proc_");
          String _name_31 = call.getTarget().getName();
          _builder_3.append(_name_31, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append(")));");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t\t");
          _builder_3.append("__initial+=(__num_row_");
          String _name_32 = call.getTarget().getName();
          _builder_3.append(_name_32, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append("/__num_proc_");
          String _name_33 = call.getTarget().getName();
          _builder_3.append(_name_33, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append(");");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.newLine();
          _builder_3.append("for(int __i=0;__i<__num_proc_");
          String _name_34 = call.getTarget().getName();
          _builder_3.append(_name_34);
          _builder_3.append("_");
          _builder_3.append(this.func_ID);
          _builder_3.append(";__i++){");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t");
          _builder_3.append("final int __start;");
          _builder_3.newLine();
          _builder_3.append("\t");
          _builder_3.append("final int __end;");
          _builder_3.newLine();
          _builder_3.append("\t");
          _builder_3.append("if(__i==0) {");
          _builder_3.newLine();
          _builder_3.append("\t\t");
          _builder_3.append("__start=0;");
          _builder_3.newLine();
          _builder_3.append("\t");
          _builder_3.append("}else{");
          _builder_3.newLine();
          _builder_3.append("\t\t");
          _builder_3.append("__start=__splits_");
          String _name_35 = call.getTarget().getName();
          _builder_3.append(_name_35, "\t\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t\t");
          _builder_3.append(".get(__i-1);");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("\t");
          _builder_3.append("__end = __splits_");
          String _name_36 = call.getTarget().getName();
          _builder_3.append(_name_36, "\t");
          _builder_3.append("_");
          _builder_3.append(this.func_ID, "\t");
          _builder_3.append(".get(__i);");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t");
          _builder_3.append("Future<Object> f = __thread_pool_");
          String _name_37 = call.getEnvironment().getName();
          _builder_3.append(_name_37, "\t");
          _builder_3.append(".submit(new Callable<Object>() {");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t\t");
          _builder_3.append("@Override");
          _builder_3.newLine();
          _builder_3.append("\t\t");
          _builder_3.append("public Object call() throws Exception {");
          _builder_3.newLine();
          _builder_3.append("\t\t\t");
          _builder_3.append("// TODO Auto-generated method stub");
          _builder_3.newLine();
          _builder_3.append("\t\t\t");
          _builder_3.append("//creare la stringa ");
          _builder_3.newLine();
          _builder_3.append("\t\t\t");
          _builder_3.append("String __s_temp= __generateString( ");
          ArithmeticExpression _f_index_6 = call.getInput().getF_index();
          String _name_38 = ((VariableLiteral) _f_index_6).getVariable().getName();
          _builder_3.append(_name_38, "\t\t\t");
          _builder_3.append(".where(Selection.withRange(__start, __end)));");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t\t\t");
          _builder_3.append("__lambda.invoke(new InvokeRequest()");
          _builder_3.newLine();
          _builder_3.append("\t\t\t\t");
          _builder_3.append(".withInvocationType(\"Event\")");
          _builder_3.newLine();
          _builder_3.append("\t\t\t\t");
          _builder_3.append(".withFunctionName(\"");
          String _name_39 = call.getTarget().getName();
          _builder_3.append(_name_39, "\t\t\t\t");
          _builder_3.append("_\"+__id_execution)");
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("\t\t\t\t");
          _builder_3.append(".withPayload(__s_temp));");
          _builder_3.newLine();
          _builder_3.append("\t\t\t");
          _builder_3.append("return null;");
          _builder_3.newLine();
          _builder_3.append("\t\t");
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("\t");
          _builder_3.append("});");
          _builder_3.newLine();
          {
            if ((!async)) {
              _builder_3.append("__sync_list_");
              String _name_40 = call.getTarget().getName();
              _builder_3.append(_name_40);
              _builder_3.append(".add(f);");
              _builder_3.newLineIfNotEmpty();
            }
          }
          _builder_3.append("}");
          _builder_3.newLine();
          ret = (_ret_2 + _builder_3);
        } else {
          if (((call.getInput().getF_index() instanceof VariableLiteral) && 
            this.typeSystem.get(scope).get(((VariableLiteral) call.getInput().getF_index()).getVariable().getName()).equals("File"))) {
            String _ret_3 = ret;
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("int __num_proc_");
            String _name_41 = call.getTarget().getName();
            _builder_4.append(_name_41);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append("= (int) __fly_environment.get(\"");
            _builder_4.append(cred);
            _builder_4.append("\").get(\"nthread\");");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("ArrayList<StringBuilder> __temp_");
            ArithmeticExpression _f_index_7 = call.getInput().getF_index();
            String _name_42 = ((VariableLiteral) _f_index_7).getVariable().getName();
            _builder_4.append(_name_42);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append(" = new ArrayList<StringBuilder>();");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("int __temp_i_");
            ArithmeticExpression _f_index_8 = call.getInput().getF_index();
            String _name_43 = ((VariableLiteral) _f_index_8).getVariable().getName();
            _builder_4.append(_name_43);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append(" = 0;");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("Scanner __scanner_");
            ArithmeticExpression _f_index_9 = call.getInput().getF_index();
            String _name_44 = ((VariableLiteral) _f_index_9).getVariable().getName();
            _builder_4.append(_name_44);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append(" = new Scanner(");
            ArithmeticExpression _f_index_10 = call.getInput().getF_index();
            String _name_45 = ((VariableLiteral) _f_index_10).getVariable().getName();
            _builder_4.append(_name_45);
            _builder_4.append(");");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("while(__scanner_");
            ArithmeticExpression _f_index_11 = call.getInput().getF_index();
            String _name_46 = ((VariableLiteral) _f_index_11).getVariable().getName();
            _builder_4.append(_name_46);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append(".hasNextLine()){");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t");
            _builder_4.append("String __tmp_line = __scanner_");
            ArithmeticExpression _f_index_12 = call.getInput().getF_index();
            String _name_47 = ((VariableLiteral) _f_index_12).getVariable().getName();
            _builder_4.append(_name_47, "\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t");
            _builder_4.append(".nextLine();");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t");
            _builder_4.append("try{");
            _builder_4.newLine();
            _builder_4.append("\t\t");
            _builder_4.append("__temp_");
            ArithmeticExpression _f_index_13 = call.getInput().getF_index();
            String _name_48 = ((VariableLiteral) _f_index_13).getVariable().getName();
            _builder_4.append(_name_48, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(".get(__temp_i_");
            ArithmeticExpression _f_index_14 = call.getInput().getF_index();
            String _name_49 = ((VariableLiteral) _f_index_14).getVariable().getName();
            _builder_4.append(_name_49, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(" % __num_proc_");
            String _name_50 = call.getTarget().getName();
            _builder_4.append(_name_50, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(").append(__tmp_line);");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t\t");
            _builder_4.append("__temp_");
            ArithmeticExpression _f_index_15 = call.getInput().getF_index();
            String _name_51 = ((VariableLiteral) _f_index_15).getVariable().getName();
            _builder_4.append(_name_51, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(".get(__temp_i_");
            ArithmeticExpression _f_index_16 = call.getInput().getF_index();
            String _name_52 = ((VariableLiteral) _f_index_16).getVariable().getName();
            _builder_4.append(_name_52, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(" % __num_proc_");
            String _name_53 = call.getTarget().getName();
            _builder_4.append(_name_53, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(").append(\"\\n\");");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t");
            _builder_4.append("}catch(Exception e){");
            _builder_4.newLine();
            _builder_4.append("\t\t");
            _builder_4.append("__temp_");
            ArithmeticExpression _f_index_17 = call.getInput().getF_index();
            String _name_54 = ((VariableLiteral) _f_index_17).getVariable().getName();
            _builder_4.append(_name_54, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(".add(__temp_i_");
            ArithmeticExpression _f_index_18 = call.getInput().getF_index();
            String _name_55 = ((VariableLiteral) _f_index_18).getVariable().getName();
            _builder_4.append(_name_55, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(" % __num_proc_");
            String _name_56 = call.getTarget().getName();
            _builder_4.append(_name_56, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(",new StringBuilder());");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t\t");
            _builder_4.append("__temp_");
            ArithmeticExpression _f_index_19 = call.getInput().getF_index();
            String _name_57 = ((VariableLiteral) _f_index_19).getVariable().getName();
            _builder_4.append(_name_57, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(".get(__temp_i_");
            ArithmeticExpression _f_index_20 = call.getInput().getF_index();
            String _name_58 = ((VariableLiteral) _f_index_20).getVariable().getName();
            _builder_4.append(_name_58, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(" % __num_proc_");
            String _name_59 = call.getTarget().getName();
            _builder_4.append(_name_59, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(").append(__tmp_line);");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t\t");
            _builder_4.append("__temp_");
            ArithmeticExpression _f_index_21 = call.getInput().getF_index();
            String _name_60 = ((VariableLiteral) _f_index_21).getVariable().getName();
            _builder_4.append(_name_60, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(".get(__temp_i_");
            ArithmeticExpression _f_index_22 = call.getInput().getF_index();
            String _name_61 = ((VariableLiteral) _f_index_22).getVariable().getName();
            _builder_4.append(_name_61, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(" % __num_proc_");
            String _name_62 = call.getTarget().getName();
            _builder_4.append(_name_62, "\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t");
            _builder_4.append(").append(\"\\n\");");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t");
            _builder_4.append("}");
            _builder_4.newLine();
            _builder_4.append("\t");
            _builder_4.append("__temp_i_");
            ArithmeticExpression _f_index_23 = call.getInput().getF_index();
            String _name_63 = ((VariableLiteral) _f_index_23).getVariable().getName();
            _builder_4.append(_name_63, "\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t");
            _builder_4.append("++;");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("}");
            _builder_4.newLine();
            _builder_4.append("__scanner_");
            ArithmeticExpression _f_index_24 = call.getInput().getF_index();
            String _name_64 = ((VariableLiteral) _f_index_24).getVariable().getName();
            _builder_4.append(_name_64);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append(".close();");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("__num_proc_");
            String _name_65 = call.getTarget().getName();
            _builder_4.append(_name_65);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append(" = Math.min(__num_proc_");
            String _name_66 = call.getTarget().getName();
            _builder_4.append(_name_66);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append(",__temp_i_");
            ArithmeticExpression _f_index_25 = call.getInput().getF_index();
            String _name_67 = ((VariableLiteral) _f_index_25).getVariable().getName();
            _builder_4.append(_name_67);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append(");");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("for(int __i=0;__i<__num_proc_");
            String _name_68 = call.getTarget().getName();
            _builder_4.append(_name_68);
            _builder_4.append("_");
            _builder_4.append(this.func_ID);
            _builder_4.append(";__i++){");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t");
            _builder_4.append("final int __i_f = __i;");
            _builder_4.newLine();
            _builder_4.append("\t");
            _builder_4.append("Future<Object> f = __thread_pool_");
            String _name_69 = call.getEnvironment().getName();
            _builder_4.append(_name_69, "\t");
            _builder_4.append(".submit(new Callable<Object>() {");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t\t");
            _builder_4.append("@Override");
            _builder_4.newLine();
            _builder_4.append("\t\t");
            _builder_4.append("public Object call() throws Exception {");
            _builder_4.newLine();
            _builder_4.append("\t\t\t");
            _builder_4.append("// TODO Auto-generated method stub");
            _builder_4.newLine();
            _builder_4.append("\t\t\t");
            _builder_4.append("//creare la stringa ");
            _builder_4.newLine();
            _builder_4.append("\t\t\t");
            _builder_4.append("String __s_temp= __generateString(__temp_");
            ArithmeticExpression _f_index_26 = call.getInput().getF_index();
            String _name_70 = ((VariableLiteral) _f_index_26).getVariable().getName();
            _builder_4.append(_name_70, "\t\t\t");
            _builder_4.append("_");
            _builder_4.append(this.func_ID, "\t\t\t");
            _builder_4.append(".get(__i_f).toString());");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t\t\t");
            _builder_4.append("__lambda.invoke(new InvokeRequest()");
            _builder_4.newLine();
            _builder_4.append("\t\t\t\t");
            _builder_4.append(".withInvocationType(\"Event\") ");
            _builder_4.newLine();
            _builder_4.append("\t\t\t\t");
            _builder_4.append(".withFunctionName(\"");
            String _name_71 = call.getTarget().getName();
            _builder_4.append(_name_71, "\t\t\t\t");
            _builder_4.append("_\"+__id_execution)");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("\t\t\t\t");
            _builder_4.append(".withPayload(__s_temp));");
            _builder_4.newLine();
            _builder_4.append("\t\t\t");
            _builder_4.append("return null;");
            _builder_4.newLine();
            _builder_4.append("\t\t");
            _builder_4.append("}");
            _builder_4.newLine();
            _builder_4.append("\t");
            _builder_4.append("});");
            _builder_4.newLine();
            {
              if ((!async)) {
                _builder_4.append("__sync_list_");
                String _name_72 = call.getTarget().getName();
                _builder_4.append(_name_72);
                _builder_4.append("_");
                _builder_4.append(this.func_ID);
                _builder_4.append(".add(f);");
                _builder_4.newLineIfNotEmpty();
              }
            }
            _builder_4.append("}");
            _builder_4.newLine();
            ret = (_ret_3 + _builder_4);
          }
        }
      }
    }
    if ((!async)) {
      String _ret_4 = ret;
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("for (Future<Object> f: __sync_list_");
      String _name_73 = call.getTarget().getName();
      _builder_5.append(_name_73);
      _builder_5.append("_");
      _builder_5.append(this.func_ID);
      _builder_5.append("){");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t");
      _builder_5.append("try {");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("f.get();");
      _builder_5.newLine();
      _builder_5.append("\t");
      _builder_5.append("} catch (InterruptedException e) {");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("// TODO Auto-generated catch block");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("e.printStackTrace();");
      _builder_5.newLine();
      _builder_5.append("\t");
      _builder_5.append("} catch (ExecutionException e) {");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("// TODO Auto-generated catch block");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("e.printStackTrace();");
      _builder_5.newLine();
      _builder_5.append("\t");
      _builder_5.append("}");
      _builder_5.newLine();
      _builder_5.append("}");
      _builder_5.newLine();
      _builder_5.newLine();
      _builder_5.append("int __messagges_");
      String _name_74 = call.getTarget().getName();
      _builder_5.append(_name_74);
      _builder_5.append("_");
      _builder_5.append(this.func_ID);
      _builder_5.append(" = 0;");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("String __queue_url___syncTermination_");
      String _name_75 = call.getTarget().getName();
      _builder_5.append(_name_75);
      _builder_5.append("_");
      _builder_5.append(this.func_ID);
      _builder_5.append(" =\t__sqs.getQueueUrl(\"__syncTermination_");
      String _name_76 = call.getTarget().getName();
      _builder_5.append(_name_76);
      _builder_5.append("_\"+__id_execution).getQueueUrl();");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("while(__messagges_");
      String _name_77 = call.getTarget().getName();
      _builder_5.append(_name_77);
      _builder_5.append("_");
      _builder_5.append(this.func_ID);
      _builder_5.append("!=__num_proc_");
      String _name_78 = call.getTarget().getName();
      _builder_5.append(_name_78);
      _builder_5.append("_");
      _builder_5.append(this.func_ID);
      _builder_5.append(") {");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t");
      _builder_5.append("ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__queue_url___syncTermination_");
      String _name_79 = call.getTarget().getName();
      _builder_5.append(_name_79, "\t");
      _builder_5.append("_");
      _builder_5.append(this.func_ID, "\t");
      _builder_5.append(").");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t\t");
      _builder_5.append("withWaitTimeSeconds(1).withMaxNumberOfMessages(10);");
      _builder_5.newLine();
      _builder_5.append("\t");
      _builder_5.append("ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);");
      _builder_5.newLine();
      _builder_5.append("\t");
      _builder_5.append("for(Message msg : __res.getMessages()) { ");
      _builder_5.newLine();
      _builder_5.append("\t\t");
      _builder_5.append("__messagges_");
      String _name_80 = call.getTarget().getName();
      _builder_5.append(_name_80, "\t\t");
      _builder_5.append("_");
      _builder_5.append(this.func_ID, "\t\t");
      _builder_5.append("++;");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t\t");
      _builder_5.append("__sqs.deleteMessage(__queue_url___syncTermination_");
      String _name_81 = call.getTarget().getName();
      _builder_5.append(_name_81, "\t\t");
      _builder_5.append("_");
      _builder_5.append(this.func_ID, "\t\t");
      _builder_5.append(", msg.getReceiptHandle());");
      _builder_5.newLineIfNotEmpty();
      _builder_5.append("\t");
      _builder_5.append("}");
      _builder_5.newLine();
      _builder_5.append("}");
      _builder_5.newLine();
      _builder_5.append("__sqs.deleteQueue(new DeleteQueueRequest(__queue_url___syncTermination_");
      String _name_82 = call.getTarget().getName();
      _builder_5.append(_name_82);
      _builder_5.append("_");
      _builder_5.append(this.func_ID);
      _builder_5.append("));");
      _builder_5.newLineIfNotEmpty();
      ret = (_ret_4 + _builder_5);
    }
    boolean _isIs_thenall = call.isIs_thenall();
    if (_isIs_thenall) {
      String _ret_5 = ret;
      StringConcatenation _builder_6 = new StringConcatenation();
      String _name_83 = call.getThenall().getName();
      _builder_6.append(_name_83);
      _builder_6.append("();");
      _builder_6.newLineIfNotEmpty();
      ret = (_ret_5 + _builder_6);
    }
    this.func_ID++;
    return ret;
  }
  
  public String generateChannelReceive(final ChannelReceive receive, final String scope) {
    EObject _right = receive.getTarget().getEnvironment().getRight();
    DeclarationFeature _get = ((DeclarationObject) _right).getFeatures().get(0);
    String env = ((DeclarationFeature) _get).getValue_s();
    boolean _equals = env.equals("local");
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      ChannelDeclaration _target = receive.getTarget();
      String _name = ((ChannelDeclaration) _target).getName();
      _builder.append(_name);
      _builder.append(".take()");
      return _builder.toString();
    } else {
      boolean _equals_1 = env.equals("aws");
      if (_equals_1) {
        StringConcatenation _builder_1 = new StringConcatenation();
        ChannelDeclaration _target_1 = receive.getTarget();
        String _name_1 = ((ChannelDeclaration) _target_1).getName();
        _builder_1.append(_name_1);
        _builder_1.append(".take()");
        return _builder_1.toString();
      }
    }
    return null;
  }
  
  public String generateChannelSend(final ChannelSend send, final String scope) {
    EObject _right = send.getTarget().getEnvironment().getRight();
    DeclarationFeature _get = ((DeclarationObject) _right).getFeatures().get(0);
    String env = ((DeclarationFeature) _get).getValue_s();
    boolean _equals = env.equals("local");
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      ChannelDeclaration _target = send.getTarget();
      String _name = ((ChannelDeclaration) _target).getName();
      _builder.append(_name);
      _builder.append(".add(");
      Object _generateArithmeticExpression = this.generateArithmeticExpression(send.getExpression(), scope);
      _builder.append(_generateArithmeticExpression);
      _builder.append(")");
      return _builder.toString();
    } else {
      boolean _equals_1 = env.equals("aws");
      if (_equals_1) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("SendMessageRequest __sndmsg = new SendMessageRequest(__sqs.getQueueUrl(\"");
        String _name_1 = send.getTarget().getName();
        _builder_1.append(_name_1);
        _builder_1.append("\"+__id_execution).getQueueUrl(), ");
        Object _generateArithmeticExpression_1 = this.generateArithmeticExpression(send.getExpression(), scope);
        _builder_1.append(_generateArithmeticExpression_1);
        _builder_1.append(".toString());");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("__sqs.sendMessage(__sndmsg)");
        _builder_1.newLine();
        return _builder_1.toString();
      }
    }
    return null;
  }
  
  public CharSequence generateWhileExpression(final WhileExpression expression, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while(");
    String _generateArithmeticExpression = this.generateArithmeticExpression(expression.getCond(), scope);
    _builder.append(_generateArithmeticExpression);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Object _generateExpression = this.generateExpression(expression.getBody(), scope);
    _builder.append(_generateExpression, "\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String generateForExpression(final ForExpression exp, final String scope) {
    ArithmeticExpression _object = exp.getObject();
    if ((_object instanceof ParenthesizedExpression)) {
      ArithmeticExpression _object_1 = exp.getObject();
      return this.generateFor(exp.getIndex(), ((ParenthesizedExpression) _object_1).getExpression(), exp.getBody(), scope);
    } else {
      return this.generateFor(exp.getIndex(), exp.getObject(), exp.getBody(), scope);
    }
  }
  
  public String generateFor(final ForIndex indexes, final ArithmeticExpression object, final Expression body, final String scope) {
    Object _xifexpression = null;
    if ((object instanceof CastExpression)) {
      boolean _equals = ((CastExpression) object).getType().equals("Dat");
      if (_equals) {
        ArithmeticExpression _target = ((CastExpression) object).getTarget();
        String name = ((VariableLiteral) _target).getVariable().getName();
        int _length = ((Object[])Conversions.unwrapArray(indexes.getIndices(), Object.class)).length;
        boolean _equals_1 = (_length == 1);
        if (_equals_1) {
          VariableFor _get = indexes.getIndices().get(0);
          this.typeSystem.get(scope).put(((VariableDeclaration) _get).getName(), name);
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("for(int _");
          _builder.append(name);
          _builder.append("=0; _");
          _builder.append(name);
          _builder.append("<((Table) ");
          _builder.append(name);
          _builder.append(").rowCount();_");
          _builder.append(name);
          _builder.append("++){");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.newLine();
          {
            if ((body instanceof BlockExpression)) {
              {
                EList<Expression> _expressions = ((BlockExpression)body).getExpressions();
                for(final Expression exp : _expressions) {
                  _builder.append("\t");
                  Object _generateExpression = this.generateExpression(exp, scope);
                  _builder.append(_generateExpression, "\t");
                  _builder.newLineIfNotEmpty();
                }
              }
            } else {
              _builder.append("\t");
              Object _generateExpression_1 = this.generateExpression(body, scope);
              _builder.append(_generateExpression_1, "\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("}");
          _builder.newLine();
          return _builder.toString();
        }
      } else {
        boolean _equals_2 = ((CastExpression) object).getType().equals("Object");
        if (_equals_2) {
          int _length_1 = ((Object[])Conversions.unwrapArray(indexes.getIndices(), Object.class)).length;
          boolean _equals_3 = (_length_1 == 1);
          if (_equals_3) {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("for(Object _");
            VariableFor _get_1 = indexes.getIndices().get(0);
            String _name = ((VariableDeclaration) _get_1).getName();
            _builder_1.append(_name);
            _builder_1.append(" : ( (HashMap<Object,Object>) ");
            ArithmeticExpression _target_1 = ((CastExpression) object).getTarget();
            String _name_1 = ((VariableLiteral) _target_1).getVariable().getName();
            _builder_1.append(_name_1);
            _builder_1.append(").keySet() ){");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("\t\t");
            _builder_1.append("HashMap<Object, Object> ");
            VariableFor _get_2 = indexes.getIndices().get(0);
            String _name_2 = ((VariableDeclaration) _get_2).getName();
            _builder_1.append(_name_2, "\t\t");
            _builder_1.append(" = new HashMap<Object,Object>();");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("\t\t");
            VariableFor _get_3 = indexes.getIndices().get(0);
            String _name_3 = ((VariableDeclaration) _get_3).getName();
            _builder_1.append(_name_3, "\t\t");
            _builder_1.append(".put(\"k\",_");
            VariableFor _get_4 = indexes.getIndices().get(0);
            String _name_4 = ((VariableDeclaration) _get_4).getName();
            _builder_1.append(_name_4, "\t\t");
            _builder_1.append(");");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("\t\t");
            VariableFor _get_5 = indexes.getIndices().get(0);
            String _name_5 = ((VariableDeclaration) _get_5).getName();
            _builder_1.append(_name_5, "\t\t");
            _builder_1.append(".put(\"v\",((HashMap<Object,Object>) ");
            ArithmeticExpression _target_2 = ((CastExpression) object).getTarget();
            String _name_6 = ((VariableLiteral) _target_2).getVariable().getName();
            _builder_1.append(_name_6, "\t\t");
            _builder_1.append(").get(_");
            VariableFor _get_6 = indexes.getIndices().get(0);
            String _name_7 = ((VariableDeclaration) _get_6).getName();
            _builder_1.append(_name_7, "\t\t");
            _builder_1.append("));");
            _builder_1.newLineIfNotEmpty();
            {
              if ((body instanceof BlockExpression)) {
                {
                  EList<Expression> _expressions_1 = ((BlockExpression)body).getExpressions();
                  for(final Expression exp_1 : _expressions_1) {
                    _builder_1.append("\t");
                    Object _generateExpression_2 = this.generateExpression(exp_1, scope);
                    _builder_1.append(_generateExpression_2, "\t");
                    _builder_1.newLineIfNotEmpty();
                  }
                }
              } else {
                _builder_1.append("\t");
                Object _generateExpression_3 = this.generateExpression(body, scope);
                _builder_1.append(_generateExpression_3, "\t");
                _builder_1.newLineIfNotEmpty();
              }
            }
            _builder_1.append("}");
            _builder_1.newLine();
            return _builder_1.toString();
          }
        }
      }
    } else {
      Object _xifexpression_1 = null;
      if ((object instanceof RangeLiteral)) {
        Object _xifexpression_2 = null;
        VariableDeclaration _value_l1 = ((RangeLiteral)object).getValue_l1();
        boolean _notEquals = (!Objects.equal(_value_l1, null));
        if (_notEquals) {
          _xifexpression_2 = ((RangeLiteral)object).getValue_l1().getName();
        } else {
          _xifexpression_2 = Integer.valueOf(((RangeLiteral)object).getValue1());
        }
        Object value1 = ((Object)_xifexpression_2);
        Object _xifexpression_3 = null;
        VariableDeclaration _value_l2 = ((RangeLiteral)object).getValue_l2();
        boolean _notEquals_1 = (!Objects.equal(_value_l2, null));
        if (_notEquals_1) {
          _xifexpression_3 = ((RangeLiteral)object).getValue_l2().getName();
        } else {
          _xifexpression_3 = Integer.valueOf(((RangeLiteral)object).getValue2());
        }
        Object value2 = ((Object)_xifexpression_3);
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("for(int ");
        VariableFor _get_7 = indexes.getIndices().get(0);
        String _name_8 = ((VariableDeclaration) _get_7).getName();
        _builder_2.append(_name_8);
        _builder_2.append("=");
        _builder_2.append(((Object)value1));
        _builder_2.append(";");
        VariableFor _get_8 = indexes.getIndices().get(0);
        String _name_9 = ((VariableDeclaration) _get_8).getName();
        _builder_2.append(_name_9);
        _builder_2.append("<");
        _builder_2.append(((Object)value2));
        _builder_2.append(";");
        VariableFor _get_9 = indexes.getIndices().get(0);
        String _name_10 = ((VariableDeclaration) _get_9).getName();
        _builder_2.append(_name_10);
        _builder_2.append("++){");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        Object _generateExpression_4 = this.generateExpression(body, scope);
        _builder_2.append(_generateExpression_4, "\t");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("}");
        _builder_2.newLine();
        return _builder_2.toString();
      } else {
        Object _xifexpression_4 = null;
        if ((object instanceof VariableLiteral)) {
          Object _xifexpression_5 = null;
          if (((((VariableLiteral) object).getVariable().getTypeobject().equals("var") && (((VariableLiteral) object).getVariable().getRight() instanceof NameObjectDef)) || 
            this.typeSystem.get(scope).get(((VariableLiteral) object).getVariable().getName()).equals("HashMap"))) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.newLine();
            _builder_3.append("for(Object _");
            VariableFor _get_10 = indexes.getIndices().get(0);
            String _name_11 = ((VariableDeclaration) _get_10).getName();
            _builder_3.append(_name_11);
            _builder_3.append(" : ");
            String _name_12 = ((VariableLiteral) object).getVariable().getName();
            _builder_3.append(_name_12);
            _builder_3.append(".keySet() ){");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t");
            _builder_3.append("HashMap<Object, Object> ");
            VariableFor _get_11 = indexes.getIndices().get(0);
            String _name_13 = ((VariableDeclaration) _get_11).getName();
            _builder_3.append(_name_13, "\t");
            _builder_3.append(" = new HashMap<Object,Object>();");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t");
            VariableFor _get_12 = indexes.getIndices().get(0);
            String _name_14 = ((VariableDeclaration) _get_12).getName();
            _builder_3.append(_name_14, "\t");
            _builder_3.append(".put(\"k\",_");
            VariableFor _get_13 = indexes.getIndices().get(0);
            String _name_15 = ((VariableDeclaration) _get_13).getName();
            _builder_3.append(_name_15, "\t");
            _builder_3.append(");");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t");
            VariableFor _get_14 = indexes.getIndices().get(0);
            String _name_16 = ((VariableDeclaration) _get_14).getName();
            _builder_3.append(_name_16, "\t");
            _builder_3.append(".put(\"v\",");
            String _name_17 = ((VariableLiteral) object).getVariable().getName();
            _builder_3.append(_name_17, "\t");
            _builder_3.append(".get(_");
            VariableFor _get_15 = indexes.getIndices().get(0);
            String _name_18 = ((VariableDeclaration) _get_15).getName();
            _builder_3.append(_name_18, "\t");
            _builder_3.append("));");
            _builder_3.newLineIfNotEmpty();
            {
              if ((body instanceof BlockExpression)) {
                {
                  EList<Expression> _expressions_2 = ((BlockExpression)body).getExpressions();
                  for(final Expression exp_2 : _expressions_2) {
                    _builder_3.append("\t");
                    Object _generateExpression_5 = this.generateExpression(exp_2, scope);
                    _builder_3.append(_generateExpression_5, "\t");
                    _builder_3.newLineIfNotEmpty();
                  }
                }
              } else {
                _builder_3.append("\t");
                Object _generateExpression_6 = this.generateExpression(body, scope);
                _builder_3.append(_generateExpression_6, "\t");
                _builder_3.newLineIfNotEmpty();
              }
            }
            _builder_3.append("}");
            _builder_3.newLine();
            return _builder_3.toString();
          } else {
            Object _xifexpression_6 = null;
            boolean _equals_4 = ((VariableLiteral) object).getVariable().getTypeobject().equals("dat");
            if (_equals_4) {
              String name_1 = ((VariableLiteral) object).getVariable().getName();
              VariableFor _get_16 = indexes.getIndices().get(0);
              String index_name = ((VariableDeclaration) _get_16).getName();
              this.typeSystem.get(scope).put(index_name, name_1);
              InputOutput.<String>println(this.typeSystem.get(scope).get(index_name));
              boolean _equals_5 = this.typeSystem.get(scope).get(((VariableLiteral) object).getVariable().getName()).equals("File");
              if (_equals_5) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("Scanner __scanner_");
                _builder_4.append(name_1);
                _builder_4.append(" = new Scanner(");
                _builder_4.append(name_1);
                _builder_4.append(");");
                _builder_4.newLineIfNotEmpty();
                _builder_4.append("while(__scanner_");
                _builder_4.append(name_1);
                _builder_4.append(".hasNextLine()){");
                _builder_4.newLineIfNotEmpty();
                _builder_4.append("\t");
                _builder_4.append("String ");
                _builder_4.append(index_name, "\t");
                _builder_4.append(" = __scanner_");
                _builder_4.append(name_1, "\t");
                _builder_4.append(".nextLine();");
                _builder_4.newLineIfNotEmpty();
                {
                  if ((body instanceof BlockExpression)) {
                    {
                      EList<Expression> _expressions_3 = ((BlockExpression)body).getExpressions();
                      for(final Expression exp_3 : _expressions_3) {
                        _builder_4.append("\t");
                        Object _generateExpression_7 = this.generateExpression(exp_3, scope);
                        _builder_4.append(_generateExpression_7, "\t");
                        _builder_4.newLineIfNotEmpty();
                      }
                    }
                  } else {
                    _builder_4.append("\t");
                    Object _generateExpression_8 = this.generateExpression(body, scope);
                    _builder_4.append(_generateExpression_8, "\t");
                    _builder_4.newLineIfNotEmpty();
                  }
                }
                _builder_4.append("}");
                _builder_4.newLine();
                _builder_4.append("__scanner_");
                _builder_4.append(name_1);
                _builder_4.append(".close();");
                _builder_4.newLineIfNotEmpty();
                return _builder_4.toString();
              } else {
                boolean _equals_6 = this.typeSystem.get(scope).get(((VariableLiteral) object).getVariable().getName()).equals("Table");
                if (_equals_6) {
                  StringConcatenation _builder_5 = new StringConcatenation();
                  _builder_5.append("for(int _");
                  _builder_5.append(name_1);
                  _builder_5.append("=0; _");
                  _builder_5.append(name_1);
                  _builder_5.append("< ");
                  _builder_5.append(name_1);
                  _builder_5.append(".rowCount();_");
                  _builder_5.append(name_1);
                  _builder_5.append("++){");
                  _builder_5.newLineIfNotEmpty();
                  {
                    if ((body instanceof BlockExpression)) {
                      {
                        EList<Expression> _expressions_4 = ((BlockExpression)body).getExpressions();
                        for(final Expression exp_4 : _expressions_4) {
                          _builder_5.append("\t");
                          Object _generateExpression_9 = this.generateExpression(exp_4, scope);
                          _builder_5.append(_generateExpression_9, "\t");
                          _builder_5.newLineIfNotEmpty();
                        }
                      }
                    } else {
                      _builder_5.append("\t");
                      Object _generateExpression_10 = this.generateExpression(body, scope);
                      _builder_5.append(_generateExpression_10, "\t");
                      _builder_5.newLineIfNotEmpty();
                    }
                  }
                  _builder_5.append("}");
                  _builder_5.newLine();
                  return _builder_5.toString();
                }
              }
            } else {
              Object _xifexpression_7 = null;
              boolean _contains = this.typeSystem.get(scope).get(((VariableLiteral) object).getVariable().getName()).contains("Array");
              if (_contains) {
                _xifexpression_7 = null;
              } else {
                Object _xifexpression_8 = null;
                boolean _contains_1 = this.typeSystem.get(scope).get(((VariableLiteral) object).getVariable().getName()).contains("Matrix");
                if (_contains_1) {
                  _xifexpression_8 = null;
                }
                _xifexpression_7 = _xifexpression_8;
              }
              _xifexpression_6 = _xifexpression_7;
            }
            _xifexpression_5 = _xifexpression_6;
          }
          _xifexpression_4 = _xifexpression_5;
        } else {
          Object _xifexpression_9 = null;
          if ((object instanceof VariableFunction)) {
            StringConcatenation _builder_6 = new StringConcatenation();
            String _generateVariableFunction = this.generateVariableFunction(((VariableFunction) object), Boolean.valueOf(false), scope);
            _builder_6.append(_generateVariableFunction);
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("for(HashMap<String,Object> ");
            VariableFor _get_17 = indexes.getIndices().get(0);
            String _name_19 = ((VariableDeclaration) _get_17).getName();
            _builder_6.append(_name_19);
            _builder_6.append(" : __");
            String _name_20 = ((VariableFunction) object).getTarget().getName();
            _builder_6.append(_name_20);
            _builder_6.append("_rows.values()){");
            _builder_6.newLineIfNotEmpty();
            {
              if ((body instanceof BlockExpression)) {
                {
                  EList<Expression> _expressions_5 = ((BlockExpression)body).getExpressions();
                  for(final Expression exp_5 : _expressions_5) {
                    _builder_6.append("\t");
                    Object _generateExpression_11 = this.generateExpression(exp_5, scope);
                    _builder_6.append(_generateExpression_11, "\t");
                    _builder_6.newLineIfNotEmpty();
                  }
                }
              } else {
                _builder_6.append("\t");
                Object _generateExpression_12 = this.generateExpression(body, scope);
                _builder_6.append(_generateExpression_12, "\t");
                _builder_6.newLineIfNotEmpty();
              }
            }
            _builder_6.append("}");
            return _builder_6.toString();
          } else {
            Object _xifexpression_10 = null;
            if ((object instanceof IndexObject)) {
              _xifexpression_10 = null;
            }
            _xifexpression_9 = _xifexpression_10;
          }
          _xifexpression_4 = _xifexpression_9;
        }
        _xifexpression_1 = _xifexpression_4;
      }
      _xifexpression = _xifexpression_1;
    }
    return ((String)_xifexpression);
  }
  
  public CharSequence generateIfExpression(final IfExpression expression, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if(");
    String _generateArithmeticExpression = this.generateArithmeticExpression(expression.getCond(), scope);
    _builder.append(_generateArithmeticExpression);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Object _generateExpression = this.generateExpression(expression.getThen(), scope);
    _builder.append(_generateExpression, "\t");
    _builder.newLineIfNotEmpty();
    {
      Expression _else = expression.getElse();
      boolean _tripleNotEquals = (_else != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        _builder.append("else ");
        Object _generateExpression_1 = this.generateExpression(expression.getElse(), scope);
        _builder.append(_generateExpression_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String generatePrintExpression(final PrintExpression expression, final String scope) {
    ArithmeticExpression _print = expression.getPrint();
    if ((_print instanceof ChannelReceive)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("try{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("System.out.println(");
      String _generateArithmeticExpression = this.generateArithmeticExpression(expression.getPrint(), scope);
      _builder.append(_generateArithmeticExpression, "\t");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("}catch(Exception e){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("e.printStackTrace();");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("System.out.println(");
      String _generateArithmeticExpression_1 = this.generateArithmeticExpression(expression.getPrint(), scope);
      _builder_1.append(_generateArithmeticExpression_1);
      _builder_1.append(");");
      return _builder_1.toString();
    }
  }
  
  public String generateAssignment(final Assignment assignment, final String scope) {
    ArithmeticExpression _feature = assignment.getFeature();
    boolean _notEquals = (!Objects.equal(_feature, null));
    if (_notEquals) {
      if (((assignment.getValue() instanceof CastExpression) && (((CastExpression) assignment.getValue()).getTarget() instanceof ChannelReceive))) {
        ArithmeticExpression _value = assignment.getValue();
        ArithmeticExpression _target = ((CastExpression) _value).getTarget();
        EObject _right = ((ChannelReceive) _target).getTarget().getEnvironment().getRight();
        boolean _equals = ((DeclarationObject) _right).getFeatures().get(0).getValue_s().equals("aws");
        if (_equals) {
          ArithmeticExpression _value_1 = assignment.getValue();
          boolean _equals_1 = ((CastExpression) _value_1).getType().equals("Integer");
          if (_equals_1) {
            StringConcatenation _builder = new StringConcatenation();
            String _generateArithmeticExpression = this.generateArithmeticExpression(assignment.getFeature(), scope);
            _builder.append(_generateArithmeticExpression);
            _builder.append(" ");
            String _op = assignment.getOp();
            _builder.append(_op);
            _builder.append(" Integer.parseInt(");
            ArithmeticExpression _value_2 = assignment.getValue();
            ArithmeticExpression _target_1 = ((CastExpression) _value_2).getTarget();
            String _name = ((ChannelReceive) _target_1).getTarget().getName();
            _builder.append(_name);
            _builder.append(".take().toString());");
            _builder.newLineIfNotEmpty();
            return _builder.toString();
          } else {
            ArithmeticExpression _value_3 = assignment.getValue();
            boolean _equals_2 = ((CastExpression) _value_3).getType().equals("Object");
            if (_equals_2) {
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append("String __res_");
              ArithmeticExpression _value_4 = assignment.getValue();
              ArithmeticExpression _target_2 = ((CastExpression) _value_4).getTarget();
              String _name_1 = ((ChannelReceive) _target_2).getTarget().getName();
              _builder_1.append(_name_1);
              _builder_1.append(" = ");
              ArithmeticExpression _value_5 = assignment.getValue();
              ArithmeticExpression _target_3 = ((CastExpression) _value_5).getTarget();
              String _name_2 = ((ChannelReceive) _target_3).getTarget().getName();
              _builder_1.append(_name_2);
              _builder_1.append(".take().toString();");
              _builder_1.newLineIfNotEmpty();
              _builder_1.append("HashMap ");
              String _generateArithmeticExpression_1 = this.generateArithmeticExpression(assignment.getFeature(), scope);
              _builder_1.append(_generateArithmeticExpression_1);
              _builder_1.append(" ");
              String _op_1 = assignment.getOp();
              _builder_1.append(_op_1);
              _builder_1.append(" new Gson().fromJson(__res_");
              ArithmeticExpression _value_6 = assignment.getValue();
              ArithmeticExpression _target_4 = ((CastExpression) _value_6).getTarget();
              String _name_3 = ((ChannelReceive) _target_4).getTarget().getName();
              _builder_1.append(_name_3);
              _builder_1.append(",new TypeToken<HashMap<String, String>>() {}.getType();)");
              _builder_1.newLineIfNotEmpty();
              return _builder_1.toString();
            } else {
              ArithmeticExpression _value_7 = assignment.getValue();
              boolean _equals_3 = ((CastExpression) _value_7).getType().equals("Double");
              if (_equals_3) {
                StringConcatenation _builder_2 = new StringConcatenation();
                String _generateArithmeticExpression_2 = this.generateArithmeticExpression(assignment.getFeature(), scope);
                _builder_2.append(_generateArithmeticExpression_2);
                _builder_2.append(" ");
                String _op_2 = assignment.getOp();
                _builder_2.append(_op_2);
                _builder_2.append(" Double.parseDouble (");
                ArithmeticExpression _value_8 = assignment.getValue();
                ArithmeticExpression _target_5 = ((CastExpression) _value_8).getTarget();
                String _name_4 = ((ChannelReceive) _target_5).getTarget().getName();
                _builder_2.append(_name_4);
                _builder_2.append(".take().toString());");
                _builder_2.newLineIfNotEmpty();
                return _builder_2.toString();
              }
            }
          }
        } else {
          ArithmeticExpression _value_9 = assignment.getValue();
          boolean _equals_4 = ((CastExpression) _value_9).getType().equals("Integer");
          if (_equals_4) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("try{");
            _builder_3.newLine();
            _builder_3.append("\t");
            String _generateArithmeticExpression_3 = this.generateArithmeticExpression(assignment.getFeature(), scope);
            _builder_3.append(_generateArithmeticExpression_3, "\t");
            _builder_3.append(" ");
            String _op_3 = assignment.getOp();
            _builder_3.append(_op_3, "\t");
            _builder_3.append(" Integer.parseInt(");
            ArithmeticExpression _value_10 = assignment.getValue();
            ArithmeticExpression _target_6 = ((CastExpression) _value_10).getTarget();
            String _name_5 = ((ChannelReceive) _target_6).getTarget().getName();
            _builder_3.append(_name_5, "\t");
            _builder_3.append(".take().toString());");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("}catch(InterruptedException e1){");
            _builder_3.newLine();
            _builder_3.append("\t");
            _builder_3.append("e1.printStackTrace();");
            _builder_3.newLine();
            _builder_3.append("}");
            _builder_3.newLine();
            return _builder_3.toString();
          } else {
            ArithmeticExpression _value_11 = assignment.getValue();
            boolean _equals_5 = ((CastExpression) _value_11).getType().equals("Double");
            if (_equals_5) {
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("try{");
              _builder_4.newLine();
              _builder_4.append("\t");
              String _generateArithmeticExpression_4 = this.generateArithmeticExpression(assignment.getFeature(), scope);
              _builder_4.append(_generateArithmeticExpression_4, "\t");
              _builder_4.append(" ");
              String _op_4 = assignment.getOp();
              _builder_4.append(_op_4, "\t");
              _builder_4.append(" Double.parseDouble(");
              ArithmeticExpression _value_12 = assignment.getValue();
              ArithmeticExpression _target_7 = ((CastExpression) _value_12).getTarget();
              String _name_6 = ((ChannelReceive) _target_7).getTarget().getName();
              _builder_4.append(_name_6, "\t");
              _builder_4.append(".take().toString());");
              _builder_4.newLineIfNotEmpty();
              _builder_4.append("\t");
              _builder_4.append("e1.printStackTrace();");
              _builder_4.newLine();
              _builder_4.append("}");
              _builder_4.newLine();
              return _builder_4.toString();
            }
          }
        }
      } else {
        ArithmeticExpression _value_13 = assignment.getValue();
        if ((_value_13 instanceof ChannelReceive)) {
          ArithmeticExpression _value_14 = assignment.getValue();
          EObject _right_1 = ((ChannelReceive) _value_14).getTarget().getEnvironment().getRight();
          boolean _equals_6 = ((DeclarationObject) _right_1).getFeatures().get(0).getValue_s().equals("aws");
          if (_equals_6) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("try{");
            _builder_5.newLine();
            _builder_5.append("\t");
            String _generateArithmeticExpression_5 = this.generateArithmeticExpression(assignment.getFeature(), scope);
            _builder_5.append(_generateArithmeticExpression_5, "\t");
            _builder_5.append(" ");
            String _op_5 = assignment.getOp();
            _builder_5.append(_op_5, "\t");
            _builder_5.append(" ");
            ArithmeticExpression _value_15 = assignment.getValue();
            String _generateArithmeticExpression_6 = this.generateArithmeticExpression(((ChannelReceive) _value_15), scope);
            _builder_5.append(_generateArithmeticExpression_6, "\t");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("}catch(InterruptedException e1){");
            _builder_5.newLine();
            _builder_5.append("\t");
            _builder_5.append("e1.printStackTrace();");
            _builder_5.newLine();
            _builder_5.append("}");
            _builder_5.newLine();
            return _builder_5.toString();
          } else {
            StringConcatenation _builder_6 = new StringConcatenation();
            _builder_6.append("try{");
            _builder_6.newLine();
            _builder_6.append("\t");
            String _generateArithmeticExpression_7 = this.generateArithmeticExpression(assignment.getFeature(), scope);
            _builder_6.append(_generateArithmeticExpression_7, "\t");
            _builder_6.append(" ");
            String _op_6 = assignment.getOp();
            _builder_6.append(_op_6, "\t");
            _builder_6.append(" ");
            ArithmeticExpression _value_16 = assignment.getValue();
            String _generateArithmeticExpression_8 = this.generateArithmeticExpression(((ChannelReceive) _value_16), scope);
            _builder_6.append(_generateArithmeticExpression_8, "\t");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("}catch(InterruptedException e1){");
            _builder_6.newLine();
            _builder_6.append("\t");
            _builder_6.append("e1.printStackTrace();");
            _builder_6.newLine();
            _builder_6.append("}");
            _builder_6.newLine();
            return _builder_6.toString();
          }
        } else {
          StringConcatenation _builder_7 = new StringConcatenation();
          String _generateArithmeticExpression_9 = this.generateArithmeticExpression(assignment.getFeature(), scope);
          _builder_7.append(_generateArithmeticExpression_9);
          _builder_7.append(" ");
          String _op_7 = assignment.getOp();
          _builder_7.append(_op_7);
          _builder_7.append(" ");
          String _generateArithmeticExpression_10 = this.generateArithmeticExpression(assignment.getValue(), scope);
          _builder_7.append(_generateArithmeticExpression_10);
          _builder_7.append(";");
          _builder_7.newLineIfNotEmpty();
          return _builder_7.toString();
        }
      }
    }
    ObjectLiteral _feature_obj = assignment.getFeature_obj();
    boolean _tripleNotEquals = (_feature_obj != null);
    if (_tripleNotEquals) {
      ObjectLiteral _feature_obj_1 = assignment.getFeature_obj();
      if ((_feature_obj_1 instanceof NameObject)) {
        HashMap<String, String> _get = this.typeSystem.get(scope);
        ObjectLiteral _feature_obj_2 = assignment.getFeature_obj();
        VariableDeclaration _name_7 = ((NameObject) _feature_obj_2).getName();
        String _name_8 = ((VariableDeclaration) _name_7).getName();
        String _plus = (_name_8 + ".");
        ObjectLiteral _feature_obj_3 = assignment.getFeature_obj();
        String _value_17 = ((NameObject) _feature_obj_3).getValue();
        String _plus_1 = (_plus + _value_17);
        _get.put(_plus_1, 
          this.valuateArithmeticExpression(assignment.getValue(), scope));
        StringConcatenation _builder_8 = new StringConcatenation();
        ObjectLiteral _feature_obj_4 = assignment.getFeature_obj();
        VariableDeclaration _name_9 = ((NameObject) _feature_obj_4).getName();
        String _name_10 = ((VariableDeclaration) _name_9).getName();
        _builder_8.append(_name_10);
        _builder_8.append(".put(\"");
        ObjectLiteral _feature_obj_5 = assignment.getFeature_obj();
        String _value_18 = ((NameObject) _feature_obj_5).getValue();
        _builder_8.append(_value_18);
        _builder_8.append("\",");
        String _generateArithmeticExpression_11 = this.generateArithmeticExpression(assignment.getValue(), scope);
        _builder_8.append(_generateArithmeticExpression_11);
        _builder_8.append(");");
        _builder_8.newLineIfNotEmpty();
        return _builder_8.toString();
      }
      ObjectLiteral _feature_obj_6 = assignment.getFeature_obj();
      if ((_feature_obj_6 instanceof IndexObject)) {
        ObjectLiteral _feature_obj_7 = assignment.getFeature_obj();
        boolean _contains = this.typeSystem.get(scope).get(((IndexObject) _feature_obj_7).getName().getName()).contains("Array");
        if (_contains) {
          StringConcatenation _builder_9 = new StringConcatenation();
          String _generateArithmeticExpression_12 = this.generateArithmeticExpression(assignment.getFeature_obj(), scope);
          _builder_9.append(_generateArithmeticExpression_12);
          _builder_9.append(" = ");
          String _generateArithmeticExpression_13 = this.generateArithmeticExpression(assignment.getValue(), scope);
          _builder_9.append(_generateArithmeticExpression_13);
          _builder_9.append(";");
          return _builder_9.toString();
        } else {
          ObjectLiteral _feature_obj_8 = assignment.getFeature_obj();
          boolean _contains_1 = this.typeSystem.get(scope).get(((IndexObject) _feature_obj_8).getName().getName()).contains("Matrix");
          if (_contains_1) {
            StringConcatenation _builder_10 = new StringConcatenation();
            String _generateArithmeticExpression_14 = this.generateArithmeticExpression(assignment.getFeature_obj(), scope);
            _builder_10.append(_generateArithmeticExpression_14);
            _builder_10.append(" =  ");
            String _generateArithmeticExpression_15 = this.generateArithmeticExpression(assignment.getValue(), scope);
            _builder_10.append(_generateArithmeticExpression_15);
            _builder_10.append(";");
            return _builder_10.toString();
          } else {
            HashMap<String, String> _get_1 = this.typeSystem.get(scope);
            ObjectLiteral _feature_obj_9 = assignment.getFeature_obj();
            VariableDeclaration _name_11 = ((IndexObject) _feature_obj_9).getName();
            String _name_12 = ((VariableDeclaration) _name_11).getName();
            String _plus_2 = (_name_12 + "[");
            ObjectLiteral _feature_obj_10 = assignment.getFeature_obj();
            String _generateArithmeticExpression_16 = this.generateArithmeticExpression(((IndexObject) _feature_obj_10).getIndexes().get(0).getValue(), scope);
            String _plus_3 = (_plus_2 + _generateArithmeticExpression_16);
            String _plus_4 = (_plus_3 + "]");
            _get_1.put(_plus_4, 
              this.valuateArithmeticExpression(assignment.getValue(), scope));
            StringConcatenation _builder_11 = new StringConcatenation();
            ObjectLiteral _feature_obj_11 = assignment.getFeature_obj();
            VariableDeclaration _name_13 = ((IndexObject) _feature_obj_11).getName();
            String _name_14 = ((VariableDeclaration) _name_13).getName();
            _builder_11.append(_name_14);
            _builder_11.append(".put(");
            ObjectLiteral _feature_obj_12 = assignment.getFeature_obj();
            String _generateArithmeticExpression_17 = this.generateArithmeticExpression(((IndexObject) _feature_obj_12).getIndexes().get(0).getValue(), scope);
            _builder_11.append(_generateArithmeticExpression_17);
            _builder_11.append(",");
            String _generateArithmeticExpression_18 = this.generateArithmeticExpression(assignment.getValue(), scope);
            _builder_11.append(_generateArithmeticExpression_18);
            _builder_11.append(");");
            _builder_11.newLineIfNotEmpty();
            return _builder_11.toString();
          }
        }
      }
    }
    return null;
  }
  
  public String generateFunctionDefinition(final FunctionDefinition definition) {
    String _name = definition.getName();
    HashMap<String, String> _hashMap = new HashMap<String, String>();
    this.typeSystem.put(_name, _hashMap);
    Iterable<ConstantDeclaration> _filter = Iterables.<ConstantDeclaration>filter(IteratorExtensions.<EObject>toIterable(this.res.getAllContents()), ConstantDeclaration.class);
    for (final ConstantDeclaration exp : _filter) {
      this.typeSystem.get(definition.getName()).put(exp.getName(), this.typeSystem.get("main").get(exp.getName()));
    }
    FunctionReturn returnExp = this.checkReturn(definition.getBody());
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static ");
    {
      boolean _notEquals = (!Objects.equal(returnExp, null));
      if (_notEquals) {
        _builder.append(" ");
        String _valuateArithmeticExpression = this.valuateArithmeticExpression(returnExp.getExpression(), definition.getName());
        _builder.append(_valuateArithmeticExpression, "\t");
      } else {
        _builder.append(" Object");
      }
    }
    _builder.append(" ");
    String _name_1 = definition.getName();
    _builder.append(_name_1, "\t");
    _builder.append("(");
    {
      EList<Expression> _parameters = definition.getParameters();
      for(final Expression params : _parameters) {
        String _parameterType = this.getParameterType(definition.getName(), params, definition.getParameters().indexOf(params));
        _builder.append(_parameterType, "\t");
        _builder.append(" ");
        String _name_2 = ((VariableDeclaration) params).getName();
        _builder.append(_name_2, "\t");
        {
          boolean _equals = params.equals(IterableExtensions.<Expression>last(definition.getParameters()));
          boolean _not = (!_equals);
          if (_not) {
            _builder.append(", ");
          }
        }
      }
    }
    _builder.append(")throws Exception{");
    _builder.newLineIfNotEmpty();
    {
      EList<Expression> _expressions = definition.getBody().getExpressions();
      for(final Expression el : _expressions) {
        _builder.append("\t");
        CharSequence _generateExpression = this.generateExpression(el, definition.getName());
        _builder.append(_generateExpression, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _equals_1 = Objects.equal(returnExp, null);
      if (_equals_1) {
        _builder.append("\t");
        _builder.append("return null;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    String s = _builder.toString();
    int _length = ((Object[])Conversions.unwrapArray(Iterables.<NativeExpression>filter(definition.getBody().getExpressions(), NativeExpression.class), Object.class)).length;
    boolean _notEquals_1 = (_length != 0);
    if (_notEquals_1) {
      StringConcatenation _builder_1 = new StringConcatenation();
      return _builder_1.toString();
    } else {
      return s;
    }
  }
  
  public String getParameterType(final String name, final Expression param, final int pos) {
    Iterable<Expression> _filter = Iterables.<Expression>filter(IteratorExtensions.<EObject>toIterable(this.res.getAllContents()), Expression.class);
    for (final Expression exp : _filter) {
      if (((exp instanceof LocalFunctionCall) && Objects.equal(((LocalFunctionCall) exp).getTarget().getName(), name))) {
        LocalFunctionInput _input = ((LocalFunctionCall) exp).getInput();
        String typeobject = this.valuateArithmeticExpression(
          ((LocalFunctionInput) _input).getInputs().get(pos), "main");
        boolean _equals = Objects.equal(typeobject, "Table");
        if (_equals) {
          ((VariableDeclaration) param).setTypeobject("dat");
          this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "Table");
        } else {
          ((VariableDeclaration) param).setTypeobject("var");
          boolean _equals_1 = Objects.equal(typeobject, "HashMap");
          if (_equals_1) {
            this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "HashMap");
            Set<String> _keySet = this.typeSystem.get("main").keySet();
            for (final String key : _keySet) {
              LocalFunctionInput _input_1 = ((LocalFunctionCall) exp).getInput();
              ArithmeticExpression _get = ((LocalFunctionInput) _input_1).getInputs().get(pos);
              String _name = ((VariableLiteral) _get).getVariable().getName();
              String _plus = (_name + ".");
              boolean _contains = key.contains(_plus);
              if (_contains) {
                int _indexOf = key.indexOf(".");
                int _plus_1 = (_indexOf + 1);
                String tmp = key.substring(_plus_1, key.length());
                HashMap<String, String> _get_1 = this.typeSystem.get(name);
                String _name_1 = ((VariableDeclaration) param).getName();
                String _plus_2 = (_name_1 + ".");
                String _plus_3 = (_plus_2 + tmp);
                _get_1.put(_plus_3, 
                  this.typeSystem.get("main").get(key));
              }
            }
          } else {
            boolean _contains_1 = typeobject.contains("Array");
            if (_contains_1) {
              this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), typeobject);
              String[] tmp_1 = typeobject.split("_");
              String _get_2 = tmp_1[1];
              String _plus_4 = (_get_2 + "[]");
              typeobject = _plus_4;
            } else {
              boolean _contains_2 = typeobject.contains("Matrix");
              if (_contains_2) {
                this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), typeobject);
                String[] tmp_2 = typeobject.split("_");
                int _length = tmp_2.length;
                boolean _equals_2 = (_length == 3);
                if (_equals_2) {
                  String _get_3 = tmp_2[1];
                  String _plus_5 = (_get_3 + "[][]");
                  typeobject = _plus_5;
                } else {
                  int _length_1 = tmp_2.length;
                  boolean _equals_3 = (_length_1 == 4);
                  if (_equals_3) {
                    String _get_4 = tmp_2[1];
                    String _plus_6 = (_get_4 + "[][][]");
                    typeobject = _plus_6;
                  }
                }
              } else {
                this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), typeobject);
              }
            }
          }
        }
        return typeobject;
      } else {
        if (((exp instanceof FlyFunctionCall) && Objects.equal(((FlyFunctionCall) exp).getTarget().getName(), name))) {
          boolean _isIs_for_index = ((FlyFunctionCall) exp).getInput().isIs_for_index();
          if (_isIs_for_index) {
            ArithmeticExpression _f_index = ((FlyFunctionCall) exp).getInput().getF_index();
            if ((_f_index instanceof RangeLiteral)) {
              this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "Integer");
              return "Integer";
            } else {
              ArithmeticExpression _f_index_1 = ((FlyFunctionCall) exp).getInput().getF_index();
              if ((_f_index_1 instanceof VariableLiteral)) {
                ArithmeticExpression _f_index_2 = ((FlyFunctionCall) exp).getInput().getF_index();
                String typeobject_1 = this.valuateArithmeticExpression(
                  ((VariableLiteral) _f_index_2), "main");
                boolean _equals_4 = Objects.equal(typeobject_1, "Table");
                if (_equals_4) {
                  ((VariableDeclaration) param).setTypeobject("dat");
                  this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "Table");
                } else {
                  ((VariableDeclaration) param).setTypeobject("var");
                  boolean _equals_5 = Objects.equal(typeobject_1, "HashMap");
                  if (_equals_5) {
                    this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "HashMap");
                    Set<String> _keySet_1 = this.typeSystem.get("main").keySet();
                    for (final String key_1 : _keySet_1) {
                      LocalFunctionInput _input_2 = ((LocalFunctionCall) exp).getInput();
                      ArithmeticExpression _get_5 = ((LocalFunctionInput) _input_2).getInputs().get(pos);
                      String _name_2 = ((VariableLiteral) _get_5).getVariable().getName();
                      String _plus_7 = (_name_2 + ".");
                      boolean _contains_3 = key_1.contains(_plus_7);
                      if (_contains_3) {
                        int _indexOf_1 = key_1.indexOf(".");
                        int _plus_8 = (_indexOf_1 + 1);
                        String tmp_3 = key_1.substring(_plus_8, key_1.length());
                        HashMap<String, String> _get_6 = this.typeSystem.get(name);
                        String _name_3 = ((VariableDeclaration) param).getName();
                        String _plus_9 = (_name_3 + ".");
                        String _plus_10 = (_plus_9 + tmp_3);
                        _get_6.put(_plus_10, 
                          this.typeSystem.get("main").get(key_1));
                      }
                    }
                  } else {
                    this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), typeobject_1);
                  }
                }
                return typeobject_1;
              }
            }
          } else {
            FunctionInput _input_3 = ((FlyFunctionCall) exp).getInput();
            String typeobject_2 = this.valuateArithmeticExpression(
              ((FunctionInput) _input_3).getExpressions().get(pos), "main");
            boolean _equals_6 = Objects.equal(typeobject_2, "Table");
            if (_equals_6) {
              ((VariableDeclaration) param).setTypeobject("dat");
              this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "Table");
            } else {
              ((VariableDeclaration) param).setTypeobject("var");
              boolean _equals_7 = Objects.equal(typeobject_2, "HashMap");
              if (_equals_7) {
                this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "HashMap");
                Set<String> _keySet_2 = this.typeSystem.get("main").keySet();
                for (final String key_2 : _keySet_2) {
                  LocalFunctionInput _input_4 = ((LocalFunctionCall) exp).getInput();
                  ArithmeticExpression _get_7 = ((LocalFunctionInput) _input_4).getInputs().get(pos);
                  String _name_4 = ((VariableLiteral) _get_7).getVariable().getName();
                  String _plus_11 = (_name_4 + ".");
                  boolean _contains_4 = key_2.contains(_plus_11);
                  if (_contains_4) {
                    int _indexOf_2 = key_2.indexOf(".");
                    int _plus_12 = (_indexOf_2 + 1);
                    String tmp_4 = key_2.substring(_plus_12, key_2.length());
                    HashMap<String, String> _get_8 = this.typeSystem.get(name);
                    String _name_5 = ((VariableDeclaration) param).getName();
                    String _plus_13 = (_name_5 + ".");
                    String _plus_14 = (_plus_13 + tmp_4);
                    _get_8.put(_plus_14, 
                      this.typeSystem.get("main").get(key_2));
                  }
                }
              } else {
                this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), typeobject_2);
              }
            }
            return typeobject_2;
          }
        }
      }
    }
    return null;
  }
  
  public String valuateArithmeticExpression(final ArithmeticExpression exp, final String scope) {
    if ((exp instanceof NumberLiteral)) {
      return "Integer";
    } else {
      if ((exp instanceof BooleanLiteral)) {
        return "Boolean";
      } else {
        if ((exp instanceof StringLiteral)) {
          return "String";
        } else {
          if ((exp instanceof FloatLiteral)) {
            return "Double";
          } else {
            if ((exp instanceof VariableLiteral)) {
              final VariableDeclaration variable = ((VariableLiteral)exp).getVariable();
              boolean _equals = variable.getTypeobject().equals("dat");
              if (_equals) {
                return "Table";
              } else {
                boolean _equals_1 = variable.getTypeobject().equals("channel");
                if (_equals_1) {
                  return "Channel";
                } else {
                  boolean _equals_2 = variable.getTypeobject().equals("var");
                  if (_equals_2) {
                    EObject _right = variable.getRight();
                    if ((_right instanceof NameObjectDef)) {
                      return "HashMap";
                    } else {
                      EObject _right_1 = variable.getRight();
                      if ((_right_1 instanceof ArithmeticExpression)) {
                        EObject _right_2 = variable.getRight();
                        return this.valuateArithmeticExpression(((ArithmeticExpression) _right_2), scope);
                      } else {
                        return this.typeSystem.get(scope).get(variable.getName());
                      }
                    }
                  }
                }
              }
              return "variable";
            } else {
              if ((exp instanceof NameObject)) {
                HashMap<String, String> _get = this.typeSystem.get(scope);
                String _name = ((NameObject)exp).getName().getName();
                String _plus = (_name + ".");
                String _value = ((NameObject)exp).getValue();
                String _plus_1 = (_plus + _value);
                return _get.get(_plus_1);
              } else {
                if ((exp instanceof IndexObject)) {
                  boolean _contains = this.typeSystem.get(scope).get(((IndexObject)exp).getName().getName()).contains("Array");
                  if (_contains) {
                    String[] type = this.typeSystem.get(scope).get(((IndexObject)exp).getName().getName()).split("_");
                    ArithmeticExpression _value2 = ((IndexObject)exp).getIndexes().get(0).getValue2();
                    boolean _tripleEquals = (_value2 == null);
                    if (_tripleEquals) {
                      return type[1];
                    } else {
                      boolean _equals_3 = type[1].equals("Integer");
                      if (_equals_3) {
                        return "Integer[]";
                      } else {
                        boolean _equals_4 = type[1].equals("Double");
                        if (_equals_4) {
                          return "Double[]";
                        } else {
                          boolean _equals_5 = type[1].equals("String");
                          if (_equals_5) {
                            return "String[]";
                          }
                        }
                      }
                    }
                  } else {
                    boolean _contains_1 = this.typeSystem.get(scope).get(((IndexObject)exp).getName().getName()).contains("Matrix");
                    if (_contains_1) {
                      String[] type_1 = this.typeSystem.get(scope).get(((IndexObject)exp).getName().getName()).split("_");
                      return type_1[1];
                    } else {
                      HashMap<String, String> _get_1 = this.typeSystem.get(scope);
                      String _name_1 = ((IndexObject)exp).getName().getName();
                      String _plus_2 = (_name_1 + "[");
                      String _generateArithmeticExpression = this.generateArithmeticExpression(((IndexObject)exp).getIndexes().get(0).getValue(), scope);
                      String _plus_3 = (_plus_2 + _generateArithmeticExpression);
                      String _plus_4 = (_plus_3 + "]");
                      return _get_1.get(_plus_4);
                    }
                  }
                } else {
                  if ((exp instanceof DatTableObject)) {
                    return "Table";
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((exp instanceof UnaryOperation)) {
      boolean _equals_6 = ((UnaryOperation)exp).getFeature().equals("!");
      if (_equals_6) {
        return "Boolean";
      }
      return this.valuateArithmeticExpression(((UnaryOperation)exp).getOperand(), scope);
    }
    if ((exp instanceof BinaryOperation)) {
      String left = this.valuateArithmeticExpression(((BinaryOperation)exp).getLeft(), scope);
      String right = this.valuateArithmeticExpression(((BinaryOperation)exp).getRight(), scope);
      if ((((((BinaryOperation)exp).getFeature().equals("+") || ((BinaryOperation)exp).getFeature().equals("-")) || ((BinaryOperation)exp).getFeature().equals("*")) || 
        ((BinaryOperation)exp).getFeature().equals("/"))) {
        if ((left.equals("String") || right.equals("String"))) {
          return "String";
        } else {
          if ((left.equals("Double") || right.equals("Double"))) {
            return "Double";
          } else {
            return "Integer";
          }
        }
      } else {
        return "Boolean";
      }
    } else {
      if ((exp instanceof CastExpression)) {
        boolean _equals_7 = ((CastExpression)exp).getType().equals("Object");
        if (_equals_7) {
          return "HashMap";
        }
        boolean _equals_8 = ((CastExpression)exp).getType().equals("String");
        if (_equals_8) {
          return "String";
        }
        boolean _equals_9 = ((CastExpression)exp).getType().equals("Integer");
        if (_equals_9) {
          return "Integer";
        }
        boolean _equals_10 = ((CastExpression)exp).getType().equals("Float");
        if (_equals_10) {
          return "Double";
        }
        boolean _equals_11 = ((CastExpression)exp).getType().equals("Dat");
        if (_equals_11) {
          return "Table";
        }
        boolean _equals_12 = ((CastExpression)exp).getType().equals("Date");
        if (_equals_12) {
          return "LocalDate";
        }
      } else {
        if ((exp instanceof ParenthesizedExpression)) {
          return this.valuateArithmeticExpression(((ParenthesizedExpression)exp).getExpression(), scope);
        }
      }
    }
    if ((exp instanceof MathFunction)) {
      boolean _equals_13 = ((MathFunction)exp).getFeature().equals("round");
      if (_equals_13) {
        return "Integer";
      } else {
        EList<ArithmeticExpression> _expressions = ((MathFunction)exp).getExpressions();
        for (final ArithmeticExpression el : _expressions) {
          boolean _equals_14 = this.valuateArithmeticExpression(el, scope).equals("Double");
          if (_equals_14) {
            return "Double";
          }
        }
        return "Integer";
      }
    } else {
      if ((exp instanceof TimeFunction)) {
        return "Long";
      } else {
        if ((exp instanceof VariableFunction)) {
          boolean _equals_15 = ((VariableFunction)exp).getTarget().getTypeobject().equals("var");
          if (_equals_15) {
            boolean _equals_16 = ((VariableFunction)exp).getFeature().equals("split");
            if (_equals_16) {
              return "HashMap";
            } else {
              if ((((VariableFunction)exp).getFeature().contains("indexOf") || ((VariableFunction)exp).getFeature().equals("length"))) {
                return "Integer";
              } else {
                if ((((((VariableFunction)exp).getFeature().equals("concat") || ((VariableFunction)exp).getFeature().equals("substring")) || 
                  ((VariableFunction)exp).getFeature().equals("toLowerCase")) || ((VariableFunction)exp).getFeature().equals("toUpperCase"))) {
                  return "String";
                }
              }
            }
            boolean _equals_17 = ((VariableFunction)exp).getFeature().equals("charAt");
            if (_equals_17) {
              return "char";
            } else {
              return "Boolean";
            }
          } else {
            boolean _equals_18 = ((VariableFunction)exp).getTarget().getTypeobject().equals("random");
            if (_equals_18) {
              boolean _equals_19 = ((VariableFunction)exp).getFeature().equals("nextBoolean");
              if (_equals_19) {
                return "Boolean";
              } else {
                boolean _equals_20 = ((VariableFunction)exp).getFeature().equals("nextDouble");
                if (_equals_20) {
                  return "Double";
                } else {
                  boolean _equals_21 = ((VariableFunction)exp).getFeature().equals("nextInt");
                  if (_equals_21) {
                    return "Integer";
                  }
                }
              }
            }
          }
        } else {
          return "Object";
        }
      }
    }
    return null;
  }
  
  public FunctionReturn checkReturn(final EObject el) {
    if ((el instanceof BlockExpression)) {
      EList<Expression> _expressions = ((BlockExpression) el).getExpressions();
      for (final Expression element : _expressions) {
        if ((element instanceof FunctionReturn)) {
          return ((FunctionReturn)element);
        }
      }
      return null;
    }
    return null;
  }
  
  public Object checkBlock(final EObject el) {
    if ((el instanceof FunctionDefinition)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof WhileExpression)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof ForExpression)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof IfExpression)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof BlockExpression)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof Fly)) {
      return Boolean.valueOf(false);
    }
    if ((el instanceof VariableDeclaration)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof PrintExpression)) {
      return Boolean.valueOf(true);
    } else {
      return this.checkBlock(el.eContainer());
    }
  }
}
