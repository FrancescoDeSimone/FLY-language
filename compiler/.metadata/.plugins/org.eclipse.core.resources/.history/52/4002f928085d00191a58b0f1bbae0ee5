/*
 * generated by Xtext 2.13.0
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.HashMap
import org.xtext.fLY.ChannelDeclaration
import org.xtext.fLY.FunctionDefinition
import org.xtext.fLY.Expression
import org.xtext.fLY.VariableDeclaration
import org.xtext.fLY.RandomDeclaration
import org.xtext.fLY.Assignment
import org.xtext.fLY.PrintExpression
import org.xtext.fLY.IfExpression
import org.xtext.fLY.ForExpression
import org.xtext.fLY.WhileExpression
import org.xtext.fLY.ChannelSend
import org.xtext.fLY.ChannelReceive
import org.xtext.fLY.LocalFunctionCall
import org.xtext.fLY.FunctionReturn
import org.xtext.fLY.BlockExpression
import org.xtext.fLY.ArithmeticExpression
import org.xtext.fLY.BinaryOperation
import org.xtext.fLY.UnaryOperation
import org.xtext.fLY.PostfixOperation
import org.xtext.fLY.ParenthesizedExpression
import org.xtext.fLY.NumberLiteral
import org.xtext.fLY.BooleanLiteral
import org.xtext.fLY.StringLiteral
import org.xtext.fLY.FloatLiteral
import org.xtext.fLY.VariableLiteral
import org.xtext.fLY.NameObject
import org.xtext.fLY.IndexObject
import org.xtext.fLY.DatSingleObject
import org.xtext.fLY.DatTableObject
import org.xtext.fLY.CastExpression
import org.xtext.fLY.MathFunction
import org.xtext.fLY.FunctionInput
import org.xtext.fLY.NameObjectDef
import org.eclipse.emf.ecore.EObject
import org.xtext.fLY.Fly
import org.xtext.fLY.DatDeclaration
import org.xtext.fLY.VariableFunction
import org.xtext.fLY.RangeLiteral
import org.xtext.fLY.EnvironmentDeclaration
import org.xtext.fLY.DeclarationObject
import org.xtext.fLY.DeclarationFeature
import org.xtext.fLY.FlyFunctionCall
import org.xtext.fLY.SortExpression
import org.xtext.fLY.LocalFunctionInput
import org.xtext.fLY.TimeFunction
import com.google.inject.Inject
import org.xtext.fLY.ArrayDefinition
import org.xtext.fLY.ConstantDeclaration
import org.xtext.fLY.ArrayInit
import org.xtext.fLY.ArrayValue
import org.xtext.fLY.ForIndex
import org.xtext.fLY.NativeExpression
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FLYGenerator extends AbstractGenerator {
	
	@Inject FLYGeneratorPython pyGen
	@Inject FLYGeneratorJs	jsGen

	HashMap<String, HashMap<String, String>> typeSystem = new HashMap<String, HashMap<String, String>>(); // memory hash
	var name = ""
	var func_ID = 0
	var file_deploy_id = 0
	var id_execution = System.currentTimeMillis
	var last_func_result = null
	var deployed_function = new ArrayList<String>();
	Resource res = null

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		res = resource;
		var name_extension = resource.URI.toString.split('/').last
		name = name_extension.toString.split('.fly').get(0)
		//fsa.generateFile(".fly_config.txt",resource.compileConfig)
		// generate .java file
		typeSystem.put("main", new HashMap<String, String>())
		fsa.generateFile(name + ".java", resource.compileJava)
		
		// generate .js or .py file
		for (element : resource.allContents.toIterable.filter(FlyFunctionCall)) {
			var type_env = ((element.environment.right as DeclarationObject).features.get(0) as DeclarationFeature).
				value_s;
			if(type_env.equals("local") && ((element.environment.right as DeclarationObject).features.length==3)){
				if(((element.environment.right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.contains("python"))
					pyGen.generatePython(resource,fsa,context,name,element.target,element.environment,typeSystem,id_execution,true);
				else
					jsGen.generateJS(resource,fsa,context,name,element.target,element.environment,typeSystem,id_execution,true);	
			}
			if (type_env != "local") {
				var language = ((element.environment.right as DeclarationObject).features.get(4) as DeclarationFeature).
				value_s;
				if (language.contains("python")){
					pyGen.generatePython(resource,fsa,context,name,element.target,element.environment,typeSystem,id_execution,false); 
				}else if (language.contains("nodejs")) {
					jsGen.generateJS(resource,fsa,context,name,element.target,element.environment,typeSystem,id_execution,false);
				}
			}
		}
	}
	
		
	def CharSequence compileJava(Resource resource) '''
		import java.io.File;
		import java.io.FileInputStream;
		import java.io.InputStreamReader;
		import java.io.FileOutputStream;
		import java.io.OutputStreamWriter;
		import java.io.IOException;
		import java.nio.ByteBuffer;
		import java.nio.channels.FileChannel;
		import java.nio.file.StandardOpenOption;
		import java.io.InputStream;
		import java.net.ServerSocket;
		import java.net.Socket;
		import java.io.BufferedReader;
		import java.util.ArrayList;
		import java.util.Arrays;
		import java.util.List;
		import java.util.zip.ZipEntry;
		import java.util.zip.ZipOutputStream;
		import java.io.BufferedWriter;
		import java.io.FileWriter;
		import java.io.IOException;
		import java.util.HashMap;
		import java.time.LocalDate;
		import tech.tablesaw.api.Table;
		import tech.tablesaw.io.csv.CsvReadOptions;
		import tech.tablesaw.columns.Column;
		import tech.tablesaw.selection.Selection;
		import tech.tablesaw.table.Rows;
		import tech.tablesaw.api.Row;
		import java.util.concurrent.LinkedTransferQueue;
		import java.util.concurrent.ExecutorService;
		import java.util.concurrent.Executors;
		import java.util.concurrent.ExecutionException;
		import java.util.ArrayList;
		import java.util.List;
		import java.util.concurrent.Callable;
		import java.util.concurrent.Future;
		import java.util.concurrent.atomic.AtomicInteger;
		import java.util.Random;
		import java.util.Collections;
		import java.util.Comparator;
		import java.util.Map;
		import java.util.Scanner;
		import com.amazonaws.AmazonClientException;
		import com.amazonaws.auth.AWSStaticCredentialsProvider;
		import com.amazonaws.auth.BasicAWSCredentials;
		import com.amazonaws.auth.profile.ProfileCredentialsProvider;
		import com.amazonaws.services.identitymanagement.AmazonIdentityManagement;
		import com.amazonaws.services.identitymanagement.AmazonIdentityManagementClientBuilder;
		import com.amazonaws.services.identitymanagement.model.CreateRoleRequest;
		import com.amazonaws.services.identitymanagement.model.CreateRoleResult;
		import com.amazonaws.services.identitymanagement.model.DeleteRolePolicyRequest;
		import com.amazonaws.services.identitymanagement.model.DeleteRoleRequest;
		import com.amazonaws.services.identitymanagement.model.PutRolePolicyRequest;
		import com.amazonaws.services.lambda.AWSLambda;
		import com.amazonaws.services.lambda.AWSLambdaClientBuilder;
		import com.amazonaws.services.lambda.model.AddPermissionRequest;
		import com.amazonaws.services.lambda.model.AddPermissionResult;
		import com.amazonaws.services.lambda.model.CreateFunctionRequest;
		import com.amazonaws.services.lambda.model.CreateFunctionResult;
		import com.amazonaws.services.lambda.model.DeleteFunctionRequest;
		import com.amazonaws.services.lambda.model.FunctionCode;
		import com.amazonaws.services.lambda.model.InvokeRequest;
		import com.amazonaws.services.sqs.AmazonSQS;
		import com.amazonaws.services.sqs.model.Message;
		import com.amazonaws.services.sqs.AmazonSQSClient;
		import com.amazonaws.services.sqs.model.CreateQueueRequest;
		import com.amazonaws.services.sqs.model.CreateQueueResult;
		import com.amazonaws.services.sqs.model.ReceiveMessageRequest;
		import com.amazonaws.services.sqs.model.ReceiveMessageResult;
		import com.amazonaws.services.sqs.model.SendMessageRequest;
		import com.amazonaws.services.sqs.model.AmazonSQSException;
		import com.amazonaws.services.sqs.model.GetQueueAttributesRequest;
		import com.amazonaws.services.sqs.model.GetQueueUrlResult;
		import com.amazonaws.services.sqs.model.DeleteQueueRequest;
		import com.amazonaws.services.identitymanagement.model.GetRoleRequest;
		import com.amazonaws.services.identitymanagement.model.GetRoleResult;
		import com.amazonaws.services.s3.AmazonS3;
		import com.amazonaws.services.s3.AmazonS3Client;
		import com.amazonaws.services.s3.AmazonS3ClientBuilder;
		import com.amazonaws.services.s3.model.AmazonS3Exception;
		import com.amazonaws.services.s3.model.Bucket;
		import com.amazonaws.services.s3.model.CannedAccessControlList;
		import com.amazonaws.services.s3.model.PutObjectRequest;
		import com.amazonaws.services.s3.model.ListObjectsV2Result;
		import com.amazonaws.services.s3.model.PutObjectRequest;
		import com.amazonaws.services.s3.model.S3ObjectSummary;
		import com.google.gson.Gson;
		import com.google.gson.reflect.TypeToken;
		
		
		
		public class «name» {
			
			static HashMap<String,HashMap<String, Object>> __fly_environment = new HashMap<String,HashMap<String,Object>>();
			
			«FOR element : (resource.allContents.toIterable.filter(Expression))»
				«IF element instanceof ChannelDeclaration»
					«generateChannelDeclaration(element)»	
					
				«ENDIF»
				«IF element instanceof ConstantDeclaration»
					«generateConstantDeclaration(element,"main")»	
				«ENDIF»
				«IF element instanceof EnvironmentDeclaration»
					«generateEnvironmentDeclaration(element)»
					
				«ENDIF»
			«ENDFOR»
					
			static long  __id_execution =  System.currentTimeMillis();
			
			public static void main(String[] args) throws Exception{
								
				«FOR element : resource.allContents.toIterable.filter(EnvironmentDeclaration)»
					«setEnvironmentDeclarationInfo(element)»
				«ENDFOR»
				
				
				«IF resource.allContents.toIterable.filter(DatDeclaration).filter[onCloud].length > 0»
					if(!__s3.doesBucketExist("bucket-"+__id_execution)){
						__s3.createBucket("bucket-"+__id_execution);
					}
				«ENDIF»
				
				«FOR element: resource.allContents.toIterable.filter(EnvironmentDeclaration)
				.filter[!(right as DeclarationObject).features.get(0).value_s.equals("local")]»
					ExecutorService __thread_pool_«element.name» = Executors.newFixedThreadPool((int) __fly_environment.get("local").get("nthread"));
				«ENDFOR»
				
				«FOR element: resource.allContents.toIterable.filter(DatDeclaration).filter[onCloud]»
						«deployFileOnCloud(element,file_deploy_id++)»
						
				«ENDFOR»
				
				«FOR element: resource.allContents.toIterable.filter(FlyFunctionCall)
				.filter[!(environment.right as DeclarationObject).features.get(0).equals("local")]»
					«deployFlyFunctionOnCloud(element)»
				«ENDFOR»
				
								
				«FOR element : resource.allContents.toIterable.filter(Expression)»
					«IF checkBlock(element.eContainer)==false»
						«generateExpression(element,"main")»
					«ENDIF»
				«ENDFOR»

				«FOR element: resource.allContents.toIterable.filter(FlyFunctionCall)
				.filter[!(environment.right as DeclarationObject).features.get(0).equals("local")]»
					«undeployFlyFunctionOnCloud(element)»
				«ENDFOR»
				
				«FOR element: resource.allContents.toIterable.filter(EnvironmentDeclaration)
				.filter[!(right as DeclarationObject).features.get(0).value_s.equals("local")]»
					__thread_pool_«element.name».shutdown();
				«ENDFOR»
						
				System.exit(0);
			}
				
			«FOR element : resource.allContents.toIterable.filter(FunctionDefinition)»
				«IF checkBlock(element.eContainer)==false»
					«generateFunctionDefinition(element)»
				«ENDIF»	
			«ENDFOR»	
			
			private static String __generateString(Table t) {
				StringBuilder b = new StringBuilder();
				b.append("[");
				int i_r = t.rowCount();
				for(Row r : t) {
					b.append('{');
					for (int i=0;i< r.columnCount();i++) {
						b.append("\""+ r.columnNames().get(i) +"\":"+r.getObject(i)+ ((i<r.columnCount()-1)?",":""));
					}
					b.append("}"+(((i_r != 1 ))?",":""));
					i_r--;
				}
				b.append("]");
				return b.toString();
			}
			
			private static String __generateString(String s) {
				StringBuilder b = new StringBuilder();
				b.append("[");
				String[] tmp = s.split("\n");
				for(String t: tmp){
					b.append(t);
					if(t != tmp[tmp.length-1]){
						b.append(",");
					}
				}
				b.append("]");
				return b.toString();
			}
		}
	'''
		
		def undeployFlyFunctionOnCloud(FlyFunctionCall call) {
			if(deployed_function.contains(call.target.name)){
				deployed_function.remove(call.target.name)
				return '''
				Runtime.getRuntime().exec("chmod +x src-gen/«call.target.name»_undeploy.sh");
				ProcessBuilder __processBuilder_undeploy_«call.target.name» = new ProcessBuilder("/bin/bash", "-c", "src-gen/«call.target.name»_undeploy.sh «call.target.name» "+__id_execution);
				Process __p_undeploy_«call.target.name»;
				try {
					__p_undeploy_«call.target.name»= __processBuilder_undeploy_«call.target.name».start();
					__p_undeploy_«call.target.name».waitFor();
					if(__p_undeploy_«call.target.name».exitValue()!=0){
						System.out.println("Error in «call.target.name»_undeploy.sh ");
						System.exit(1);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				'''				
			}else
				return ''''''
		}
		
		def deployFlyFunctionOnCloud(FlyFunctionCall call) {
			if (!deployed_function.contains(call.target.name)){
				deployed_function.add(call.target.name)
				return '''
					Runtime.getRuntime().exec("chmod +x src-gen/«call.target.name»_deploy.sh");
					ProcessBuilder __processBuilder_deploy_«call.target.name» = new ProcessBuilder("/bin/bash", "-c", "src-gen/«call.target.name»_deploy.sh «call.target.name» "+__id_execution);
					__processBuilder_deploy_«call.target.name».redirectOutput(ProcessBuilder.Redirect.INHERIT);
					Map<String, String> __env = __processBuilder_deploy_«call.target.name».environment();
					__processBuilder_deploy_«call.target.name».redirectError(ProcessBuilder.Redirect.INHERIT);
					String __path_env = __env.get("PATH");
					if (!__path_env.contains("/usr/local/bin")) {
						 __env.put("PATH", __path_env+":/usr/local/bin");
					}
					Process __p_deploy_«call.target.name»;
					try {
						__p_deploy_«call.target.name» = __processBuilder_deploy_«call.target.name».start();
						__p_deploy_«call.target.name».waitFor();
						if(__p_deploy_«call.target.name».exitValue()!=0){
							System.out.println("Error in «call.target.name»_deploy.sh ");
							System.exit(1);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
					«IF  !call.isIsAsync »
					«ENDIF»
					'''
			}
			else 
			return''''''
		}
		
	def generateExpression(Expression element, String scope) {
		'''
			«IF element  instanceof VariableDeclaration»
				«generateVariableDeclaration(element,scope)»
			«ENDIF»
			«IF element instanceof DatDeclaration»
				«generateDatDeclaration(element,scope)»
			«ENDIF»
			«IF element instanceof RandomDeclaration»
				«generateRandomDeclaration(element)»
			«ENDIF»
			«IF element instanceof Assignment»
				«generateAssignment(element,scope)»
			«ENDIF»
			«IF element instanceof PrintExpression»
				«generatePrintExpression(element,scope)»
			«ENDIF»
			«IF element instanceof IfExpression»
				«generateIfExpression(element,scope)»
			«ENDIF»
			«IF element instanceof ForExpression»
				«generateForExpression(element,scope)»
			«ENDIF»
			«IF element instanceof WhileExpression»
				«generateWhileExpression(element,scope)»
			«ENDIF»
			«IF element instanceof ChannelSend»
				«generateChannelSend(element,scope)»;
			«ENDIF»
			«IF element instanceof ChannelReceive»
				«generateChannelReceive(element,scope)»;
			«ENDIF»
			«IF element instanceof FlyFunctionCall»
				«generateFlyFunctionCall(element,scope)»
			«ENDIF»
			«IF element instanceof LocalFunctionCall»
				«generateLocalFunctionCall(element,scope)»
			«ENDIF»
			«IF element instanceof FunctionReturn»
				«generateFunctionReturn(element,scope)»
			«ENDIF»
			«IF element instanceof BlockExpression»
				«generateBlockExpression(element,scope)»
			«ENDIF»
			«IF element instanceof VariableFunction»
				«generateVariableFunction(element,true,scope)»
			«ENDIF»
			«IF element instanceof ChannelDeclaration»
				«generateChanelDeclarationForCloud(element)»
			«ENDIF»
			«IF element instanceof ChannelDeclaration»
				«generateChannelDeclarationForLanguage(element)»
			«ENDIF»
			«IF element instanceof SortExpression»
				«generateSortExpression(element,scope)»
			«ENDIF»
			«IF element instanceof PostfixOperation»
				«generatePostfixOperation(element,scope)»
			«ENDIF»
		'''
	}
		
		def generatePostfixOperation(PostfixOperation exp, String scope) {
			return '''
				«generateArithmeticExpression(exp.variable,scope)»«exp.feature»;
			'''
		}

	def generateSortExpression(SortExpression exp, String scope) {
		return '''
			ArrayList<Entry<Object,Object>> __sup = new ArrayList<Entry<Object,Object>>(«exp.target.name».entrySet());
			Collections.sort(__sup, new Comparator<Entry<Object,Object>>() {
			
						public int compare(Entry<Object,Object> o1, Entry<Object,Object> o2) {
							// TODO Auto-generated method stub
							if(o1.getValue() instanceof Integer && o2.getValue() instanceof Integer)
								return Integer.compare((Integer) o1.getValue(),(Integer) o2.getValue());
							else if(o1.getValue() instanceof Double && o2.getValue() instanceof Double)
								return Double.compare((Double) o1.getValue(), (Double) o2.getValue());
							else return 0;
						}
						
					});
					
			«exp.target.name».clear();
			
			«IF exp.type.equals("desc")»
				Collections.reverse(__sup);
			«ENDIF»
			
			for (int __i=0; __i<__sup.size();__i++) {
				«exp.target.name».put(""+__i, __sup.get(__i).getValue());
			}
		'''
	}

	// methods for Variable Declaration 
	def generateVariableDeclaration(VariableDeclaration dec, String scope) {
		if (dec.typeobject.equals('var')) { // var declaration
			if (dec.right instanceof NameObjectDef) { // if is a NameObject
				typeSystem.get(scope).put(dec.name, "HashMap")
				var s = '''HashMap<Object,Object> «dec.name» = new HashMap<Object,Object>();
				'''
				var i = 0;
				for (f : (dec.right as NameObjectDef).features) {
					if (f.feature != null) {
						typeSystem.get(scope).put(dec.name + "." + f.feature,
							valuateArithmeticExpression(f.value, scope))
						s = s + '''«dec.name».put("«f.feature»",«generateArithmeticExpression(f.value,scope)»);
						'''
					} else {
						typeSystem.get(scope).put(dec.name + "[" + i + "]", valuateArithmeticExpression(f.value, scope))
						s = s + '''«dec.name».put(«i»,«generateArithmeticExpression(f.value,scope)»);
						'''
						i++
					}

				}
				return s
			} else if(dec.right instanceof ArrayDefinition){
				var type_decl = (dec.right as ArrayDefinition).type
				var real_type = ""
				if(type_decl.equals("Integer")){
					real_type = "int"
				}else if(type_decl.equals("Double")){
					real_type = "double"
				}else if(type_decl.equals("String")){
					real_type = "String"
				}
				if((dec.right as ArrayDefinition).indexes.length==1){ //mono-dimensional
					typeSystem.get(scope).put(dec.name, "Array_"+type_decl)
					var array_len = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var s = '''«real_type»[] «dec.name» = new «real_type»[«array_len»];'''
					return s
				} else if((dec.right as ArrayDefinition).indexes.length==2){ //bi-dimensional
					var row = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var col = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(1).value,scope)
					typeSystem.get(scope).put(dec.name, "Matrix_"+type_decl+"_"+col)
					
					var s = '''«real_type»[][] «dec.name» = new «real_type»[«row»][«col»];'''
					return s
				} else if ((dec.right as ArrayDefinition).indexes.length==3) { //three-dimensional
					var row = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var col = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(1).value,scope)
					var dep = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(2).value,scope)
					typeSystem.get(scope).put(dec.name, "Matrix_"+type_decl+"_"+col+"_"+dep)
					var s = '''«real_type»[][][] «dec.name» = new «real_type»[«row»][«col»][«dep»];'''
					return s
				}
				
				
			}else if(dec.right instanceof ArrayInit){
			
				if(((dec.right as ArrayInit).values.get(0) instanceof NumberLiteral) ||
					((dec.right as ArrayInit).values.get(0) instanceof StringLiteral) ||
					((dec.right as ArrayInit).values.get(0) instanceof FloatLiteral)
				){ //array init
					var real_type = valuateArithmeticExpression((dec.right as ArrayInit).values.get(0) as ArithmeticExpression,scope)

					typeSystem.get(scope).put(dec.name,"Array_"+real_type)
					return '''
						«real_type» [] «dec.name» = {«FOR e: (dec.right as ArrayInit).values»«generateArithmeticExpression(e as ArithmeticExpression,scope)»«IF e != (dec.right as ArrayInit).values.last »,«ENDIF»«ENDFOR»};
					'''
				} else if ((dec.right as ArrayInit).values.get(0) instanceof ArrayValue){ //matrix 2d
					if(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof NumberLiteral ||
						((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof StringLiteral ||
						((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof FloatLiteral){
						var real_type = valuateArithmeticExpression(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArithmeticExpression,scope)
						var col = (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
						typeSystem.get(scope).put(dec.name,"Matrix_"+real_type+"_"+col)
						var ret = '''«real_type» [][] «dec.name» = {'''
						for (e : (dec.right as ArrayInit).values){
							ret+='''{'''
							for(e1: (e as ArrayValue).values){
								ret+=generateArithmeticExpression(e1 as ArithmeticExpression,scope)
								if(e1!= (e as ArrayValue).values.last){
									ret+=''','''
								}
							}
							ret+='''}'''
							if (e !=  (dec.right as ArrayInit).values.last){
								ret+=''','''
							}
						}
						ret+='''};'''
						return ret
					}else if (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof ArrayValue){ //matrix 3d
						if ((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof NumberLiteral ||
							(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof StringLiteral ||
							(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof FloatLiteral ){
							var real_type = valuateArithmeticExpression((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) as ArithmeticExpression,scope)
							var col = (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
							var dep = ((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
							typeSystem.get(scope).put(dec.name,"Matrix_"+real_type+"_"+col+"_"+dep)
							var ret = '''«real_type» [][][] «dec.name» = {'''
							for (e : (dec.right as ArrayInit).values){
								ret+='''{'''
								for(e1: (e as ArrayValue).values){
									ret+='''{'''
									for(e2: ((e1 as ArrayValue).values)){
										ret+=generateArithmeticExpression(e2 as ArithmeticExpression,scope)
										if(e2!= (e1 as ArrayValue).values.last){
											ret+=''','''
										}
									}
									ret+='''}'''
									if(e1!= (e as ArrayValue).values.last){
										ret+=''','''
									}
								}
								ret+='''}'''
								if (e !=  (dec.right as ArrayInit).values.last){
									ret+=''','''
								}
							}
							ret+='''};'''
							return ret	
						}
					}
					
				}
			} else if (dec.right instanceof FlyFunctionCall) {
				var s = '''
					«generateFlyFunctionCall(dec.right as FlyFunctionCall,scope)»
					List<Future<Object>> «dec.name» = «last_func_result»;
				'''
				typeSystem.get(scope).put(dec.name, "FutureList")
				return s
			} else if (dec.right instanceof ChannelReceive) {
				var s = '''
					Object «dec.name» = null;
					try{
						e = «generateChannelReceive(dec.right as ChannelReceive,scope)»
					}catch(InterruptedException e1){
						e1.printStackTrace();
					}
				'''
				return s
			} else if (dec.right instanceof VariableFunction) {
				if ((dec.right as VariableFunction).feature.equals("split")) {
					typeSystem.get(scope).put(dec.name, "HashMap")
					return '''
						HashMap<Object,Object> «dec.name» = new HashMap<Object,Object>();
						int _«dec.name»_crt=0;
						for(String _«dec.name» : «(dec.right as VariableFunction).target.name».«(dec.right as VariableFunction).feature»(«generateArithmeticExpression((dec.right as VariableFunction).expressions.get(0),scope)»)){
							«dec.name».put(_«dec.name»_crt++,_«dec.name»);
						}
					'''
				} else {
					typeSystem.get(scope).put(dec.name,
						valuateArithmeticExpression(dec.right as VariableFunction, scope))
					return '''
						«valuateArithmeticExpression(dec.right as VariableFunction,scope)» «dec.name» = «generateArithmeticExpression(dec.right as VariableFunction,scope)»;
					'''
				}

			} else if (dec.right instanceof CastExpression && ((dec.right as CastExpression).target instanceof ChannelReceive)){
					if((((dec.right as CastExpression).target as ChannelReceive).target.environment.right as DeclarationObject).features.get(0).value_s.equals("aws") ||
						((((dec.right as CastExpression).target as ChannelReceive).target.environment.right as DeclarationObject).features.get(0).value_s.equals("local") &&
							(((dec.right as CastExpression).target as ChannelReceive).target.environment.right as DeclarationObject).features.length==3
						)){
						if((dec.right as CastExpression).type.equals("Object")){
							typeSystem.get(scope).put(dec.name, "HashMap")
							return '''
								String __res_«((dec.right as CastExpression).target as ChannelReceive).target.name» = (String) «((dec.right as CastExpression).target as ChannelReceive).target.name».take();
								HashMap «dec.name» = new Gson().fromJson(__res_«((dec.right as CastExpression).target as ChannelReceive).target.name»,new TypeToken<HashMap<String, String>>() {}.getType());
							'''
						} else if ((dec.right as CastExpression).type.equals("Integer")) {
							typeSystem.get(scope).put(dec.name, "Integer")
							return '''
								String __res_«((dec.right as CastExpression).target as ChannelReceive).target.name» = (String) «((dec.right as CastExpression).target as ChannelReceive).target.name».take();
								int «dec.name» = Integer.parseInt(__res_«((dec.right as CastExpression).target as ChannelReceive).target.name»);
							'''
						}else if((dec.right as CastExpression).type.equals("Float")){
							typeSystem.get(scope).put(dec.name, "Double")
							return '''
								String __res_«((dec.right as CastExpression).target as ChannelReceive).target.name» = (String) «((dec.right as CastExpression).target as ChannelReceive).target.name».take();
								double «dec.name» = Double.parseDouble(__res_«((dec.right as CastExpression).target as ChannelReceive).target.name»);
							'''
						} else if((dec.right as CastExpression).type.equals("String")){
							typeSystem.get(scope).put(dec.name, "String")
							return '''
								String «dec.name» = (String) «((dec.right as CastExpression).target as ChannelReceive).target.name».take();
							'''
						}
					}else if((((dec.right as CastExpression).target as ChannelReceive).target.environment.right as DeclarationObject).features.get(0).value_s.equals("local") ){ 
						typeSystem.get(scope).put(dec.name, valuateArithmeticExpression((dec.right as CastExpression),scope))
						println( typeSystem.get(scope))
						return '''
							«valuateArithmeticExpression((dec.right as CastExpression),scope)» «dec.name» = («valuateArithmeticExpression((dec.right as CastExpression),scope)») «((dec.right as CastExpression).target as ChannelReceive).target.name».take(); 
						'''
					}
				}  else { // if is an Expression to evaluate
				typeSystem.get(scope).put(dec.name,
					valuateArithmeticExpression(dec.right as ArithmeticExpression, scope))
				//println(dec.name + " --- " + typeSystem.get(scope).get(dec.name));
				return '''«valuateArithmeticExpression(dec.right as ArithmeticExpression,scope)» «dec.name» = «generateArithmeticExpression(dec.right as ArithmeticExpression,scope)»;'''
			}
		}
	}
	
	def generateConstantDeclaration(ConstantDeclaration dec, String scope) {//DA MODIFICARE ASSOLUTAMENTE FATTO SOLO PER FAR FUNZIONARE JS
		if (dec.right instanceof NameObjectDef){ 
				typeSystem.get(scope).put(dec.name, "HashMap")
				var s = '''static HashMap<Object,Object> «dec.name» = new HashMap<Object,Object>();
				'''
				var i = 0;
				for (f : (dec.right as NameObjectDef).features) {
					if (f.feature != null) {
						typeSystem.get(scope).put(dec.name + "." + f.feature,
							valuateArithmeticExpression(f.value, scope))
						//s = s + '''«dec.name».put("«f.feature»",«generateArithmeticExpression(f.value,scope)»);
						//'''
					} else {
						typeSystem.get(scope).put(dec.name + "[" + i + "]", valuateArithmeticExpression(f.value, scope))
						//s = s + '''«dec.name».put(«i»,«generateArithmeticExpression(f.value,scope)»);
						//'''
						i++
					}

				}
				return s			
		} else if(dec.right instanceof ArrayDefinition){
			var type_decl = (dec.right as ArrayDefinition).type
				var real_type = ""
				if(type_decl.equals("Integer")){
					real_type = "int"
				}else if(type_decl.equals("Double")){
					real_type = "double"
				}else if(type_decl.equals("String")){
					real_type = "String"
				}
				if((dec.right as ArrayDefinition).indexes.length==1){ //mono-dimensional
					typeSystem.get(scope).put(dec.name, "Array_"+type_decl)
					var array_len = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var s = '''static «real_type»[] «dec.name» = new «real_type»[«array_len»];'''
					return s
				} else if((dec.right as ArrayDefinition).indexes.length==2){ //bi-dimensional
					var row = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var col = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(1).value,scope)
					typeSystem.get(scope).put(dec.name, "Matrix_"+type_decl+"_"+col)
					
					var s = '''static «real_type»[][] «dec.name» = new «real_type»[«row»][«col»];'''
					return s
				} else if ((dec.right as ArrayDefinition).indexes.length==3) { //three-dimensional
					var row = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var col = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(1).value,scope)
					var dep = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(2).value,scope)
					typeSystem.get(scope).put(dec.name, "Matrix_"+type_decl+"_"+col+"_"+dep)
					var s = '''static «real_type»[][][] «dec.name» = new «real_type»[«row»][«col»][«dep»];'''
					return s
				}
		}else if(dec.right instanceof ArrayInit){
			
				if(((dec.right as ArrayInit).values.get(0) instanceof NumberLiteral) ||
					((dec.right as ArrayInit).values.get(0) instanceof StringLiteral) ||
					((dec.right as ArrayInit).values.get(0) instanceof FloatLiteral)
				){ //array init
					var real_type = valuateArithmeticExpression((dec.right as ArrayInit).values.get(0) as ArithmeticExpression,scope)

					typeSystem.get(scope).put(dec.name,"Array_"+real_type)
					return '''
						final static «real_type» [] «dec.name» = {«FOR e: (dec.right as ArrayInit).values»«generateArithmeticExpression(e as ArithmeticExpression,scope)»«IF e != (dec.right as ArrayInit).values.last »,«ENDIF»«ENDFOR»};
					'''
				} else if ((dec.right as ArrayInit).values.get(0) instanceof ArrayValue){ //matrix 2d
					if(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof NumberLiteral ||
						((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof StringLiteral ||
						((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof FloatLiteral){
						var real_type = valuateArithmeticExpression(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArithmeticExpression,scope)
						var col = (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
						typeSystem.get(scope).put(dec.name,"Matrix_"+real_type+"_"+col)
						var ret = '''final static «real_type» [][] «dec.name» = {'''
						for (e : (dec.right as ArrayInit).values){
							ret+='''{'''
							for(e1: (e as ArrayValue).values){
								ret+=generateArithmeticExpression(e1 as ArithmeticExpression,scope)
								if(e1!= (e as ArrayValue).values.last){
									ret+=''','''
								}
							}
							ret+='''}'''
							if (e !=  (dec.right as ArrayInit).values.last){
								ret+=''','''
							}
						}
						ret+='''};'''
						return ret
					}else if (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof ArrayValue){ //matrix 3d
						if ((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof NumberLiteral ||
							(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof StringLiteral ||
							(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof FloatLiteral ){
							var real_type = valuateArithmeticExpression((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) as ArithmeticExpression,scope)
							var col = (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
							var dep = ((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
							typeSystem.get(scope).put(dec.name,"Matrix_"+real_type+"_"+col+"_"+dep)
							var ret = '''final static «real_type» [][][] «dec.name» = {'''
							for (e : (dec.right as ArrayInit).values){
								ret+='''{'''
								for(e1: (e as ArrayValue).values){
									ret+='''{'''
									for(e2: ((e1 as ArrayValue).values)){
										ret+=generateArithmeticExpression(e2 as ArithmeticExpression,scope)
										if(e2!= (e1 as ArrayValue).values.last){
											ret+=''','''
										}
									}
									ret+='''}'''
									if(e1!= (e as ArrayValue).values.last){
										ret+=''','''
									}
								}
								ret+='''}'''
								if (e !=  (dec.right as ArrayInit).values.last){
									ret+=''','''
								}
							}
							ret+='''};'''
							return ret	
						}
					}
					
				}
			} else if(dec.right instanceof ArithmeticExpression){
			typeSystem.get(scope).put(dec.name,
					valuateArithmeticExpression(dec.right as ArithmeticExpression, scope))
				//println(dec.name + " --- " + typeSystem.get(scope).get(dec.name));
				return '''static «valuateArithmeticExpression(dec.right as ArithmeticExpression,scope)» «dec.name» = «generateArithmeticExpression(dec.right as ArithmeticExpression,scope)»;'''
			
		}
	}
		
	
	def deployFileOnCloud(DatDeclaration dec,long id) {
			var path = (dec.right as DeclarationObject).features.get(1).value_s
			if( ! path.contains("https://")){ // local 
					var name_file_ext = path.split("/").last
					var name_file = name_file_ext.substring(0,name_file_ext.indexOf('.')).replaceAll("-","_")
					return '''
						ListObjectsV2Result __result__listObjects_«id» = __s3.listObjectsV2("bucket-"+__id_execution);
						List<S3ObjectSummary> __result_objects_«id» = __result__listObjects_«id».getObjectSummaries();
						Boolean __exists_«name_file»_«id»=false;
						for (S3ObjectSummary os: __result_objects_«id») {
						    if(os.getKey().equals("«name_file_ext»")){
						    	__exists_«name_file»_«id» = true;
						    	break;
						    }
						}
						if(!__exists_«name_file»_«id»){
							PutObjectRequest __putObjectRequest = new PutObjectRequest("bucket-"+__id_execution, "«name_file_ext»" , new File("«path»"));
							__putObjectRequest.setCannedAcl(CannedAccessControlList.PublicReadWrite);
							__s3.putObject(__putObjectRequest);
						}
					'''
			} 

		}
	


	def generateEnvironmentDeclaration(EnvironmentDeclaration dec) {
		var env = ((dec.right as DeclarationObject).features.get(0)).value_s
		if (env.equals("local")){
			return '''
				static ExecutorService __thread_pool_«dec.name» = Executors.newFixedThreadPool(«((dec.right as DeclarationObject).features.get(1)).value_t»);
			'''
		}
		else if (env.equals("aws")) {
			var access_id_key = ((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
			var secret_access_key = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s
			var region = ((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
			return '''
				
				static BasicAWSCredentials «dec.name» = new BasicAWSCredentials("«access_id_key»", "«secret_access_key»");
				
				static AmazonSQS __sqs  = AmazonSQSClient.builder()
					.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
					.withRegion("«region»")
					.build();
				
				static AmazonIdentityManagement __iam = AmazonIdentityManagementClientBuilder.standard()
					.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
					.withRegion("«region»")
					.build();
					
				static AWSLambda __lambda = AWSLambdaClientBuilder.standard()
					.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
					.withRegion("«region»")
					.build();
					
				static AmazonS3 __s3 = AmazonS3Client.builder()
					.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
					.withRegion("«region»")
					.build();
			'''
		}
	}
	
	def setEnvironmentDeclarationInfo(EnvironmentDeclaration dec){
		var env = ((dec.right as DeclarationObject).features.get(0)).value_s
		if (env.equals("local")){
			return '''
				__fly_environment.put("«env»", new HashMap<String,Object>());
				__fly_environment.get("«env»").put("nthread",«((dec.right as DeclarationObject).features.get(1)).value_t»);
				«IF (dec.right as DeclarationObject).features.length==3»
				__fly_environment.get("«env»").put("language","«((dec.right as DeclarationObject).features.get(2)).value_s»");
				«ENDIF»
			'''
		}
		else if (env.equals("aws")) {
			var threads = ((dec.right as DeclarationObject).features.get(5) as DeclarationFeature).value_t
			var memory = ((dec.right as DeclarationObject).features.get(6) as DeclarationFeature).value_t
			var time = ((dec.right as DeclarationObject).features.get(7) as DeclarationFeature).value_t
			var language =  ((dec.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s
			return '''
				__fly_environment.put("«env»", new HashMap<String,Object>());
				__fly_environment.get("«env»").put("nthread",«threads»);
				__fly_environment.get("«env»").put("memory",«memory»);
				__fly_environment.get("«env»").put("time",«time»);
				__fly_environment.get("«env»").put("language","«language»");
			'''
		}
	}

	def generateChannelDeclaration(ChannelDeclaration declaration) { 
			var env = (declaration.environment.right as DeclarationObject).features.get(0).value_s
			return '''
				static LinkedTransferQueue<Object> «declaration.name» = new LinkedTransferQueue<Object>();
				«IF ! env.equals("local")»
					static Boolean __wait_on_«declaration.name» = true;
				«ENDIF»
				«IF (declaration.environment.right as DeclarationObject).features.length == 3 »
					static ServerSocket __socket_server_«declaration.name»;
				«ENDIF»
			'''
	}
	
	def generateChannelDeclarationForLanguage(ChannelDeclaration declaration){
		var env = ((declaration.environment.right as DeclarationObject).features.get(0)).value_s
		if(env.equals("local") && (declaration.environment.right as DeclarationObject).features.length==3){
			return '''
				__socket_server_«declaration.name»= new ServerSocket(9090);
				__thread_pool_«declaration.environment.name».submit(new Runnable() {
							
					public void run() {
						try {
							while(true) {
				                Socket __socket = __socket_server_«declaration.name».accept();
				                InputStreamReader __isr = new InputStreamReader(__socket.getInputStream());
				                BufferedReader __br = new BufferedReader(__isr);
				                String __response = __br.readLine();
				                __socket.close();
							    «declaration.name».put(__response);
							}
						}catch (Exception e) {
							
						}
					}
				});
			'''
		}
		return ''''''
	}

	def generateChanelDeclarationForCloud(ChannelDeclaration declaration) { // create a queue on AWS
		var env = ((declaration.environment.right as DeclarationObject).features.get(0)).value_s
		var local = ( res.allContents.toIterable.filter(EnvironmentDeclaration)
		.filter[(right as DeclarationObject).features.get(0).value_s.equals("local")].get(0) as EnvironmentDeclaration).name
		if (env.equals("aws")) {
			return '''
				__sqs.createQueue(new CreateQueueRequest("«declaration.name»_"+__id_execution));
				
				for(int __i=0;__i< (Integer)__fly_environment.get("«local»").get("nthread");__i++){ 
					__thread_pool_«local».submit(new Callable<Object>() {
						@Override
						public Object call() throws Exception {
							while(__wait_on_«declaration.name») {
								ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl("«declaration.name»_"+__id_execution).getQueueUrl()).
										withWaitTimeSeconds(1).withMaxNumberOfMessages(10);
								ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
								for(Message msg : __res.getMessages()) { 
									«declaration.name».put(msg.getBody());
									__sqs.deleteMessage(__sqs.getQueueUrl("«declaration.name»_"+__id_execution).getQueueUrl(), msg.getReceiptHandle());
								}
							}
							return null;
						}
					});
				}
			'''
		}
	}

	def generateDatDeclaration(DatDeclaration dec, String scope) {
		
		if (dec.right instanceof DeclarationObject) {
			var type = (dec.right as DeclarationObject).features.get(2).value_s
			var path = (dec.right as DeclarationObject).features.get(1).value_s
			println("type: "+type)
			if(type.equals("txt")){
				typeSystem.get(scope).put(dec.name, "File")
				println(typeSystem.get(scope))	
				return '''
					File «dec.name» = new File("«path»");
				'''
			}else if(type.equals("csv")){
				typeSystem.get(scope).put(dec.name, "Table")
			return '''
				Table «dec.name» = Table.read().csv(CsvReadOptions
					.builder(«IF dec.onCloud && ! (path.contains("https://")) » "https://s3.us-east-2.amazonaws.com/bucket-"+__id_execution+"/«path»" «ELSE»"«path»"«ENDIF»)
					.maxNumberOfColumns(5000)
					.tableName("«(dec.right as DeclarationObject).features.get(0).value_s»")
					.separator('«(dec.right as DeclarationObject).features.get(3).value_s»')
				);
			'''
			}
			
		} else {
			typeSystem.get(scope).put(dec.name,valuateArithmeticExpression(dec.right as ArithmeticExpression,scope))	
			return '''«valuateArithmeticExpression(dec.right as ArithmeticExpression,scope)» «dec.name» = «generateArithmeticExpression(dec.right as ArithmeticExpression,scope)»;'''
		}
	}

	def generateRandomDeclaration(RandomDeclaration declaration) {
		return '''
			Random «declaration.name» = new Random();
		'''
	}

	// methods for ArithmeticExpression
	def generateArithmeticExpression(ArithmeticExpression expression, String scope) {
		// println(expression)
		if (expression instanceof BinaryOperation) {
			if (expression.feature.equals("and"))
				return '''«generateArithmeticExpression(expression.left,scope)» && «generateArithmeticExpression(expression.right,scope)»'''
			else if (expression.feature.equals("or"))
				return '''«generateArithmeticExpression(expression.left,scope)» || «generateArithmeticExpression(expression.right,scope)»'''
			else
				return '''«generateArithmeticExpression(expression.left,scope)» «expression.feature» «generateArithmeticExpression(expression.right,scope)»'''
		} else if (expression instanceof UnaryOperation) {
			return '''«expression.feature»«generateArithmeticExpression(expression.operand,scope)»'''
		} else if (expression instanceof ParenthesizedExpression) {
			return '''(«generateArithmeticExpression(expression.expression,scope)»)'''
		} else if (expression instanceof NumberLiteral) {
			return '''«expression.value»'''
		} else if (expression instanceof BooleanLiteral) {
			return '''«expression.value»'''
		} else if (expression instanceof StringLiteral) {
			return '''"«expression.value»"'''
		} else if (expression instanceof FloatLiteral) {
			return '''«expression.value»'''
		} else if (expression instanceof VariableLiteral) {
			return '''«expression.variable.name»'''
		} else if (expression instanceof NameObject) {
			if(expression.name instanceof EnvironmentDeclaration){
				return '''__fly_environment.get(«expression.name.name»).get("«expression.value»")'''
			}
			else if (typeSystem.get(scope).get(expression.name.name + "." + expression.value) !== null) {
				return '''(«typeSystem.get(scope).get(expression.name.name+"."+expression.value)») «expression.name.name».get("«expression.value»")'''
			} else {
				return '''«expression.name.name».get("«expression.value»")'''
			}
		} else if (expression instanceof IndexObject) {
			
			if(typeSystem.get(scope).get(expression.name.name).contains("Array")){
				if(expression.indexes.get(0).value2 === null)
					return '''«expression.name.name»[«generateArithmeticExpression(expression.indexes.get(0).value,scope)»]'''
				else
					return '''Arrays.copyOfRange(«expression.name.name», «generateArithmeticExpression(expression.indexes.get(0).value,scope)», «generateArithmeticExpression(expression.indexes.get(0).value2,scope)»)'''
			} else if(typeSystem.get(scope).get(expression.name.name).contains("Matrix")){
				if(expression.indexes.length==2){
					if(expression.indexes.get(0).value2 === null && expression.indexes.get(1).value2 === null ){
						return '''«expression.name.name»[«generateArithmeticExpression(expression.indexes.get(0).value,scope)»][«generateArithmeticExpression(expression.indexes.get(1).value,scope)»]'''
					}else {
						return ''''''
					}
				}else{
					if(expression.indexes.get(0).value2 === null && expression.indexes.get(1).value2 === null && expression.indexes.get(2).value2 === null){
						return '''«expression.name.name»[«generateArithmeticExpression(expression.indexes.get(0).value,scope)»][«generateArithmeticExpression(expression.indexes.get(1).value,scope)»][«generateArithmeticExpression(expression.indexes.get(1).value,scope)»]'''
					}else{
						return ''''''
					}
				}
			} else {
				if (typeSystem.get(scope).get(expression.name.name + "[" + generateArithmeticExpression(expression.indexes.get(0).value,scope) + "]") !== null) {
					return '''(«typeSystem.get(scope).get(expression.name.name+"["+generateArithmeticExpression(expression.indexes.get(0).value,scope)+"]")») «expression.name.name».get("«generateArithmeticExpression(expression.indexes.get(0).value,scope)»")'''
				} else {
					if(typeSystem.get(scope).get(expression.name.name).equals("HashMap"))
						return '''«expression.name.name».get(«generateArithmeticExpression(expression.indexes.get(0).value,scope)»)'''
					else if(typeSystem.get(scope).get(typeSystem.get(scope).get(expression.name.name)).equals("Table")){
						return '''«typeSystem.get(scope).get(expression.name.name)».get(_«typeSystem.get(scope).get(expression.name.name)», «generateArithmeticExpression(expression.indexes.get(0).value,scope)»)'''
					}
				}
			}
		} else if (expression instanceof DatSingleObject) {
			return '''«expression.name.name».get(«generateArithmeticExpression(expression.value1,scope)»,«generateArithmeticExpression(expression.value2,scope)»)'''
		} else if (expression instanceof DatTableObject) {
		} else if (expression instanceof CastExpression) {
			if (expression.op.equals("as")) { // cast
				if (expression.target instanceof ChannelReceive) {
					if ((((expression.target as ChannelReceive).target.environment as EnvironmentDeclaration).
						right as DeclarationObject).features.get(0).value_s.equals("aws")) {
						if (expression.type.equals("Integer")) {
							return '''
								__
								ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl("«(expression.target as ChannelReceive).target.name»"+__id_execution).getQueueUrl());
								ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
								while(__res.getMessages().size() == 0){
									__res = __sqs.receiveMessage(__recmsg);
								}
								Integer.parseInt(__res.getMessages().get(0).getBody());
								__sqs.deleteMessage(__sqs.getQueueUrl("«(expression.target as ChannelReceive).target.name»"+__id_execution).getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());
							'''
						} else if (expression.type.equals("Float")) {
							return '''
								ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl("«(expression.target as ChannelReceive).target.name»"+__id_execution).getQueueUrl());
								ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
								while(__res.getMessages().size() == 0){
								__res = __sqs.receiveMessage(__recmsg);
								}
								Double.parseDouble(__res.getMessages().get(0).getBody());
								__sqs.deleteMessage(__sqs.getQueueUrl("«(expression.target as ChannelReceive).target.name»"+__id_execution).getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());
							'''
						}
					}
				}
				if (expression.type.equals("String")) {
					return '''(String) «generateArithmeticExpression(expression.target,scope)»'''
				}
				if (expression.type.equals("Integer")) {
		
					return '''(int)((«generateArithmeticExpression(expression.target,scope)» instanceof Short)? new Integer((Short) «generateArithmeticExpression(expression.target,scope)»):(Integer) «generateArithmeticExpression(expression.target,scope)»)'''
				}
			
				if (expression.type.equals("Double")) {
					return '''(double)((«generateArithmeticExpression(expression.target,scope)» instanceof Float)? new Double((Float) «generateArithmeticExpression(expression.target,scope)»):(Double) «generateArithmeticExpression(expression.target,scope)»)'''
				}
				if (expression.type.equals("Dat")) {
					return '''(Table) «generateArithmeticExpression(expression.target,scope)»'''
				}
				if (expression.type.equals("Date")) {
					return '''LocalDate.parse(«generateArithmeticExpression(expression.target,scope)»)'''
				}
				if (expression.type.equals("Object")) {
					return '''((HashMap<Object,Object>) «generateArithmeticExpression(expression.target,scope)»)'''
				}
			} else { // parsing
				if (expression.type.equals("Integer")) {
					return '''Integer.parseInt( «generateArithmeticExpression(expression.target,scope)».toString())'''

				}
				if (expression.type.equals("Double")) {
					return '''Double.parseDouble( «generateArithmeticExpression(expression.target,scope)».toString())'''
				}
			}

		} else if (expression instanceof MathFunction) {
			var s = ""
			if (expression.feature.equals("round")) {
				s += "(int) "
			}
			s += "Math." + expression.feature + "("
			for (exp : expression.expressions) {
				s += generateArithmeticExpression(exp, scope)
				if (exp != expression.expressions.last()) {
					s += ","
				}
			}
			s += ")"
			return s
		}else if(expression instanceof TimeFunction){
			if (expression.value != null){
				return '''( System.currentTimeMillis() - «expression.value.name» )'''
			} else {
				return '''System.currentTimeMillis()'''
			}
		} else if (expression instanceof VariableFunction) {
			return generateVariableFunction(expression, false, scope)
		} else if (expression instanceof ChannelReceive) {
			return generateChannelReceive(expression, scope)
		} else if (expression instanceof ChannelSend) {
			return generateChannelSend(expression, scope)
		} else if (expression instanceof LocalFunctionCall) {
			var s = generateLocalFunctionCall(expression, scope)
			return s.substring(0, s.length - 1)
		}
	}

	def generateVariableFunction(VariableFunction expression, Boolean t, String scope) {
		if (expression.target.right instanceof FlyFunctionCall) {
			var feature=""
			if(expression.feature.equals("wait")){
				feature="get"
			}else{
				feature=expression.feature
			}
			var s = ""
			s += "for(Future _el :" + last_func_result + "){
						_el." +feature+ "("
			for (exp : expression.expressions) {
				s += generateArithmeticExpression(exp, scope)
				if (exp != expression.expressions.last()) {
					s += ","
				}
			}
			s += ");
					}"
			return s
		}
		if (expression.target.typeobject.equals("dat")) {
			if(expression.feature.equals("rows")){
				return '''
				HashMap<Integer, HashMap<String,Object> > __«expression.target.name»_rows = new HashMap<Integer, HashMap<String,Object>>();
				    	for(int __i=0; __i<«expression.target.name».rowCount();__i++) {
				    		HashMap<String, Object> __tmp = new HashMap<String, Object>();
				    		for (String __col : «expression.target.name».columnNames()) {
				    			__tmp.put(__col,«expression.target.name».get(__i, «expression.target.name».columnIndex(__col)));
							}
							 		__«expression.target.name»_rows.put(__i,__tmp);
							 	}
			'''
			}else if(expression.feature.equals("delete")){
				var path = ((expression.target as DatDeclaration).right as DeclarationObject).features.get(1).value_s;
				var filename = path.split("/").last 
				return '''
					«IF (expression.target as DatDeclaration).onCloud»
						try {
						    s3.deleteObject("bucket-"+__id_execution), «filename»);
						} catch (AmazonServiceException e) {
						    System.err.println(e.getErrorMessage());
						    System.exit(1);
						}
					«ENDIF»
				'''
			}
			
		}else if(expression.target.typeobject.equals("channel")){
			if(expression.feature.equals("close")){
				println(((expression.target as ChannelDeclaration).environment.right as DeclarationObject).features.get(0))
				return '''
					«IF !((expression.target as ChannelDeclaration).environment.right as DeclarationObject).features.get(0).value_s.equals("local") »
						__wait_on_«expression.target.name» = false;
					«ELSEIF ((expression.target as ChannelDeclaration).environment.right as DeclarationObject).features.get(0).value_s.equals("local") &&
					((expression.target as ChannelDeclaration).environment.right as DeclarationObject).features.length==3»
						__socket_server_«expression.target.name».close();
					«ENDIF»
				'''
			}
		} else {
			var s = expression.target.name + "." + expression.feature + "("
			for (exp : expression.expressions) {
				s += generateArithmeticExpression(exp, scope)
				if (exp != expression.expressions.last()) {
					s += ","
				}
			}
			s += ")"
			if (t) {
				s += ";"
			}
			return s
		}
	}

	// methods for statement
	def generateBlockExpression(BlockExpression exp, String scope) {
		'''
			{
				«FOR element : exp.expressions» 
					«generateExpression(element,scope)»
				«ENDFOR» 
			}
		'''
	}

	def generateFunctionReturn(FunctionReturn return1, String scope) {
		'''
			return «generateArithmeticExpression(return1.expression,scope)»;
		'''
	}

	def generateLocalFunctionCall(LocalFunctionCall call, String scope) {
		var s = call.target.name + "("
		if (call.input != null) {
			for (input : call.input.inputs) {
				s += generateArithmeticExpression(input, scope)
				if (input != call.input.inputs.last) {
					s += ","
				}
			}
		}
		s += ");"
		return s
	}

	def generateFlyFunctionCall(FlyFunctionCall call, String scope) {
		var env = ((call.environment.right as DeclarationObject).features.get(0)).value_s
		if (env.equals("local")) {
			return generateLocalFlyFunction(call, scope)
		} else if (env.equals("aws")) {
			return generateAWSFlyFunctionCall(call, scope)
		}

	}

	def generateLocalFlyFunction(FlyFunctionCall call, String scope) {
		var s = ''''''
		if ((call.input as FunctionInput).is_for_index) { // 'for 'keyword 
			s = '''
				final List<Future<Object>> «call.target.name»_«func_ID»_return = new ArrayList<Future<Object>>();
			'''
			if (call.isIsAsync && call.isIs_thenall) { // chiamata asincrona con thenall
				s += '''
					final AtomicInteger __count = new AtomicInteger(0);
				'''
			}

			if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("HashMap")) { // f_index is a reference to an object
				if (call.isIsAsync && call.isIs_thenall) {
					s += '''
						final int __numThread = «generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».keySet().size()-1;
					'''
				}
				s += '''
					for(Object key: «generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».keySet()){
						final Object _el = «generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».get(key);
						Future<Object> _f = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
							
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								
								Object __ret = «call.target.name»(«IF call.target.parameters.length==1»_el«ENDIF»);
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF» 					
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
											__asyncTermination.put("Termination");
									}
								«ENDIF» 	
								return __ret;
								}
							});
						«call.target.name»_«func_ID»_return.add(_f);
					}
				'''
			} else if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("Table")) { // f_index is a reference to a Table
			// if (call.isIsAsync && call.isIs_thenall) {
				s += '''
					final int __numThread = (Integer) __fly_environment.get("«call.environment.name»").get("nthread");
					ArrayList<Table> __list_data_«call.target.name» = new ArrayList<Table>();
					for (int __i = 0; __i < __numThread; __i++) {
						__list_data_«call.target.name».add(«((call.input as FunctionInput).f_index as VariableLiteral).variable.name».emptyCopy());
					}
					for(int __i=0; __i<«generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».rowCount();__i++) {
						__list_data_«call.target.name».get(__i%__numThread).addRow(__i,«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»);
					}
					final ServerSocket __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data = new ServerSocket(9091,100);
					for(int __i=0; __i<__numThread;__i++) {
					    final int __index=__i;
					    «IF (call.environment.right as DeclarationObject).features.length==3»
					    	final String __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = __generateString(__list_data_«call.target.name».get(__index));
					    «ELSE»
					    	 final Table __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» =__list_data_«call.target.name».get(__index);
					    «ENDIF»
					    Future<Object> __f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							public Object call() throws Exception {
								«IF (call.environment.right as DeclarationObject).features.length==3»
									«IF (call.environment.right as DeclarationObject).features.get(2).value_s.contains("python")»
										ProcessBuilder __processBuilder = new ProcessBuilder("python",new File("src-gen/«call.target.name».py").getAbsolutePath()«IF call.target.parameters.length==1»,__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»); //for the moment listen on 9090	
									«ELSEIF (call.environment.right as DeclarationObject).features.get(2).value_s.contains("nodejs") »
										ProcessBuilder __processBuilder = new ProcessBuilder("nodejs",new File("src-gen/«call.target.name».js").getAbsolutePath(),«IF call.target.parameters.length==1»,__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»); //for the moment listen on 9090
									«ENDIF»
									Process __p;
									try {
										__p = __processBuilder.start();
										Socket __socket_data = __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data.accept() ;
										OutputStreamWriter __socket_data_output = new OutputStreamWriter(__socket_data.getOutputStream());
										__socket_data_output.write(__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»);
										__socket_data_output.flush();
										__socket_data.close();
										__p.waitFor();
										if(__p.exitValue()!=0){
											System.out.println("Error in local execution of «call.target.name»");
											System.exit(1);
										}
									} catch (Exception e) {
										e.printStackTrace();
									}
									return null;
								«ELSE»
								Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»);
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF»  		
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
										__asyncTermination.put("Termination");
									}
								«ENDIF» 				
								return __ret;
								«ENDIF»
							}
							  			
						});
						«call.target.name»_«func_ID»_return.add(__f);
					}
				'''
			} else if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("File")) { // f_index is a File txt	
					s+='''
						final int __numThread = (Integer) __fly_environment.get("«call.environment.name»").get("nthread");
						ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name» = new ArrayList<StringBuilder>();
						final ServerSocket __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data = new ServerSocket(9091,100);
						int __temp_i_«(call.input.f_index as VariableLiteral).variable.name» = 0;
						Scanner __scanner_«(call.input.f_index as VariableLiteral).variable.name» = new Scanner(«(call.input.f_index as VariableLiteral).variable.name»);
						while(__scanner_«(call.input.f_index as VariableLiteral).variable.name».hasNextLine()){
							String __tmp_line = __scanner_«(call.input.f_index as VariableLiteral).variable.name».nextLine();
							try{
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(__tmp_line);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}catch(Exception e){
								__temp_«(call.input.f_index as VariableLiteral).variable.name».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread,new StringBuilder());
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(__tmp_line);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}
							__temp_i_«(call.input.f_index as VariableLiteral).variable.name»++;
						}
						for(int __i=0; __i<__numThread;__i++) {
						    final int __index=__i;
						    «IF (call.environment.right as DeclarationObject).features.length==3»
						    	final String __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__index).toString());
						    «ELSE»
						    	 final File __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = new File(__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__index).toString());
						    «ENDIF»
						    Future<Object> __f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
								public Object call() throws Exception {
									«IF (call.environment.right as DeclarationObject).features.length==3»
										«IF (call.environment.right as DeclarationObject).features.get(2).value_s.contains("python")»
											ProcessBuilder __processBuilder = new ProcessBuilder("python3",new File("src-gen/«call.target.name».py").getAbsolutePath()); //for the moment listen on 9090	
											__processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
										«ELSEIF (call.environment.right as DeclarationObject).features.get(2).value_s.contains("nodejs") »
											ProcessBuilder __processBuilder = new ProcessBuilder("nodejs",new File("src-gen/«call.target.name».js").getAbsolutePath()); //for the moment listen on 9090
											__processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
										«ENDIF»
										Process __p;
										try {
											__p = __processBuilder.start();
											Socket __socket_data = __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data.accept() ;
											OutputStreamWriter __socket_data_output = new OutputStreamWriter(__socket_data.getOutputStream());
											__socket_data_output.write(__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»);
											__socket_data_output.flush();
											__socket_data.close();
											__p.waitFor();
											if(__p.exitValue()!=0){
												System.out.println("Error in local execution of «call.target.name»");
												System.exit(1);
											}
										} catch (Exception e) {
											e.printStackTrace();
										}
										return null;
									«ELSE»
									Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»);
									«IF call.isIs_then»
										«call.then.name»();
									«ENDIF»  		
									«IF call.isIsAsync && call.isIs_thenall»
										if(__count.getAndIncrement()==__numThread){
											__asyncTermination.put("Termination");
										}
									«ENDIF» 				
									return __ret;
									«ENDIF»
								}
								  			
							});
							«call.target.name»_«func_ID»_return.add(__f);
						}
					'''
						
					} else { // f_index is a range
				if (call.isIsAsync && call.isIs_thenall) {
					s += '''
						final int __numThread = «((call.input as FunctionInput).f_index as RangeLiteral ).value2 - ((call.input as FunctionInput).f_index as RangeLiteral ).value1» - 1;
					'''
				}
				
				var value1 = if ((((call.input as FunctionInput).f_index as RangeLiteral ).value_l1) != null) ((call.input as FunctionInput).f_index as RangeLiteral ).value_l1.name  else ((call.input as FunctionInput).f_index as RangeLiteral ).value1  ;
				var value2 = if ((((call.input as FunctionInput).f_index as RangeLiteral ).value_l2) != null) ((call.input as FunctionInput).f_index as RangeLiteral ).value_l2.name  else ((call.input as FunctionInput).f_index as RangeLiteral ).value2  ;

				s += '''
					for(int _i=«value1»;_i<«value2»;_i++){
						final int __i = _i;
						Future<Object> _f = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
							
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								
								Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__i«ENDIF»);
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF»
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
										__asyncTermination.put("Termination");
									}
								«ENDIF»   						
								return __ret;
							}
						});
						«call.target.name»_«func_ID»_return.add(_f);
					}
				'''
			}
			last_func_result = call.target.name + "_" + func_ID + "_return"

			if (!call.isAsync) {
				s += '''
					for(Future _f : «call.target.name»_«func_ID»_return){
						try{
							_f.get();
						} catch(Exception e){
							e.printStackTrace();
						}
					}
					
					«IF call.isIs_thenall»
						«call.thenall.name»();
					«ENDIF»
				'''
			}

			if (call.isIsAsync && call.isIs_thenall) {
				s += '''
					Future<Object> __call = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
											
							public Object call() throws Exception {
								//TODO Auto-generated method stub
										__asyncTermination.take();	
										«call.thenall.name»();
								return null;
							}
						});
						
				'''
			}

		} else { // no 'in' keyword
			var par_id = 0
			var par_1 = ''' 
			''' // parameter declaration
			var par_2 = '''
			''' // passing parameter 
			for (el : call.input.expressions) {
				par_1 += '''
					final Object _par_«par_id» = «generateArithmeticExpression(el,scope)»;
				'''
				par_2 += ''' _par_«par_id»	'''
				if (el != call.input.expressions.last) {
					par_2 += ''','''
				}
				par_id++
			}
			s += '''
				«par_1»
				Future<Object> _f_«func_ID» = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
					
					public Object call() throws Exception {
						// TODO Auto-generated method stub
											
						return «call.target.name»(«par_2»);
					}
				});
			'''
			if (!call.isIsAsync) {
				s += '''
					try{
						_f_«func_ID».get();
						«IF call.is_then »
							«call.then.name»();
						«ENDIF»
					} catch(Exception e){
						e.printStackTrace();
					}
				'''
			}
		}
		func_ID++
		return s
	}

	def generateAWSFlyFunctionCall(FlyFunctionCall call, String scope) {
		// generate the aws lambda function
		var async = call.isIsAsync
		var cred = call.environment.name
		var region = ((call.environment.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
		var function = call.target.name
		var ret = ''''''
		if (call.input.isIs_for_index) {
			if (!async){
				ret+='''
					__sqs.createQueue(new CreateQueueRequest("__syncTermination_«call.target.name»_"+__id_execution));
					ArrayList<Future<Object>> __sync_list_«call.target.name»_«func_ID» = new ArrayList<Future<Object>>();
				'''
			}
			if (call.input.f_index instanceof RangeLiteral) {
				ret += '''
					int __num_proc_«call.target.name»_«func_ID» = «(call.input.f_index as RangeLiteral).value2 - (call.input.f_index as RangeLiteral).value1 » ;
					for(int ___i=«(call.input.f_index as RangeLiteral).value1»;___i<«(call.input.f_index as RangeLiteral).value2»;___i++){
						final String __s_temp = String.valueOf(___i);
						Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								__lambda.invoke(new InvokeRequest()
									.withInvocationType("Event")
									.withFunctionName("«call.target.name»_"+__id_execution)
									.withPayload(__s_temp));
								return null;
							}
						});
					«IF !async»
					__sync_list_«call.target.name»_«func_ID».add(f);
					«ENDIF»
					}
				'''
			} else if (call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).equals("Table")) {
				 ret+='''
					int __num_row_«call.target.name»_«func_ID»=«(call.input.f_index as VariableLiteral).variable.name».rowCount();
					int __initial_«call.target.name»_«func_ID»=0;
					int __num_proc_«call.target.name»_«func_ID» = (int) __fly_environment.get("«cred»").get("nthread");
					ArrayList<Integer> __splits_«call.target.name»_«func_ID» = new ArrayList<Integer>();
					for(int __i=0;__i<__num_proc;__i++) {
						if(__i<(__num_row_«call.target.name»_«func_ID»%__num_proc_«call.target.name»_«func_ID»)) {
							__splits_«call.target.name»_«func_ID».add( __initial_«call.target.name»_«func_ID»+((__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»)+1));
							__initial_«call.target.name»_«func_ID»+=(__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»)+1;
						}else{
							__splits_«call.target.name»_«func_ID».add( __initial_«call.target.name»_«func_ID»+((__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»)));
							__initial+=(__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»);
						}
					}				 
					
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
						final int __start;
						final int __end;
						if(__i==0) {
							__start=0;
						}else{
							__start=__splits_«call.target.name»_«func_ID».get(__i-1);
						}
						__end = __splits_«call.target.name»_«func_ID».get(__i);
						Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								//creare la stringa 
								String __s_temp= __generateString( «(call.input.f_index as VariableLiteral).variable.name».where(Selection.withRange(__start, __end)));
								__lambda.invoke(new InvokeRequest()
									.withInvocationType("Event")
									.withFunctionName("«call.target.name»_"+__id_execution)
									.withPayload(__s_temp));
								return null;
							}
						});
					«IF !async»
					__sync_list_«call.target.name».add(f);
					«ENDIF»
					}
				 '''
			}else if (call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).equals("File")){
				ret+='''
					int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
					ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
					int __temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = 0;
					Scanner __scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new Scanner(«(call.input.f_index as VariableLiteral).variable.name»);
					while(__scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».hasNextLine()){
						String __tmp_line = __scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».nextLine();
						try{
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}catch(Exception e){
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»,new StringBuilder());
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}
						__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID»++;
					}
					__scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».close();
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
						final int __i_f = __i;
						Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								//creare la stringa 
								String __s_temp= __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i_f).toString());
								__lambda.invoke(new InvokeRequest()
									.withInvocationType("Event") 
									.withFunctionName("«call.target.name»_"+__id_execution)
									.withPayload(__s_temp));
								return null;
							}
						});
					«IF !async»
					__sync_list_«call.target.name»_«func_ID».add(f);
					«ENDIF»
					}
				'''
			}
		}
		if(!async){ 
			ret+='''
			for (Future<Object> f: __sync_list_«call.target.name»_«func_ID»){
				try {
					f.get();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ExecutionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			int __messagges_«call.target.name»_«func_ID» = 0;
			String __queue_url___syncTermination_«call.target.name»_«func_ID» =	__sqs.getQueueUrl("__syncTermination_«call.target.name»_"+__id_execution).getQueueUrl();
			while(__messagges_«call.target.name»_«func_ID»!=__num_proc_«call.target.name»_«func_ID») {
				ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__queue_url___syncTermination_«call.target.name»_«func_ID»).
						withWaitTimeSeconds(1).withMaxNumberOfMessages(10);
				ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
				for(Message msg : __res.getMessages()) { 
					__messagges_«call.target.name»_«func_ID»++;
					__sqs.deleteMessage(__queue_url___syncTermination_«call.target.name»_«func_ID», msg.getReceiptHandle());
				}
			}
			__sqs.deleteQueue(new DeleteQueueRequest(__queue_url___syncTermination_«call.target.name»_«func_ID»));
			'''
		}
		// manage the callback
		if (call.isIs_thenall) {
			ret +='''
				«call.thenall.name»();
			'''
		}
		func_ID++
		return ret
	}

	def generateChannelReceive(ChannelReceive receive, String scope) {
		var env = (((receive.target.environment.right as DeclarationObject).features.get(0)) as DeclarationFeature).
			value_s
		if (env.equals("local")) {
			return '''«(receive.target as ChannelDeclaration).name».take()'''
		} else if (env.equals("aws")) {
			return '''
			«(receive.target as ChannelDeclaration).name».take()'''
		}

	}

	def generateChannelSend(ChannelSend send, String scope) {
		var env = (((send.target.environment.right as DeclarationObject).features.get(0)) as DeclarationFeature).value_s
		if (env.equals("local")) {
			return '''«(send.target as ChannelDeclaration).name».add(«generateArithmeticExpression(send.expression,scope)»)'''
		} else if (env.equals("aws")) {
			return '''
				SendMessageRequest __sndmsg = new SendMessageRequest(__sqs.getQueueUrl("«send.target.name»"+__id_execution).getQueueUrl(), «generateArithmeticExpression(send.expression,scope)».toString());
				__sqs.sendMessage(__sndmsg)
			'''
		}

	}

	def generateWhileExpression(WhileExpression expression, String scope) {
		'''
			while(«generateArithmeticExpression(expression.cond,scope)»)
				«generateExpression(expression.body,scope)»
		'''
	}

	def generateForExpression(ForExpression exp, String scope) {
		if (exp.object instanceof ParenthesizedExpression) {
			return generateFor(exp.index, (exp.object as ParenthesizedExpression).expression, exp.body, scope)
		} else {
			return generateFor(exp.index, exp.object, exp.body, scope)
		}

	}

	def generateFor(ForIndex indexes, ArithmeticExpression object, Expression body, String scope) {
		if (object instanceof CastExpression) {
			if ((object as CastExpression).type.equals("Dat")) { // dat
				var name = ((object as CastExpression).target as VariableLiteral).variable.name
				if (indexes.indices.length == 1 ){
					typeSystem.get(scope).put((indexes.indices.get(0) as VariableDeclaration).name,name);
					return '''
						for(int _«name»=0; _«name»<((Table) «name»).rowCount();_«name»++){
							
							«IF body instanceof BlockExpression»
								«FOR exp : body.expressions »
									«generateExpression(exp,scope)»
								«ENDFOR»
							«ELSE»
								«generateExpression(body,scope)»
							«ENDIF»
						}
					'''	
				}
			} else if ((object as CastExpression).type.equals("Object")) { // object
				if(indexes.indices.length==1){
					return '''
					for(Object _«(indexes.indices.get(0) as VariableDeclaration).name» : ( (HashMap<Object,Object>) «((object as CastExpression).target as VariableLiteral).variable.name»).keySet() ){
							HashMap<Object, Object> «(indexes.indices.get(0) as VariableDeclaration).name» = new HashMap<Object,Object>();
							«(indexes.indices.get(0) as VariableDeclaration).name».put("k",_«(indexes.indices.get(0) as VariableDeclaration).name»);
							«(indexes.indices.get(0) as VariableDeclaration).name».put("v",((HashMap<Object,Object>) «((object as CastExpression).target as VariableLiteral).variable.name»).get(_«(indexes.indices.get(0) as VariableDeclaration).name»));
						«IF body instanceof BlockExpression»
							«FOR exp : body.expressions »
								«generateExpression(exp,scope)»
							«ENDFOR»
						«ELSE»
							«generateExpression(body,scope)»
						«ENDIF»
					}
				'''
				}
			}
		} else if (object instanceof RangeLiteral) {
			var value1 = if (object.value_l1 != null) object.value_l1.name  else  object.value1  ;
			var value2 = if (object.value_l2 != null) object.value_l2.name  else  object.value2  ;
			return '''
				for(int «(indexes.indices.get(0) as VariableDeclaration).name»=«value1»;«(indexes.indices.get(0) as VariableDeclaration).name»<«value2»;«(indexes.indices.get(0) as VariableDeclaration).name»++){
					«generateExpression(body,scope)»
				}
			'''
		} else if (object instanceof VariableLiteral) {
			//println((object as VariableLiteral).variable)
			if (((object as VariableLiteral).variable.typeobject.equals('var') &&
				((object as VariableLiteral).variable.right instanceof NameObjectDef) ) ||
				typeSystem.get(scope).get((object as VariableLiteral).variable.name).equals("HashMap")) {
				return '''
					
					for(Object _«(indexes.indices.get(0) as VariableDeclaration).name» : «(object as VariableLiteral).variable.name».keySet() ){
						HashMap<Object, Object> «(indexes.indices.get(0) as VariableDeclaration).name» = new HashMap<Object,Object>();
						«(indexes.indices.get(0) as VariableDeclaration).name».put("k",_«(indexes.indices.get(0) as VariableDeclaration).name»);
						«(indexes.indices.get(0) as VariableDeclaration).name».put("v",«(object as VariableLiteral).variable.name».get(_«(indexes.indices.get(0) as VariableDeclaration).name»));
						«IF body instanceof BlockExpression»
							«FOR exp : body.expressions »
								«generateExpression(exp,scope)»
							«ENDFOR»
						«ELSE»
							«generateExpression(body,scope)»
						«ENDIF»
					}
				'''
			} else if ((object as VariableLiteral).variable.typeobject.equals('dat')) {
				var name = (object as VariableLiteral).variable.name;
				var index_name = (indexes.indices.get(0) as VariableDeclaration).name
				typeSystem.get(scope).put(index_name,name); 
				println(typeSystem.get(scope).get(index_name))
				if(typeSystem.get(scope).get((object as VariableLiteral).variable.name).equals("File")){
					return '''
						Scanner __scanner_«name» = new Scanner(«name»);
						while(__scanner_«name».hasNextLine()){
							String «index_name» = __scanner_«name».nextLine();
							«IF body instanceof BlockExpression»
								«FOR exp : body.expressions »
									«generateExpression(exp,scope)»
								«ENDFOR»
							«ELSE»
								«generateExpression(body,scope)»
							«ENDIF»
						}
						__scanner_«name».close();
					'''
				}else if (typeSystem.get(scope).get((object as VariableLiteral).variable.name).equals("Table")){
					return '''
						for(int _«name»=0; _«name»< «name».rowCount();_«name»++){
							«IF body instanceof BlockExpression»
								«FOR exp : body.expressions »
									«generateExpression(exp,scope)»
								«ENDFOR»
							«ELSE»
								«generateExpression(body,scope)»
							«ENDIF»
						}
					'''
				}
			} else if(typeSystem.get(scope).get((object as VariableLiteral).variable.name).contains("Array")){
				
			}else if(typeSystem.get(scope).get((object as VariableLiteral).variable.name).contains("Matrix")){
				
			} 
		} else if (object instanceof VariableFunction) {
			return '''
			«generateVariableFunction(object as VariableFunction,false,scope)»
			for(HashMap<String,Object> «(indexes.indices.get(0) as VariableDeclaration).name» : __«(object as VariableFunction).target.name»_rows.values()){
				«IF body instanceof BlockExpression»
					«FOR exp : body.expressions »
						«generateExpression(exp,scope)»
					«ENDFOR»
				«ELSE»
					«generateExpression(body,scope)»
				«ENDIF»
			}'''
		} else if(object instanceof IndexObject){ // if  it's a sub-array or a sub-matrix
			
		} 
	}

	def generateIfExpression(IfExpression expression, String scope) {
		'''
			if(«generateArithmeticExpression(expression.cond,scope)»)
				«generateExpression(expression.then,scope)»
				«IF expression.^else !== null»
					else «generateExpression(expression.^else,scope)»
				«ENDIF» 
		'''
	}

	def generatePrintExpression(PrintExpression expression, String scope) {
		if (expression.print instanceof ChannelReceive) {
			return '''
				try{
					System.out.println(«generateArithmeticExpression(expression.print,scope)»);
				}catch(Exception e){
					e.printStackTrace();
				}
			'''
		} else
			return '''System.out.println(«generateArithmeticExpression(expression.print,scope)»);'''
	}

	def generateAssignment(Assignment assignment, String scope) {
		if (assignment.feature != null) {
			if (assignment.value instanceof CastExpression &&
				((assignment.value as CastExpression).target instanceof ChannelReceive)) {
				if ((((assignment.value as CastExpression).target as ChannelReceive).target.environment.
					right as DeclarationObject).features.get(0).value_s.equals("aws")) { // aws environment
					if ((assignment.value as CastExpression).type.equals("Integer")) {
						return '''
							«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» Integer.parseInt(«((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString());
						'''
					} else if((assignment.value as CastExpression).type.equals("Object")){
						return '''
							String __res_«((assignment.value as CastExpression).target as ChannelReceive).target.name» = «((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString();
							HashMap «generateArithmeticExpression(assignment.feature,scope)» «assignment.op» new Gson().fromJson(__res_«((assignment.value as CastExpression).target as ChannelReceive).target.name»,new TypeToken<HashMap<String, String>>() {}.getType();)
						'''
					} else if ((assignment.value as CastExpression).type.equals("Double")) {
						return '''
							«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» Double.parseDouble («((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString());
						'''
					}
				} else { // local environment
					if ((assignment.value as CastExpression).type.equals("Integer")) { 
						return '''
							try{
								«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» Integer.parseInt(«((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString());
							}catch(InterruptedException e1){
								e1.printStackTrace();
							}
						'''
					} else if ((assignment.value as CastExpression).type.equals("Double")) {
						return '''
							try{
								«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» Double.parseDouble(«((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString());
								e1.printStackTrace();
							}
						'''
					}

				}

			} else if (assignment.value instanceof ChannelReceive) {
				if (((assignment.value as ChannelReceive).target.environment.right as DeclarationObject).features.
					get(0).value_s.equals("aws")) { // aws environment
					return '''
						try{
							«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» «generateArithmeticExpression(assignment.value as ChannelReceive,scope)»
						}catch(InterruptedException e1){
							e1.printStackTrace();
						}
					'''
				} else { // local environment
					return '''
						try{
							«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» «generateArithmeticExpression(assignment.value as ChannelReceive,scope)»
						}catch(InterruptedException e1){
							e1.printStackTrace();
						}
					'''
				}
			} else {
				return '''
					«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» «generateArithmeticExpression(assignment.value,scope)»;
				'''
			}
		}
		if (assignment.feature_obj !== null) {
			if (assignment.feature_obj instanceof NameObject) {
				typeSystem.get(scope).put(
					((assignment.feature_obj as NameObject).name as VariableDeclaration).name + "." +
						(assignment.feature_obj as NameObject).value,
					valuateArithmeticExpression(assignment.value, scope))
				return '''
					«((assignment.feature_obj as NameObject).name as VariableDeclaration).name».put("«(assignment.feature_obj as NameObject).value»",«generateArithmeticExpression(assignment.value,scope)»);
				'''
			}
			if (assignment.feature_obj instanceof IndexObject) {
				//println(typeSystem.get(scope))
				if(typeSystem.get(scope).get((assignment.feature_obj as IndexObject).name.name).contains("Array")){
					return '''«generateArithmeticExpression(assignment.feature_obj,scope)» = «generateArithmeticExpression(assignment.value,scope)»;'''
				} else if(typeSystem.get(scope).get((assignment.feature_obj as IndexObject).name.name).contains("Matrix")){
					return '''«generateArithmeticExpression(assignment.feature_obj,scope)» =  «generateArithmeticExpression(assignment.value,scope)»;'''
				} else { 
					typeSystem.get(scope).put(
						((assignment.feature_obj as IndexObject).name as VariableDeclaration).name + "[" +
							generateArithmeticExpression((assignment.feature_obj as IndexObject).indexes.get(0).value,scope) + "]",
						valuateArithmeticExpression(assignment.value, scope))
					return '''
						«((assignment.feature_obj as IndexObject).name as VariableDeclaration).name».put(«generateArithmeticExpression((assignment.feature_obj as IndexObject).indexes.get(0).value,scope)»,«generateArithmeticExpression(assignment.value,scope)»);
					'''
				} 

			}
		}
	}

	def generateFunctionDefinition(FunctionDefinition definition) {
		typeSystem.put(definition.name, new HashMap<String, String>())
		for (exp : res.allContents.toIterable.filter(ConstantDeclaration)) {
			typeSystem.get(definition.name).put(exp.name,typeSystem.get("main").get(exp.name))
		}
		var returnExp = checkReturn(definition.body)
		var s = '''
			
				protected static «IF returnExp != null» «valuateArithmeticExpression(returnExp.expression,definition.name)»«ELSE» Object«ENDIF» «definition.name»(«FOR params : definition.parameters»«getParameterType(definition.name,params,definition.parameters.indexOf(params))» «(params as VariableDeclaration).name»«IF(!params.equals(definition.parameters.last))», «ENDIF»«ENDFOR»)throws Exception{
				«FOR el : definition.body.expressions»
				«generateExpression(el,definition.name)»
				«ENDFOR»
				«IF returnExp == null»
				return null;
				«ENDIF»
				}
				
		'''
		if (definition.body.expressions.filter(NativeExpression).length !=0)
			return ''''''
		else
			return s
	}
	
	

	def getParameterType(String name, Expression param, int pos) {

		for (exp : res.allContents.toIterable.filter(Expression)) {
			if (exp instanceof LocalFunctionCall && ((exp as LocalFunctionCall).target.name == name)) {
				var typeobject = valuateArithmeticExpression(
					((exp as LocalFunctionCall).input as LocalFunctionInput).inputs.get(pos), "main")
				if (typeobject == "Table") {
					(param as VariableDeclaration).typeobject = "dat"
					typeSystem.get(name).put((param as VariableDeclaration).name, "Table");
				} else {
					(param as VariableDeclaration).typeobject = "var"
					if (typeobject == "HashMap") {
						typeSystem.get(name).put((param as VariableDeclaration).name, "HashMap");
						//println(typeSystem.get(name))
						for (String key : typeSystem.get("main").keySet()) {
							if (key.contains(
								(((exp as LocalFunctionCall).input as LocalFunctionInput).inputs.get(
									pos) as VariableLiteral).variable.name + ".")) {
								//println(key.indexOf("."))
								var tmp = key.substring(key.indexOf(".") + 1, key.length);
								typeSystem.get(name).put((param as VariableDeclaration).name + "." + tmp,
									typeSystem.get("main").get(key));
							}
						}
					} else if (typeobject.contains("Array")) {
						typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);
						var tmp =  typeobject.split("_")
						typeobject=tmp.get(1)+"[]"
					} else if(typeobject.contains("Matrix")){
						typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);
						var tmp =  typeobject.split("_")
						if(tmp.length == 3){
							typeobject=tmp.get(1)+"[][]"
						}else if (tmp.length ==4){
							typeobject=tmp.get(1)+"[][][]"
						}
					} else{
						typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);

					}
				}
				return typeobject
			} else if (exp instanceof FlyFunctionCall && ((exp as FlyFunctionCall).target.name == name)) {
				if ((exp as FlyFunctionCall).input.isIs_for_index) {
					if ((exp as FlyFunctionCall).input.f_index instanceof RangeLiteral){
						typeSystem.get(name).put((param as VariableDeclaration).name,"Integer")
						return "Integer"
					}else if ((exp as FlyFunctionCall).input.f_index instanceof VariableLiteral) {
						var typeobject = valuateArithmeticExpression(
							(exp as FlyFunctionCall).input.f_index as VariableLiteral, "main");
						if (typeobject == "Table") {
							(param as VariableDeclaration).typeobject = "dat"
							typeSystem.get(name).put((param as VariableDeclaration).name, "Table");

						} else {
							(param as VariableDeclaration).typeobject = "var"
							if (typeobject == "HashMap") {
								typeSystem.get(name).put((param as VariableDeclaration).name, "HashMap");
								for (String key : typeSystem.get("main").keySet()) {
									if (key.contains(
										(((exp as LocalFunctionCall).input as LocalFunctionInput).inputs.get(
											pos) as VariableLiteral).variable.name + ".")) {
										//println(key.indexOf("."))
										var tmp = key.substring(key.indexOf(".") + 1, key.length);
										typeSystem.get(name).put((param as VariableDeclaration).name + "." + tmp,
											typeSystem.get("main").get(key));
									}
								}
							} else { //TODO support to array and matrices
								typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);
							}

						}
						return typeobject
					}
				} else {
					var typeobject = valuateArithmeticExpression(
						((exp as FlyFunctionCall).input as FunctionInput).expressions.get(pos), "main");
					if (typeobject == "Table") {
						(param as VariableDeclaration).typeobject = "dat"
						typeSystem.get(name).put((param as VariableDeclaration).name, "Table");
					} else {
						(param as VariableDeclaration).typeobject = "var"
						if (typeobject == "HashMap") {
							typeSystem.get(name).put((param as VariableDeclaration).name, "HashMap");
							for (String key : typeSystem.get("main").keySet()) {
								if (key.contains(
									(((exp as LocalFunctionCall).input as LocalFunctionInput).inputs.get(
										pos) as VariableLiteral).variable.name + ".")) {
									//println(key.indexOf("."))
									var tmp = key.substring(key.indexOf(".") + 1, key.length);
									typeSystem.get(name).put((param as VariableDeclaration).name + "." + tmp,
										typeSystem.get("main").get(key));
								}
							}
						} else {
							typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);

						}
					}
					return typeobject
				}
			}
		}
	}

	def String valuateArithmeticExpression(ArithmeticExpression exp, String scope) {
		if (exp instanceof NumberLiteral) {
			return "Integer"
		} else if (exp instanceof BooleanLiteral) {
			return "Boolean"
		} else if (exp instanceof StringLiteral) {
			return "String"
		} else if (exp instanceof FloatLiteral) {
			return "Double"
		} else if (exp instanceof VariableLiteral) {
			val variable = exp.variable
			if (variable.typeobject.equals("dat")) {
				return "Table"
			} else if (variable.typeobject.equals("channel")) {
				return "Channel"
			} else if (variable.typeobject.equals("var")) {
				if (variable.right instanceof NameObjectDef) {
					return "HashMap"
				} else if (variable.right instanceof ArithmeticExpression) {
					return valuateArithmeticExpression(variable.right as ArithmeticExpression, scope)
				}else{
					return typeSystem.get(scope).get(variable.name) // if it's a parameter of a FunctionDefinition
				}
			}
			return "variable"
		} else if (exp instanceof NameObject) {
			return typeSystem.get(scope).get(exp.name.name + "." + exp.value)
		} else if (exp instanceof IndexObject) {
			if (typeSystem.get(scope).get(exp.name.name).contains("Array")  ){
				var type = typeSystem.get(scope).get(exp.name.name).split('_')
				if(exp.indexes.get(0).value2===null){
					return type.get(1)
				}else{
					if(type.get(1).equals("Integer")){
						return "Integer[]"
					}else if(type.get(1).equals("Double")){
						return "Double[]"
					}else if(type.get(1).equals("String")){
						return "String[]"
					}
				}
				
			}else if(typeSystem.get(scope).get(exp.name.name).contains("Matrix")){
				var type = typeSystem.get(scope).get(exp.name.name).split('_')
				return type.get(1)
			} else {
				return typeSystem.get(scope).get(exp.name.name + "[" + generateArithmeticExpression(exp.indexes.get(0).value,scope) + "]")
			}
		} else if (exp instanceof DatTableObject) {
			return "Table"
		}
		if (exp instanceof UnaryOperation) {
			if (exp.feature.equals("!"))
				return "Boolean"
			return valuateArithmeticExpression(exp.operand, scope)
		}
		if (exp instanceof BinaryOperation) {
			var left = valuateArithmeticExpression(exp.left, scope)
			var right = valuateArithmeticExpression(exp.right, scope)
			if (exp.feature.equals("+") || exp.feature.equals("-") || exp.feature.equals("*") ||
				exp.feature.equals("/")) {
				if (left.equals("String") || right.equals("String"))
					return "String"
				else if (left.equals("Double") || right.equals("Double"))
					return "Double"
				else
					return "Integer"
			} else
				return "Boolean"
		} else if (exp instanceof CastExpression) {
			if (exp.type.equals("Object")) {
				return "HashMap"
			}
			if (exp.type.equals("String")) {
				return "String"
			}
			if (exp.type.equals("Integer")) {
				return "Integer"
			}
			if (exp.type.equals("Float")) {
				return "Double"
			}
			if (exp.type.equals("Dat")) {
				return "Table"
			}
			if (exp.type.equals("Date")) {
				return "LocalDate"
			}
		} else if (exp instanceof ParenthesizedExpression) {
			return valuateArithmeticExpression(exp.expression, scope)
		}
		if (exp instanceof MathFunction) {
			if (exp.feature.equals("round")) {
				return "Integer"
			} else {
				for (el : exp.expressions) {
					if (valuateArithmeticExpression(el, scope).equals("Double")) {
						return "Double"
					}
				}
				return "Integer"
			}
		} else if (exp instanceof TimeFunction){
			return "Long"
		}else if (exp instanceof VariableFunction) {
			if (exp.target.typeobject.equals("var")) {
				if (exp.feature.equals("split")) {
					return "HashMap"
				} else if (exp.feature.contains("indexOf") || exp.feature.equals("length")) {
					return "Integer"
				} else if (exp.feature.equals("concat") || exp.feature.equals("substring")||
					exp.feature.equals("toLowerCase") || exp.feature.equals("toUpperCase")) {
					return "String"
				} if(exp.feature.equals("charAt")){
					return "char"
				}else {
					return "Boolean"
				}
			} else if (exp.target.typeobject.equals("random")) {
				if (exp.feature.equals("nextBoolean")) {
					return "Boolean"
				} else if (exp.feature.equals("nextDouble")) {
					return "Double"
				} else if (exp.feature.equals("nextInt")) {
					return "Integer"
				}
			}
		} else {
			return "Object"
		}
	}

	def checkReturn(EObject el) {
		if (el instanceof BlockExpression) {
			for (element : (el as BlockExpression).expressions) {
				if (element instanceof FunctionReturn) {
					return element
				}
			}
			return null
		}
	}

	def checkBlock(EObject el) {
		if (el instanceof FunctionDefinition) {
			return true
		}
		if (el instanceof WhileExpression) {
			return true
		}
		if (el instanceof ForExpression) {
			return true
		}
		if (el instanceof IfExpression) {
			return true
		}
		if (el instanceof BlockExpression) {
			return true
		}
		if (el instanceof Fly) {
			return false
		}
		if (el instanceof VariableDeclaration) {
			return true
		}
		if (el instanceof PrintExpression) {
			return true
		} else {
			return checkBlock(el.eContainer)
		}
	}
}