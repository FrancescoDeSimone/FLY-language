/**
 * generated by Xtext 2.13.0
 */
package org.xtext.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.fLY.ArithmeticExpression;
import org.xtext.fLY.Assignment;
import org.xtext.fLY.BinaryOperation;
import org.xtext.fLY.BlockExpression;
import org.xtext.fLY.BooleanLiteral;
import org.xtext.fLY.CastExpression;
import org.xtext.fLY.ChannelDeclaration;
import org.xtext.fLY.ChannelReceive;
import org.xtext.fLY.ChannelSend;
import org.xtext.fLY.DatDeclaration;
import org.xtext.fLY.DatSingleObject;
import org.xtext.fLY.DatTableObject;
import org.xtext.fLY.DeclarationFeature;
import org.xtext.fLY.DeclarationObject;
import org.xtext.fLY.EnvironmentDeclaration;
import org.xtext.fLY.Expression;
import org.xtext.fLY.FeautureName;
import org.xtext.fLY.FloatLiteral;
import org.xtext.fLY.Fly;
import org.xtext.fLY.FlyFunctionCall;
import org.xtext.fLY.ForExpression;
import org.xtext.fLY.FunctionDefinition;
import org.xtext.fLY.FunctionInput;
import org.xtext.fLY.FunctionReturn;
import org.xtext.fLY.IfExpression;
import org.xtext.fLY.IndexObject;
import org.xtext.fLY.LocalFunctionCall;
import org.xtext.fLY.LocalFunctionInput;
import org.xtext.fLY.MathFunction;
import org.xtext.fLY.NameObject;
import org.xtext.fLY.NameObjectDef;
import org.xtext.fLY.NumberLiteral;
import org.xtext.fLY.ObjectLiteral;
import org.xtext.fLY.ParenthesizedExpression;
import org.xtext.fLY.PostfixOperation;
import org.xtext.fLY.PrintExpression;
import org.xtext.fLY.RandomDeclaration;
import org.xtext.fLY.RangeLiteral;
import org.xtext.fLY.SortExpression;
import org.xtext.fLY.StringLiteral;
import org.xtext.fLY.TimeFunction;
import org.xtext.fLY.UnaryOperation;
import org.xtext.fLY.VariableDeclaration;
import org.xtext.fLY.VariableFor;
import org.xtext.fLY.VariableFunction;
import org.xtext.fLY.VariableLiteral;
import org.xtext.fLY.WhileExpression;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FLYGenerator extends AbstractGenerator {
  private HashMap<String, HashMap<String, String>> typeSystem = new HashMap<String, HashMap<String, String>>();
  
  private HashMap<String, String> fly_function_names = new HashMap<String, String>();
  
  private String name = "";
  
  private int func_ID = 0;
  
  private Object last_func_result = null;
  
  private boolean __local = false;
  
  private Resource res = null;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.res = resource;
    this.__local = false;
    String name_extension = IterableExtensions.<String>last(((Iterable<String>)Conversions.doWrapArray(resource.getURI().toString().split("/"))));
    this.name = name_extension.toString().split(".fly")[0];
    Iterable<FlyFunctionCall> _filter = Iterables.<FlyFunctionCall>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FlyFunctionCall.class);
    for (final FlyFunctionCall element : _filter) {
      String _name = element.getTarget().getName();
      String _name_1 = element.getTarget().getName();
      String _plus = (_name_1 + "_");
      long _currentTimeMillis = System.currentTimeMillis();
      String _plus_1 = (_plus + Long.valueOf(_currentTimeMillis));
      this.fly_function_names.put(_name, _plus_1);
    }
    HashMap<String, String> _hashMap = new HashMap<String, String>();
    this.typeSystem.put("main", _hashMap);
    fsa.generateFile((this.name + ".java"), this.compileJava(resource));
    Iterable<FlyFunctionCall> _filter_1 = Iterables.<FlyFunctionCall>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FlyFunctionCall.class);
    for (final FlyFunctionCall element_1 : _filter_1) {
      {
        EObject _right = element_1.getEnvironment().getRight();
        DeclarationFeature _get = ((DeclarationObject) _right).getFeatures().get(0);
        String type_env = ((DeclarationFeature) _get).getValue_s();
        boolean _notEquals = (!Objects.equal(type_env, "local"));
        if (_notEquals) {
          String _name_2 = element_1.getTarget().getName();
          String _plus_2 = (_name_2 + ".js");
          fsa.generateFile(_plus_2, this.compileJS(resource, element_1.getTarget(), type_env));
          fsa.generateFile((type_env + "_deploy.sh"), this.compileScript(resource, element_1.getTarget().getName(), type_env));
        }
      }
    }
  }
  
  public CharSequence compileJava(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.FileInputStream;");
    _builder.newLine();
    _builder.append("import java.io.InputStreamReader;");
    _builder.newLine();
    _builder.append("import java.io.FileOutputStream;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.nio.ByteBuffer;");
    _builder.newLine();
    _builder.append("import java.nio.channels.FileChannel;");
    _builder.newLine();
    _builder.append("import java.nio.file.StandardOpenOption;");
    _builder.newLine();
    _builder.append("import java.io.BufferedReader;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.zip.ZipEntry;");
    _builder.newLine();
    _builder.append("import java.util.zip.ZipOutputStream;");
    _builder.newLine();
    _builder.append("import java.io.BufferedWriter;");
    _builder.newLine();
    _builder.append("import java.io.FileWriter;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.time.LocalDate;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.api.Table;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.io.csv.CsvReadOptions;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.columns.Column;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.selection.Selection;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.table.Rows;");
    _builder.newLine();
    _builder.append("import tech.tablesaw.api.Row;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.LinkedTransferQueue;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ExecutorService;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Executors;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Callable;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Future;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.atomic.AtomicInteger;");
    _builder.newLine();
    _builder.append("import java.util.Random;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.Comparator;");
    _builder.newLine();
    _builder.append("import java.util.Map.Entry;");
    _builder.newLine();
    _builder.append("import com.amazonaws.AmazonClientException;");
    _builder.newLine();
    _builder.append("import com.amazonaws.auth.AWSStaticCredentialsProvider;");
    _builder.newLine();
    _builder.append("import com.amazonaws.auth.BasicAWSCredentials;");
    _builder.newLine();
    _builder.append("import com.amazonaws.auth.profile.ProfileCredentialsProvider;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.AmazonIdentityManagement;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.AmazonIdentityManagementClientBuilder;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.CreateRoleRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.CreateRoleResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.DeleteRolePolicyRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.DeleteRoleRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.PutRolePolicyRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.AWSLambda;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.AWSLambdaClientBuilder;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.AddPermissionRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.AddPermissionResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.CreateFunctionRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.CreateFunctionResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.DeleteFunctionRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.lambda.model.FunctionCode;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.AmazonSQS;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.Message;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.AmazonSQSClient;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.CreateQueueRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.CreateQueueResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.ReceiveMessageRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.ReceiveMessageResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.SendMessageRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.AmazonSQSException;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.GetQueueAttributesRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.sqs.model.GetQueueUrlResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.GetRoleRequest;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.identitymanagement.model.GetRoleResult;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.AmazonS3;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.AmazonS3Client;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.AmazonS3ClientBuilder;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.AmazonS3Exception;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.Bucket;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.CannedAccessControlList;");
    _builder.newLine();
    _builder.append("import com.amazonaws.services.s3.model.PutObjectRequest;");
    _builder.newLine();
    _builder.append("import com.google.gson.Gson;");
    _builder.newLine();
    _builder.append("import com.google.gson.reflect.TypeToken;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      Iterable<Expression> _filter = Iterables.<Expression>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Expression.class);
      for(final Expression element : _filter) {
        {
          if ((element instanceof ChannelDeclaration)) {
            _builder.append("\t");
            String _generateChannelDeclaration = this.generateChannelDeclaration(((ChannelDeclaration)element));
            _builder.append(_generateChannelDeclaration, "\t");
            _builder.append("\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((element instanceof EnvironmentDeclaration)) {
            _builder.append("\t");
            String _generateEnvironmentDeclarationForCloud = this.generateEnvironmentDeclarationForCloud(((EnvironmentDeclaration)element));
            _builder.append(_generateEnvironmentDeclarationForCloud, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static ExecutorService thread_pool = Executors.newFixedThreadPool(4); //modify");
    _builder.newLine();
    {
      if (this.__local) {
        _builder.append("\t");
        _builder.append("static LinkedTransferQueue<String> __asyncTermination = new LinkedTransferQueue<String>(); ");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static HashMap<String,String> __fly_function_names = new HashMap<String,String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws Exception{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    {
      Iterable<Expression> _filter_1 = Iterables.<Expression>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Expression.class);
      for(final Expression element_1 : _filter_1) {
        {
          Object _checkBlock = this.checkBlock(element_1.eContainer());
          boolean _equals = Objects.equal(_checkBlock, Boolean.valueOf(false));
          if (_equals) {
            _builder.append("\t\t");
            CharSequence _generateExpression = this.generateExpression(element_1, "main");
            _builder.append(_generateExpression, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      if (this.__local) {
        _builder.append("\t\t");
        _builder.append("thread_pool.shutdown();");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      Iterable<FunctionDefinition> _filter_2 = Iterables.<FunctionDefinition>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FunctionDefinition.class);
      for(final FunctionDefinition element_2 : _filter_2) {
        {
          Object _checkBlock_1 = this.checkBlock(element_2.eContainer());
          boolean _equals_1 = Objects.equal(_checkBlock_1, Boolean.valueOf(false));
          if (_equals_1) {
            _builder.append("\t");
            String _generateFunctionDefinition = this.generateFunctionDefinition(element_2);
            _builder.append(_generateFunctionDefinition, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String __generateString(Table t) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("StringBuilder b = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.append(\"[\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int i_r = t.rowCount();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(Row r : t) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("b.append(\'{\');");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (int i=0;i< r.columnCount();i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("b.append(\"\\\"\"+ r.columnNames().get(i) +\"\\\":\"+r.getObject(i)+ ((i<r.columnCount()-1)?\",\":\"\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("b.append(\"}\"+(((i_r != 1 ))?\",\":\"\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("i_r--;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.append(\"]\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return b.toString();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateExpression(final Expression element, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((element instanceof VariableDeclaration)) {
        String _generateVariableDeclaration = this.generateVariableDeclaration(((VariableDeclaration)element), scope);
        _builder.append(_generateVariableDeclaration);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof DatDeclaration)) {
        String _generateDatDeclaration = this.generateDatDeclaration(((DatDeclaration)element), scope);
        _builder.append(_generateDatDeclaration);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof RandomDeclaration)) {
        String _generateRandomDeclaration = this.generateRandomDeclaration(((RandomDeclaration)element));
        _builder.append(_generateRandomDeclaration);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof Assignment)) {
        String _generateAssignment = this.generateAssignment(((Assignment)element), scope);
        _builder.append(_generateAssignment);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof PrintExpression)) {
        String _generatePrintExpression = this.generatePrintExpression(((PrintExpression)element), scope);
        _builder.append(_generatePrintExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof IfExpression)) {
        CharSequence _generateIfExpression = this.generateIfExpression(((IfExpression)element), scope);
        _builder.append(_generateIfExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof ForExpression)) {
        String _generateForExpression = this.generateForExpression(((ForExpression)element), scope);
        _builder.append(_generateForExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof WhileExpression)) {
        CharSequence _generateWhileExpression = this.generateWhileExpression(((WhileExpression)element), scope);
        _builder.append(_generateWhileExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof ChannelSend)) {
        String _generateChannelSend = this.generateChannelSend(((ChannelSend)element), scope);
        _builder.append(_generateChannelSend);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof ChannelReceive)) {
        String _generateChannelReceive = this.generateChannelReceive(((ChannelReceive)element), scope);
        _builder.append(_generateChannelReceive);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof FlyFunctionCall)) {
        String _generateFlyFunctionCall = this.generateFlyFunctionCall(((FlyFunctionCall)element), scope);
        _builder.append(_generateFlyFunctionCall);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof LocalFunctionCall)) {
        String _generateLocalFunctionCall = this.generateLocalFunctionCall(((LocalFunctionCall)element), scope);
        _builder.append(_generateLocalFunctionCall);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof FunctionReturn)) {
        CharSequence _generateFunctionReturn = this.generateFunctionReturn(((FunctionReturn)element), scope);
        _builder.append(_generateFunctionReturn);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof BlockExpression)) {
        CharSequence _generateBlockExpression = this.generateBlockExpression(((BlockExpression)element), scope);
        _builder.append(_generateBlockExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof VariableFunction)) {
        String _generateVariableFunction = this.generateVariableFunction(((VariableFunction)element), Boolean.valueOf(true), scope);
        _builder.append(_generateVariableFunction);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof ChannelDeclaration)) {
        String _generateChanelDeclarationForCloud = this.generateChanelDeclarationForCloud(((ChannelDeclaration)element));
        _builder.append(_generateChanelDeclarationForCloud);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((element instanceof SortExpression)) {
        String _generateSortExpression = this.generateSortExpression(((SortExpression)element), scope);
        _builder.append(_generateSortExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String generateSortExpression(final SortExpression exp, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ArrayList<Entry<Object,Object>> __sup = new ArrayList<Entry<Object,Object>>(");
    String _name = exp.getTarget().getName();
    _builder.append(_name);
    _builder.append(".entrySet());");
    _builder.newLineIfNotEmpty();
    _builder.append("Collections.sort(__sup, new Comparator<Entry<Object,Object>>() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public int compare(Entry<Object,Object> o1, Entry<Object,Object> o2) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(o1.getValue() instanceof Integer && o2.getValue() instanceof Integer)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return Integer.compare((Integer) o1.getValue(),(Integer) o2.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else if(o1.getValue() instanceof Double && o2.getValue() instanceof Double)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return Double.compare((Double) o1.getValue(), (Double) o2.getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else return 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    String _name_1 = exp.getTarget().getName();
    _builder.append(_name_1);
    _builder.append(".clear();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _equals = exp.getType().equals("desc");
      if (_equals) {
        _builder.append("Collections.reverse(__sup);");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("for (int __i=0; __i<__sup.size();__i++) {");
    _builder.newLine();
    _builder.append("\t");
    String _name_2 = exp.getTarget().getName();
    _builder.append(_name_2, "\t");
    _builder.append(".put(\"\"+__i, __sup.get(__i).getValue());");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateVariableDeclaration(final VariableDeclaration dec, final String scope) {
    boolean _equals = dec.getTypeobject().equals("var");
    if (_equals) {
      EObject _right = dec.getRight();
      if ((_right instanceof NameObjectDef)) {
        this.typeSystem.get(scope).put(dec.getName(), "HashMap");
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("HashMap<Object,Object> ");
        String _name = dec.getName();
        _builder.append(_name);
        _builder.append(" = new HashMap<Object,Object>();");
        _builder.newLineIfNotEmpty();
        String s = _builder.toString();
        int i = 0;
        EObject _right_1 = dec.getRight();
        EList<FeautureName> _features = ((NameObjectDef) _right_1).getFeatures();
        for (final FeautureName f : _features) {
          String _feature = f.getFeature();
          boolean _notEquals = (!Objects.equal(_feature, null));
          if (_notEquals) {
            HashMap<String, String> _get = this.typeSystem.get(scope);
            String _name_1 = dec.getName();
            String _plus = (_name_1 + ".");
            String _feature_1 = f.getFeature();
            String _plus_1 = (_plus + _feature_1);
            _get.put(_plus_1, 
              this.valuateArithmeticExpression(f.getValue(), scope));
            StringConcatenation _builder_1 = new StringConcatenation();
            String _name_2 = dec.getName();
            _builder_1.append(_name_2);
            _builder_1.append(".put(\"");
            String _feature_2 = f.getFeature();
            _builder_1.append(_feature_2);
            _builder_1.append("\",");
            String _generateArithmeticExpression = this.generateArithmeticExpression(f.getValue(), scope);
            _builder_1.append(_generateArithmeticExpression);
            _builder_1.append(");");
            _builder_1.newLineIfNotEmpty();
            String _plus_2 = (s + _builder_1);
            s = _plus_2;
          } else {
            HashMap<String, String> _get_1 = this.typeSystem.get(scope);
            String _name_3 = dec.getName();
            String _plus_3 = (_name_3 + "[");
            String _plus_4 = (_plus_3 + Integer.valueOf(i));
            String _plus_5 = (_plus_4 + "]");
            _get_1.put(_plus_5, this.valuateArithmeticExpression(f.getValue(), scope));
            StringConcatenation _builder_2 = new StringConcatenation();
            String _name_4 = dec.getName();
            _builder_2.append(_name_4);
            _builder_2.append(".put(");
            _builder_2.append(i);
            _builder_2.append(",");
            String _generateArithmeticExpression_1 = this.generateArithmeticExpression(f.getValue(), scope);
            _builder_2.append(_generateArithmeticExpression_1);
            _builder_2.append(");");
            _builder_2.newLineIfNotEmpty();
            String _plus_6 = (s + _builder_2);
            s = _plus_6;
            i++;
          }
        }
        return s;
      } else {
        EObject _right_2 = dec.getRight();
        if ((_right_2 instanceof FlyFunctionCall)) {
          StringConcatenation _builder_3 = new StringConcatenation();
          EObject _right_3 = dec.getRight();
          String _generateFlyFunctionCall = this.generateFlyFunctionCall(((FlyFunctionCall) _right_3), scope);
          _builder_3.append(_generateFlyFunctionCall);
          _builder_3.newLineIfNotEmpty();
          _builder_3.append("List<Future<Object>> ");
          String _name_5 = dec.getName();
          _builder_3.append(_name_5);
          _builder_3.append(" = ");
          _builder_3.append(this.last_func_result);
          _builder_3.append(";");
          _builder_3.newLineIfNotEmpty();
          String s_1 = _builder_3.toString();
          this.typeSystem.get(scope).put(dec.getName(), "FutureList");
          return s_1;
        } else {
          EObject _right_4 = dec.getRight();
          if ((_right_4 instanceof ChannelReceive)) {
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("Object ");
            String _name_6 = dec.getName();
            _builder_4.append(_name_6);
            _builder_4.append(" = null;");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("try{");
            _builder_4.newLine();
            _builder_4.append("\t");
            _builder_4.append("e = ");
            EObject _right_5 = dec.getRight();
            String _generateChannelReceive = this.generateChannelReceive(((ChannelReceive) _right_5), scope);
            _builder_4.append(_generateChannelReceive, "\t");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("}catch(InterruptedException e1){");
            _builder_4.newLine();
            _builder_4.append("\t");
            _builder_4.append("e1.printStackTrace();");
            _builder_4.newLine();
            _builder_4.append("}");
            _builder_4.newLine();
            String s_2 = _builder_4.toString();
            return s_2;
          } else {
            EObject _right_6 = dec.getRight();
            if ((_right_6 instanceof VariableFunction)) {
              EObject _right_7 = dec.getRight();
              boolean _equals_1 = ((VariableFunction) _right_7).getFeature().equals("split");
              if (_equals_1) {
                this.typeSystem.get(scope).put(dec.getName(), "HashMap");
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("HashMap<Object,Object> ");
                String _name_7 = dec.getName();
                _builder_5.append(_name_7);
                _builder_5.append(" = new HashMap<Object,Object>();");
                _builder_5.newLineIfNotEmpty();
                _builder_5.append("int _");
                String _name_8 = dec.getName();
                _builder_5.append(_name_8);
                _builder_5.append("_crt=0;");
                _builder_5.newLineIfNotEmpty();
                _builder_5.append("for(String _");
                String _name_9 = dec.getName();
                _builder_5.append(_name_9);
                _builder_5.append(" : ");
                EObject _right_8 = dec.getRight();
                String _name_10 = ((VariableFunction) _right_8).getTarget().getName();
                _builder_5.append(_name_10);
                _builder_5.append(".");
                EObject _right_9 = dec.getRight();
                String _feature_3 = ((VariableFunction) _right_9).getFeature();
                _builder_5.append(_feature_3);
                _builder_5.append("(");
                EObject _right_10 = dec.getRight();
                String _generateArithmeticExpression_2 = this.generateArithmeticExpression(((VariableFunction) _right_10).getExpressions().get(0), scope);
                _builder_5.append(_generateArithmeticExpression_2);
                _builder_5.append(")){");
                _builder_5.newLineIfNotEmpty();
                _builder_5.append("\t");
                String _name_11 = dec.getName();
                _builder_5.append(_name_11, "\t");
                _builder_5.append(".put(_");
                String _name_12 = dec.getName();
                _builder_5.append(_name_12, "\t");
                _builder_5.append("_crt++,_");
                String _name_13 = dec.getName();
                _builder_5.append(_name_13, "\t");
                _builder_5.append(");");
                _builder_5.newLineIfNotEmpty();
                _builder_5.append("}");
                _builder_5.newLine();
                return _builder_5.toString();
              } else {
                EObject _right_11 = dec.getRight();
                this.typeSystem.get(scope).put(dec.getName(), 
                  this.valuateArithmeticExpression(((VariableFunction) _right_11), scope));
                StringConcatenation _builder_6 = new StringConcatenation();
                EObject _right_12 = dec.getRight();
                String _valuateArithmeticExpression = this.valuateArithmeticExpression(((VariableFunction) _right_12), scope);
                _builder_6.append(_valuateArithmeticExpression);
                _builder_6.append(" ");
                String _name_14 = dec.getName();
                _builder_6.append(_name_14);
                _builder_6.append(" = ");
                EObject _right_13 = dec.getRight();
                String _generateArithmeticExpression_3 = this.generateArithmeticExpression(((VariableFunction) _right_13), scope);
                _builder_6.append(_generateArithmeticExpression_3);
                _builder_6.append(";");
                _builder_6.newLineIfNotEmpty();
                return _builder_6.toString();
              }
            } else {
              if (((dec.getRight() instanceof CastExpression) && (((CastExpression) dec.getRight()).getTarget() instanceof ChannelReceive))) {
                EObject _right_14 = dec.getRight();
                ArithmeticExpression _target = ((CastExpression) _right_14).getTarget();
                EObject _right_15 = ((ChannelReceive) _target).getTarget().getEnvironment().getRight();
                boolean _equals_2 = ((DeclarationObject) _right_15).getFeatures().get(0).getValue_s().equals("aws");
                if (_equals_2) {
                  EObject _right_16 = dec.getRight();
                  boolean _equals_3 = ((CastExpression) _right_16).getType().equals("Object");
                  if (_equals_3) {
                    this.typeSystem.get(scope).put(dec.getName(), "HashMap");
                    StringConcatenation _builder_7 = new StringConcatenation();
                    _builder_7.append("String __res_");
                    EObject _right_17 = dec.getRight();
                    ArithmeticExpression _target_1 = ((CastExpression) _right_17).getTarget();
                    String _name_15 = ((ChannelReceive) _target_1).getTarget().getName();
                    _builder_7.append(_name_15);
                    _builder_7.append(" = (String) ");
                    EObject _right_18 = dec.getRight();
                    ArithmeticExpression _target_2 = ((CastExpression) _right_18).getTarget();
                    String _name_16 = ((ChannelReceive) _target_2).getTarget().getName();
                    _builder_7.append(_name_16);
                    _builder_7.append(".take();");
                    _builder_7.newLineIfNotEmpty();
                    _builder_7.append("HashMap ");
                    String _name_17 = dec.getName();
                    _builder_7.append(_name_17);
                    _builder_7.append(" = new Gson().fromJson(__res_");
                    EObject _right_19 = dec.getRight();
                    ArithmeticExpression _target_3 = ((CastExpression) _right_19).getTarget();
                    String _name_18 = ((ChannelReceive) _target_3).getTarget().getName();
                    _builder_7.append(_name_18);
                    _builder_7.append(",new TypeToken<HashMap<String, String>>() {}.getType());");
                    _builder_7.newLineIfNotEmpty();
                    return _builder_7.toString();
                  }
                } else {
                  EObject _right_20 = dec.getRight();
                  ArithmeticExpression _target_4 = ((CastExpression) _right_20).getTarget();
                  EObject _right_21 = ((ChannelReceive) _target_4).getTarget().getEnvironment().getRight();
                  boolean _equals_4 = ((DeclarationObject) _right_21).getFeatures().get(0).getValue_s().equals("local");
                  if (_equals_4) {
                    this.typeSystem.get(scope).put(dec.getName(), "HashMap");
                    StringConcatenation _builder_8 = new StringConcatenation();
                    _builder_8.append("HashMap<Object,Object> ");
                    String _name_19 = dec.getName();
                    _builder_8.append(_name_19);
                    _builder_8.append(" = (HashMap<Object,Object>) ");
                    EObject _right_22 = dec.getRight();
                    ArithmeticExpression _target_5 = ((CastExpression) _right_22).getTarget();
                    String _name_20 = ((ChannelReceive) _target_5).getTarget().getName();
                    _builder_8.append(_name_20);
                    _builder_8.append(".take(); ");
                    _builder_8.newLineIfNotEmpty();
                    return _builder_8.toString();
                  }
                }
              } else {
                EObject _right_23 = dec.getRight();
                this.typeSystem.get(scope).put(dec.getName(), 
                  this.valuateArithmeticExpression(((ArithmeticExpression) _right_23), scope));
                StringConcatenation _builder_9 = new StringConcatenation();
                EObject _right_24 = dec.getRight();
                String _valuateArithmeticExpression_1 = this.valuateArithmeticExpression(((ArithmeticExpression) _right_24), scope);
                _builder_9.append(_valuateArithmeticExpression_1);
                _builder_9.append(" ");
                String _name_21 = dec.getName();
                _builder_9.append(_name_21);
                _builder_9.append(" = ");
                EObject _right_25 = dec.getRight();
                String _generateArithmeticExpression_4 = this.generateArithmeticExpression(((ArithmeticExpression) _right_25), scope);
                _builder_9.append(_generateArithmeticExpression_4);
                _builder_9.append(";");
                return _builder_9.toString();
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public String generateEnvironmentDeclarationForCloud(final EnvironmentDeclaration dec) {
    EObject _right = dec.getRight();
    String env = ((DeclarationObject) _right).getFeatures().get(0).getValue_s();
    boolean _equals = env.equals("aws");
    if (_equals) {
      EObject _right_1 = dec.getRight();
      DeclarationFeature _get = ((DeclarationObject) _right_1).getFeatures().get(1);
      String access_id_key = ((DeclarationFeature) _get).getValue_s();
      EObject _right_2 = dec.getRight();
      DeclarationFeature _get_1 = ((DeclarationObject) _right_2).getFeatures().get(2);
      String secret_access_key = ((DeclarationFeature) _get_1).getValue_s();
      EObject _right_3 = dec.getRight();
      DeclarationFeature _get_2 = ((DeclarationObject) _right_3).getFeatures().get(3);
      String region = ((DeclarationFeature) _get_2).getValue_s();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("static BasicAWSCredentials ");
      String _name = dec.getName();
      _builder.append(_name);
      _builder.append(" = new BasicAWSCredentials(\"");
      _builder.append(access_id_key);
      _builder.append("\", \"");
      _builder.append(secret_access_key);
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("static AmazonSQS __sqs  = AmazonSQSClient.builder()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(".withCredentials(new AWSStaticCredentialsProvider(");
      String _name_1 = dec.getName();
      _builder.append(_name_1, "\t");
      _builder.append("))");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".withRegion(\"");
      _builder.append(region, "\t");
      _builder.append("\")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".build();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("static AmazonIdentityManagement __iam = AmazonIdentityManagementClientBuilder.standard()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(".withCredentials(new AWSStaticCredentialsProvider(");
      String _name_2 = dec.getName();
      _builder.append(_name_2, "\t");
      _builder.append("))");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".withRegion(\"");
      _builder.append(region, "\t");
      _builder.append("\")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".build();");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("static AWSLambda __lambda = AWSLambdaClientBuilder.standard()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(".withCredentials(new AWSStaticCredentialsProvider(");
      String _name_3 = dec.getName();
      _builder.append(_name_3, "\t");
      _builder.append("))");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".withRegion(\"");
      _builder.append(region, "\t");
      _builder.append("\")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".build();");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("static AmazonS3 __s3 = AmazonS3Client.builder()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(".withCredentials(new AWSStaticCredentialsProvider(");
      String _name_4 = dec.getName();
      _builder.append(_name_4, "\t");
      _builder.append("))");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".withRegion(\"");
      _builder.append(region, "\t");
      _builder.append("\")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".build();");
      _builder.newLine();
      return _builder.toString();
    }
    return null;
  }
  
  public String generateChannelDeclaration(final ChannelDeclaration declaration) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("static LinkedTransferQueue<Object> ");
    String _name = declaration.getName();
    _builder.append(_name);
    _builder.append(" = new LinkedTransferQueue<Object>();");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateChanelDeclarationForCloud(final ChannelDeclaration declaration) {
    EObject _right = declaration.getEnvironment().getRight();
    String env = ((DeclarationObject) _right).getFeatures().get(0).getValue_s();
    boolean _equals = env.equals("aws");
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("__sqs.createQueue(new CreateQueueRequest(\"");
      String _name = declaration.getName();
      _builder.append(_name);
      _builder.append("\"));");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("for(int __i=0;__i<4;__i++){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("thread_pool.submit(new Callable<Object>() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public Object call() throws Exception {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("while(true) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl(\"");
      String _name_1 = declaration.getName();
      _builder.append(_name_1, "\t\t\t\t");
      _builder.append("\").getQueueUrl()).");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("withWaitTimeSeconds(20).withMaxNumberOfMessages(10);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("for(Message msg : __res.getMessages()) { ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      String _name_2 = declaration.getName();
      _builder.append(_name_2, "\t\t\t\t\t");
      _builder.append(".put(msg.getBody());");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t\t");
      _builder.append("__sqs.deleteMessage(__sqs.getQueueUrl(\"");
      String _name_3 = declaration.getName();
      _builder.append(_name_3, "\t\t\t\t\t");
      _builder.append("\").getQueueUrl(), msg.getReceiptHandle());");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("});");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    }
    return null;
  }
  
  public String generateDatDeclaration(final DatDeclaration dec, final String scope) {
    this.typeSystem.get(scope).put(dec.getName(), "Table");
    EObject _right = dec.getRight();
    if ((_right instanceof NameObjectDef)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Table ");
      String _name = dec.getName();
      _builder.append(_name);
      _builder.append(" = Table.read().csv(CsvReadOptions");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".builder(");
      EObject _right_1 = dec.getRight();
      String _generateArithmeticExpression = this.generateArithmeticExpression(((NameObjectDef) _right_1).getFeatures().get(1).getValue(), scope);
      _builder.append(_generateArithmeticExpression, "\t");
      _builder.append(")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".maxNumberOfColumns(5000)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(".tableName(");
      EObject _right_2 = dec.getRight();
      String _generateArithmeticExpression_1 = this.generateArithmeticExpression(((NameObjectDef) _right_2).getFeatures().get(0).getValue(), scope);
      _builder.append(_generateArithmeticExpression_1, "\t");
      _builder.append(")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append(".separator(\'");
      EObject _right_3 = dec.getRight();
      String _generateArithmeticExpression_2 = this.generateArithmeticExpression(((NameObjectDef) _right_3).getFeatures().get(3).getValue(), scope);
      char _charAt = ((String) _generateArithmeticExpression_2).charAt(1);
      _builder.append(_charAt, "\t");
      _builder.append("\')");
      _builder.newLineIfNotEmpty();
      _builder.append(");");
      _builder.newLine();
      return _builder.toString();
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      EObject _right_4 = dec.getRight();
      String _valuateArithmeticExpression = this.valuateArithmeticExpression(((ArithmeticExpression) _right_4), scope);
      _builder_1.append(_valuateArithmeticExpression);
      _builder_1.append(" ");
      String _name_1 = dec.getName();
      _builder_1.append(_name_1);
      _builder_1.append(" = ");
      EObject _right_5 = dec.getRight();
      String _generateArithmeticExpression_3 = this.generateArithmeticExpression(((ArithmeticExpression) _right_5), scope);
      _builder_1.append(_generateArithmeticExpression_3);
      _builder_1.append(";");
      return _builder_1.toString();
    }
  }
  
  public String generateRandomDeclaration(final RandomDeclaration declaration) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Random ");
    String _name = declaration.getName();
    _builder.append(_name);
    _builder.append(" = new Random();");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateArithmeticExpression(final ArithmeticExpression expression, final String scope) {
    Object _xifexpression = null;
    if ((expression instanceof BinaryOperation)) {
      boolean _equals = ((BinaryOperation)expression).getFeature().equals("and");
      if (_equals) {
        StringConcatenation _builder = new StringConcatenation();
        Object _generateArithmeticExpression = this.generateArithmeticExpression(((BinaryOperation)expression).getLeft(), scope);
        _builder.append(_generateArithmeticExpression);
        _builder.append(" && ");
        Object _generateArithmeticExpression_1 = this.generateArithmeticExpression(((BinaryOperation)expression).getRight(), scope);
        _builder.append(_generateArithmeticExpression_1);
        return _builder.toString();
      } else {
        boolean _equals_1 = ((BinaryOperation)expression).getFeature().equals("or");
        if (_equals_1) {
          StringConcatenation _builder_1 = new StringConcatenation();
          Object _generateArithmeticExpression_2 = this.generateArithmeticExpression(((BinaryOperation)expression).getLeft(), scope);
          _builder_1.append(_generateArithmeticExpression_2);
          _builder_1.append(" || ");
          Object _generateArithmeticExpression_3 = this.generateArithmeticExpression(((BinaryOperation)expression).getRight(), scope);
          _builder_1.append(_generateArithmeticExpression_3);
          return _builder_1.toString();
        } else {
          StringConcatenation _builder_2 = new StringConcatenation();
          Object _generateArithmeticExpression_4 = this.generateArithmeticExpression(((BinaryOperation)expression).getLeft(), scope);
          _builder_2.append(_generateArithmeticExpression_4);
          _builder_2.append(" ");
          String _feature = ((BinaryOperation)expression).getFeature();
          _builder_2.append(_feature);
          _builder_2.append(" ");
          Object _generateArithmeticExpression_5 = this.generateArithmeticExpression(((BinaryOperation)expression).getRight(), scope);
          _builder_2.append(_generateArithmeticExpression_5);
          return _builder_2.toString();
        }
      }
    } else {
      Object _xifexpression_1 = null;
      if ((expression instanceof UnaryOperation)) {
        StringConcatenation _builder_3 = new StringConcatenation();
        String _feature_1 = ((UnaryOperation)expression).getFeature();
        _builder_3.append(_feature_1);
        Object _generateArithmeticExpression_6 = this.generateArithmeticExpression(((UnaryOperation)expression).getOperand(), scope);
        _builder_3.append(_generateArithmeticExpression_6);
        return _builder_3.toString();
      } else {
        Object _xifexpression_2 = null;
        if ((expression instanceof PostfixOperation)) {
          StringConcatenation _builder_4 = new StringConcatenation();
          Object _generateArithmeticExpression_7 = this.generateArithmeticExpression(((PostfixOperation)expression).getOperand(), scope);
          _builder_4.append(_generateArithmeticExpression_7);
          String _feature_2 = ((PostfixOperation)expression).getFeature();
          _builder_4.append(_feature_2);
          return _builder_4.toString();
        } else {
          Object _xifexpression_3 = null;
          if ((expression instanceof ParenthesizedExpression)) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("(");
            Object _generateArithmeticExpression_8 = this.generateArithmeticExpression(((ParenthesizedExpression)expression).getExpression(), scope);
            _builder_5.append(_generateArithmeticExpression_8);
            _builder_5.append(")");
            return _builder_5.toString();
          } else {
            Object _xifexpression_4 = null;
            if ((expression instanceof NumberLiteral)) {
              StringConcatenation _builder_6 = new StringConcatenation();
              int _value = ((NumberLiteral)expression).getValue();
              _builder_6.append(_value);
              return _builder_6.toString();
            } else {
              Object _xifexpression_5 = null;
              if ((expression instanceof BooleanLiteral)) {
                StringConcatenation _builder_7 = new StringConcatenation();
                String _value_1 = ((BooleanLiteral)expression).getValue();
                _builder_7.append(_value_1);
                return _builder_7.toString();
              } else {
                Object _xifexpression_6 = null;
                if ((expression instanceof StringLiteral)) {
                  StringConcatenation _builder_8 = new StringConcatenation();
                  _builder_8.append("\"");
                  String _value_2 = ((StringLiteral)expression).getValue();
                  _builder_8.append(_value_2);
                  _builder_8.append("\"");
                  return _builder_8.toString();
                } else {
                  Object _xifexpression_7 = null;
                  if ((expression instanceof FloatLiteral)) {
                    StringConcatenation _builder_9 = new StringConcatenation();
                    float _value_3 = ((FloatLiteral)expression).getValue();
                    _builder_9.append(_value_3);
                    return _builder_9.toString();
                  } else {
                    Object _xifexpression_8 = null;
                    if ((expression instanceof VariableLiteral)) {
                      StringConcatenation _builder_10 = new StringConcatenation();
                      String _name = ((VariableLiteral)expression).getVariable().getName();
                      _builder_10.append(_name);
                      return _builder_10.toString();
                    } else {
                      Object _xifexpression_9 = null;
                      if ((expression instanceof NameObject)) {
                        HashMap<String, String> _get = this.typeSystem.get(scope);
                        String _name_1 = ((NameObject)expression).getName().getName();
                        String _plus = (_name_1 + ".");
                        String _value_4 = ((NameObject)expression).getValue();
                        String _plus_1 = (_plus + _value_4);
                        String _get_1 = _get.get(_plus_1);
                        boolean _tripleNotEquals = (_get_1 != null);
                        if (_tripleNotEquals) {
                          StringConcatenation _builder_11 = new StringConcatenation();
                          _builder_11.append("(");
                          HashMap<String, String> _get_2 = this.typeSystem.get(scope);
                          String _name_2 = ((NameObject)expression).getName().getName();
                          String _plus_2 = (_name_2 + ".");
                          String _value_5 = ((NameObject)expression).getValue();
                          String _plus_3 = (_plus_2 + _value_5);
                          String _get_3 = _get_2.get(_plus_3);
                          _builder_11.append(_get_3);
                          _builder_11.append(") ");
                          String _name_3 = ((NameObject)expression).getName().getName();
                          _builder_11.append(_name_3);
                          _builder_11.append(".get(\"");
                          String _value_6 = ((NameObject)expression).getValue();
                          _builder_11.append(_value_6);
                          _builder_11.append("\")");
                          return _builder_11.toString();
                        } else {
                          StringConcatenation _builder_12 = new StringConcatenation();
                          String _name_4 = ((NameObject)expression).getName().getName();
                          _builder_12.append(_name_4);
                          _builder_12.append(".get(\"");
                          String _value_7 = ((NameObject)expression).getValue();
                          _builder_12.append(_value_7);
                          _builder_12.append("\")");
                          return _builder_12.toString();
                        }
                      } else {
                        Object _xifexpression_10 = null;
                        if ((expression instanceof IndexObject)) {
                          HashMap<String, String> _get_4 = this.typeSystem.get(scope);
                          String _name_5 = ((IndexObject)expression).getName().getName();
                          String _plus_4 = (_name_5 + "[");
                          int _valuet = ((IndexObject)expression).getValuet();
                          String _plus_5 = (_plus_4 + Integer.valueOf(_valuet));
                          String _plus_6 = (_plus_5 + "]");
                          String _get_5 = _get_4.get(_plus_6);
                          boolean _tripleNotEquals_1 = (_get_5 != null);
                          if (_tripleNotEquals_1) {
                            StringConcatenation _builder_13 = new StringConcatenation();
                            _builder_13.append("(");
                            HashMap<String, String> _get_6 = this.typeSystem.get(scope);
                            String _name_6 = ((IndexObject)expression).getName().getName();
                            String _plus_7 = (_name_6 + "[");
                            int _valuet_1 = ((IndexObject)expression).getValuet();
                            String _plus_8 = (_plus_7 + Integer.valueOf(_valuet_1));
                            String _plus_9 = (_plus_8 + "]");
                            String _get_7 = _get_6.get(_plus_9);
                            _builder_13.append(_get_7);
                            _builder_13.append(") ");
                            String _name_7 = ((IndexObject)expression).getName().getName();
                            _builder_13.append(_name_7);
                            _builder_13.append(".get(\"");
                            int _valuet_2 = ((IndexObject)expression).getValuet();
                            _builder_13.append(_valuet_2);
                            _builder_13.append("\")");
                            return _builder_13.toString();
                          } else {
                            boolean _equals_2 = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName()).equals("HashMap");
                            if (_equals_2) {
                              StringConcatenation _builder_14 = new StringConcatenation();
                              String _name_8 = ((IndexObject)expression).getName().getName();
                              _builder_14.append(_name_8);
                              _builder_14.append(".get(");
                              int _valuet_3 = ((IndexObject)expression).getValuet();
                              _builder_14.append(_valuet_3);
                              _builder_14.append(")");
                              return _builder_14.toString();
                            } else {
                              boolean _equals_3 = this.typeSystem.get(scope).get(this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName())).equals("Table");
                              if (_equals_3) {
                                VariableDeclaration _value_8 = ((IndexObject)expression).getValue();
                                boolean _notEquals = (!Objects.equal(_value_8, null));
                                if (_notEquals) {
                                  StringConcatenation _builder_15 = new StringConcatenation();
                                  String _get_8 = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName());
                                  _builder_15.append(_get_8);
                                  _builder_15.append(".get(_");
                                  String _get_9 = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName());
                                  _builder_15.append(_get_9);
                                  _builder_15.append(", ");
                                  String _name_9 = ((IndexObject)expression).getValue().getName();
                                  _builder_15.append(_name_9);
                                  _builder_15.append(")");
                                  return _builder_15.toString();
                                } else {
                                  StringConcatenation _builder_16 = new StringConcatenation();
                                  String _get_10 = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName());
                                  _builder_16.append(_get_10);
                                  _builder_16.append(".get(_");
                                  String _get_11 = this.typeSystem.get(scope).get(((IndexObject)expression).getName().getName());
                                  _builder_16.append(_get_11);
                                  _builder_16.append(", ");
                                  int _valuet_4 = ((IndexObject)expression).getValuet();
                                  _builder_16.append(_valuet_4);
                                  _builder_16.append(")");
                                  return _builder_16.toString();
                                }
                              }
                            }
                          }
                        } else {
                          Object _xifexpression_11 = null;
                          if ((expression instanceof DatSingleObject)) {
                            StringConcatenation _builder_17 = new StringConcatenation();
                            String _name_10 = ((DatSingleObject)expression).getName().getName();
                            _builder_17.append(_name_10);
                            _builder_17.append(".get(");
                            Object _generateArithmeticExpression_9 = this.generateArithmeticExpression(((DatSingleObject)expression).getValue1(), scope);
                            _builder_17.append(_generateArithmeticExpression_9);
                            _builder_17.append(",");
                            Object _generateArithmeticExpression_10 = this.generateArithmeticExpression(((DatSingleObject)expression).getValue2(), scope);
                            _builder_17.append(_generateArithmeticExpression_10);
                            _builder_17.append(")");
                            return _builder_17.toString();
                          } else {
                            Object _xifexpression_12 = null;
                            if ((expression instanceof DatTableObject)) {
                              _xifexpression_12 = null;
                            } else {
                              if ((expression instanceof CastExpression)) {
                                boolean _equals_4 = ((CastExpression)expression).getOp().equals("as");
                                if (_equals_4) {
                                  ArithmeticExpression _target = ((CastExpression)expression).getTarget();
                                  if ((_target instanceof ChannelReceive)) {
                                    ArithmeticExpression _target_1 = ((CastExpression)expression).getTarget();
                                    EnvironmentDeclaration _environment = ((ChannelReceive) _target_1).getTarget().getEnvironment();
                                    EObject _right = ((EnvironmentDeclaration) _environment).getRight();
                                    boolean _equals_5 = ((DeclarationObject) _right).getFeatures().get(0).getValue_s().equals("aws");
                                    if (_equals_5) {
                                      boolean _equals_6 = ((CastExpression)expression).getType().equals("Integer");
                                      if (_equals_6) {
                                        StringConcatenation _builder_18 = new StringConcatenation();
                                        _builder_18.append("__");
                                        _builder_18.newLine();
                                        _builder_18.append("ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl(\"");
                                        ArithmeticExpression _target_2 = ((CastExpression)expression).getTarget();
                                        String _name_11 = ((ChannelReceive) _target_2).getTarget().getName();
                                        _builder_18.append(_name_11);
                                        _builder_18.append("\").getQueueUrl());");
                                        _builder_18.newLineIfNotEmpty();
                                        _builder_18.append("ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);");
                                        _builder_18.newLine();
                                        _builder_18.append("while(__res.getMessages().size() == 0){");
                                        _builder_18.newLine();
                                        _builder_18.append("\t");
                                        _builder_18.append("__res = __sqs.receiveMessage(__recmsg);");
                                        _builder_18.newLine();
                                        _builder_18.append("}");
                                        _builder_18.newLine();
                                        _builder_18.append("Integer.parseInt(__res.getMessages().get(0).getBody());");
                                        _builder_18.newLine();
                                        _builder_18.append("__sqs.deleteMessage(__sqs.getQueueUrl(\"");
                                        ArithmeticExpression _target_3 = ((CastExpression)expression).getTarget();
                                        String _name_12 = ((ChannelReceive) _target_3).getTarget().getName();
                                        _builder_18.append(_name_12);
                                        _builder_18.append("\").getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());");
                                        _builder_18.newLineIfNotEmpty();
                                        return _builder_18.toString();
                                      } else {
                                        boolean _equals_7 = ((CastExpression)expression).getType().equals("Float");
                                        if (_equals_7) {
                                          StringConcatenation _builder_19 = new StringConcatenation();
                                          _builder_19.append("ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl(\"");
                                          ArithmeticExpression _target_4 = ((CastExpression)expression).getTarget();
                                          String _name_13 = ((ChannelReceive) _target_4).getTarget().getName();
                                          _builder_19.append(_name_13);
                                          _builder_19.append("\").getQueueUrl());");
                                          _builder_19.newLineIfNotEmpty();
                                          _builder_19.append("ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);");
                                          _builder_19.newLine();
                                          _builder_19.append("while(__res.getMessages().size() == 0){");
                                          _builder_19.newLine();
                                          _builder_19.append("__res = __sqs.receiveMessage(__recmsg);");
                                          _builder_19.newLine();
                                          _builder_19.append("}");
                                          _builder_19.newLine();
                                          _builder_19.append("Double.parseDouble(__res.getMessages().get(0).getBody());");
                                          _builder_19.newLine();
                                          _builder_19.append("__sqs.deleteMessage(__sqs.getQueueUrl(\"");
                                          ArithmeticExpression _target_5 = ((CastExpression)expression).getTarget();
                                          String _name_14 = ((ChannelReceive) _target_5).getTarget().getName();
                                          _builder_19.append(_name_14);
                                          _builder_19.append("\").getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());");
                                          _builder_19.newLineIfNotEmpty();
                                          return _builder_19.toString();
                                        }
                                      }
                                    }
                                  }
                                  boolean _equals_8 = ((CastExpression)expression).getType().equals("String");
                                  if (_equals_8) {
                                    StringConcatenation _builder_20 = new StringConcatenation();
                                    _builder_20.append("(String) ");
                                    Object _generateArithmeticExpression_11 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_20.append(_generateArithmeticExpression_11);
                                    return _builder_20.toString();
                                  }
                                  boolean _equals_9 = ((CastExpression)expression).getType().equals("Integer");
                                  if (_equals_9) {
                                    StringConcatenation _builder_21 = new StringConcatenation();
                                    _builder_21.append("(int)((");
                                    Object _generateArithmeticExpression_12 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_21.append(_generateArithmeticExpression_12);
                                    _builder_21.append(" instanceof Short)? new Integer((Short) ");
                                    Object _generateArithmeticExpression_13 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_21.append(_generateArithmeticExpression_13);
                                    _builder_21.append("):(Integer) ");
                                    Object _generateArithmeticExpression_14 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_21.append(_generateArithmeticExpression_14);
                                    _builder_21.append(")");
                                    return _builder_21.toString();
                                  }
                                  boolean _equals_10 = ((CastExpression)expression).getType().equals("Double");
                                  if (_equals_10) {
                                    StringConcatenation _builder_22 = new StringConcatenation();
                                    _builder_22.append("(double)((");
                                    Object _generateArithmeticExpression_15 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_22.append(_generateArithmeticExpression_15);
                                    _builder_22.append(" instanceof Float)? new Double((Float) ");
                                    Object _generateArithmeticExpression_16 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_22.append(_generateArithmeticExpression_16);
                                    _builder_22.append("):(Double) ");
                                    Object _generateArithmeticExpression_17 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_22.append(_generateArithmeticExpression_17);
                                    _builder_22.append(")");
                                    return _builder_22.toString();
                                  }
                                  boolean _equals_11 = ((CastExpression)expression).getType().equals("Dat");
                                  if (_equals_11) {
                                    StringConcatenation _builder_23 = new StringConcatenation();
                                    _builder_23.append("(Table) ");
                                    Object _generateArithmeticExpression_18 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_23.append(_generateArithmeticExpression_18);
                                    return _builder_23.toString();
                                  }
                                  boolean _equals_12 = ((CastExpression)expression).getType().equals("Date");
                                  if (_equals_12) {
                                    StringConcatenation _builder_24 = new StringConcatenation();
                                    _builder_24.append("LocalDate.parse(");
                                    Object _generateArithmeticExpression_19 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_24.append(_generateArithmeticExpression_19);
                                    _builder_24.append(")");
                                    return _builder_24.toString();
                                  }
                                  boolean _equals_13 = ((CastExpression)expression).getType().equals("Object");
                                  if (_equals_13) {
                                    StringConcatenation _builder_25 = new StringConcatenation();
                                    _builder_25.append("((HashMap<Object,Object>) ");
                                    Object _generateArithmeticExpression_20 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_25.append(_generateArithmeticExpression_20);
                                    _builder_25.append(")");
                                    return _builder_25.toString();
                                  }
                                } else {
                                  boolean _equals_14 = ((CastExpression)expression).getType().equals("Integer");
                                  if (_equals_14) {
                                    StringConcatenation _builder_26 = new StringConcatenation();
                                    _builder_26.append("Integer.parseInt( ");
                                    Object _generateArithmeticExpression_21 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_26.append(_generateArithmeticExpression_21);
                                    _builder_26.append(".toString())");
                                    return _builder_26.toString();
                                  }
                                  boolean _equals_15 = ((CastExpression)expression).getType().equals("Double");
                                  if (_equals_15) {
                                    StringConcatenation _builder_27 = new StringConcatenation();
                                    _builder_27.append("Double.parseDouble( ");
                                    Object _generateArithmeticExpression_22 = this.generateArithmeticExpression(((CastExpression)expression).getTarget(), scope);
                                    _builder_27.append(_generateArithmeticExpression_22);
                                    _builder_27.append(".toString())");
                                    return _builder_27.toString();
                                  }
                                }
                              } else {
                                if ((expression instanceof MathFunction)) {
                                  String s = "";
                                  boolean _equals_16 = ((MathFunction)expression).getFeature().equals("round");
                                  if (_equals_16) {
                                    String _s = s;
                                    s = (_s + "(int) ");
                                  }
                                  String _s_1 = s;
                                  String _feature_3 = ((MathFunction)expression).getFeature();
                                  String _plus_10 = ("Math." + _feature_3);
                                  String _plus_11 = (_plus_10 + "(");
                                  s = (_s_1 + _plus_11);
                                  EList<ArithmeticExpression> _expressions = ((MathFunction)expression).getExpressions();
                                  for (final ArithmeticExpression exp : _expressions) {
                                    {
                                      String _s_2 = s;
                                      Object _generateArithmeticExpression_23 = this.generateArithmeticExpression(exp, scope);
                                      s = (_s_2 + _generateArithmeticExpression_23);
                                      ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(((MathFunction)expression).getExpressions());
                                      boolean _notEquals_1 = (!Objects.equal(exp, _last));
                                      if (_notEquals_1) {
                                        String _s_3 = s;
                                        s = (_s_3 + ",");
                                      }
                                    }
                                  }
                                  String _s_2 = s;
                                  s = (_s_2 + ")");
                                  return s;
                                } else {
                                  if ((expression instanceof TimeFunction)) {
                                    VariableDeclaration _value_9 = ((TimeFunction)expression).getValue();
                                    boolean _notEquals_1 = (!Objects.equal(_value_9, null));
                                    if (_notEquals_1) {
                                      StringConcatenation _builder_28 = new StringConcatenation();
                                      _builder_28.append("( System.currentTimeMillis() - ");
                                      String _name_15 = ((TimeFunction)expression).getValue().getName();
                                      _builder_28.append(_name_15);
                                      _builder_28.append(" )");
                                      return _builder_28.toString();
                                    } else {
                                      StringConcatenation _builder_29 = new StringConcatenation();
                                      _builder_29.append("System.currentTimeMillis()");
                                      return _builder_29.toString();
                                    }
                                  } else {
                                    if ((expression instanceof VariableFunction)) {
                                      return this.generateVariableFunction(((VariableFunction)expression), Boolean.valueOf(false), scope);
                                    } else {
                                      if ((expression instanceof ChannelReceive)) {
                                        return this.generateChannelReceive(((ChannelReceive)expression), scope);
                                      } else {
                                        if ((expression instanceof ChannelSend)) {
                                          return this.generateChannelSend(((ChannelSend)expression), scope);
                                        } else {
                                          if ((expression instanceof LocalFunctionCall)) {
                                            String s_1 = this.generateLocalFunctionCall(((LocalFunctionCall)expression), scope);
                                            int _length = s_1.length();
                                            int _minus = (_length - 1);
                                            return s_1.substring(0, _minus);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            _xifexpression_11 = _xifexpression_12;
                          }
                          _xifexpression_10 = _xifexpression_11;
                        }
                        _xifexpression_9 = _xifexpression_10;
                      }
                      _xifexpression_8 = _xifexpression_9;
                    }
                    _xifexpression_7 = _xifexpression_8;
                  }
                  _xifexpression_6 = _xifexpression_7;
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return ((String)_xifexpression);
  }
  
  public String generateVariableFunction(final VariableFunction expression, final Boolean t, final String scope) {
    EObject _right = expression.getTarget().getRight();
    if ((_right instanceof FlyFunctionCall)) {
      String s = "";
      String _s = s;
      String _feature = expression.getFeature();
      String _plus = ((("for(Future _el :" + this.last_func_result) + "){\n\t\t\t\t\t\t_el.") + _feature);
      String _plus_1 = (_plus + "(");
      s = (_s + _plus_1);
      EList<ArithmeticExpression> _expressions = expression.getExpressions();
      for (final ArithmeticExpression exp : _expressions) {
        {
          String _s_1 = s;
          Object _generateArithmeticExpression = this.generateArithmeticExpression(exp, scope);
          s = (_s_1 + _generateArithmeticExpression);
          ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(expression.getExpressions());
          boolean _notEquals = (!Objects.equal(exp, _last));
          if (_notEquals) {
            String _s_2 = s;
            s = (_s_2 + ",");
          }
        }
      }
      String _s_1 = s;
      s = (_s_1 + ");\n\t\t\t\t\t}");
      return s;
    }
    if ((expression.getTarget().getTypeobject().equals("dat") && expression.getFeature().equals("rows"))) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("HashMap<Integer, HashMap<String,Object> > __");
      String _name = expression.getTarget().getName();
      _builder.append(_name);
      _builder.append("_rows = new HashMap<Integer, HashMap<String,Object>>();");
      _builder.newLineIfNotEmpty();
      _builder.append("    \t");
      _builder.append("for(int __i=0; __i<");
      String _name_1 = expression.getTarget().getName();
      _builder.append(_name_1, "    \t");
      _builder.append(".rowCount();__i++) {");
      _builder.newLineIfNotEmpty();
      _builder.append("    \t\t");
      _builder.append("HashMap<String, Object> __tmp = new HashMap<String, Object>();");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("for (String __col : ");
      String _name_2 = expression.getTarget().getName();
      _builder.append(_name_2, "    \t\t");
      _builder.append(".columnNames()) {");
      _builder.newLineIfNotEmpty();
      _builder.append("    \t\t\t");
      _builder.append("__tmp.put(__col,");
      String _name_3 = expression.getTarget().getName();
      _builder.append(_name_3, "    \t\t\t");
      _builder.append(".get(__i, ");
      String _name_4 = expression.getTarget().getName();
      _builder.append(_name_4, "    \t\t\t");
      _builder.append(".columnIndex(__col)));");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t \t\t");
      _builder.append("__");
      String _name_5 = expression.getTarget().getName();
      _builder.append(_name_5, "\t\t\t \t\t");
      _builder.append("_rows.put(__i,__tmp);");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t \t");
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    } else {
      String _name_6 = expression.getTarget().getName();
      String _plus_2 = (_name_6 + ".");
      String _feature_1 = expression.getFeature();
      String _plus_3 = (_plus_2 + _feature_1);
      String s_1 = (_plus_3 + "(");
      EList<ArithmeticExpression> _expressions_1 = expression.getExpressions();
      for (final ArithmeticExpression exp_1 : _expressions_1) {
        {
          String _s_2 = s_1;
          Object _generateArithmeticExpression = this.generateArithmeticExpression(exp_1, scope);
          s_1 = (_s_2 + _generateArithmeticExpression);
          ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(expression.getExpressions());
          boolean _notEquals = (!Objects.equal(exp_1, _last));
          if (_notEquals) {
            String _s_3 = s_1;
            s_1 = (_s_3 + ",");
          }
        }
      }
      String _s_2 = s_1;
      s_1 = (_s_2 + ")");
      if ((t).booleanValue()) {
        String _s_3 = s_1;
        s_1 = (_s_3 + ";");
      }
      return s_1;
    }
  }
  
  public CharSequence generateBlockExpression(final BlockExpression exp, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      EList<Expression> _expressions = exp.getExpressions();
      for(final Expression element : _expressions) {
        _builder.append("\t");
        Object _generateExpression = this.generateExpression(element, scope);
        _builder.append(_generateExpression, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateFunctionReturn(final FunctionReturn return1, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("return ");
    String _generateArithmeticExpression = this.generateArithmeticExpression(return1.getExpression(), scope);
    _builder.append(_generateArithmeticExpression);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String generateLocalFunctionCall(final LocalFunctionCall call, final String scope) {
    String _name = call.getTarget().getName();
    String s = (_name + "(");
    LocalFunctionInput _input = call.getInput();
    boolean _notEquals = (!Objects.equal(_input, null));
    if (_notEquals) {
      EList<ArithmeticExpression> _inputs = call.getInput().getInputs();
      for (final ArithmeticExpression input : _inputs) {
        {
          String _s = s;
          Object _generateArithmeticExpression = this.generateArithmeticExpression(input, scope);
          s = (_s + _generateArithmeticExpression);
          ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(call.getInput().getInputs());
          boolean _notEquals_1 = (!Objects.equal(input, _last));
          if (_notEquals_1) {
            String _s_1 = s;
            s = (_s_1 + ",");
          }
        }
      }
    }
    String _s = s;
    s = (_s + ");");
    return s;
  }
  
  public String generateFlyFunctionCall(final FlyFunctionCall call, final String scope) {
    EObject _right = call.getEnvironment().getRight();
    String env = ((DeclarationObject) _right).getFeatures().get(0).getValue_s();
    boolean _equals = env.equals("local");
    if (_equals) {
      return this.generateLocalFlyFunction(call, scope);
    } else {
      boolean _equals_1 = env.equals("aws");
      if (_equals_1) {
        return this.generateAWSFlyFunctionCall(call, scope);
      }
    }
    return null;
  }
  
  public String generateLocalFlyFunction(final FlyFunctionCall call, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    String s = _builder.toString();
    FunctionInput _input = call.getInput();
    boolean _isIs_for_index = ((FunctionInput) _input).isIs_for_index();
    if (_isIs_for_index) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("final List<Future<Object>> ");
      String _name = call.getTarget().getName();
      _builder_1.append(_name);
      _builder_1.append("_");
      _builder_1.append(this.func_ID);
      _builder_1.append("_return = new ArrayList<Future<Object>>();");
      _builder_1.newLineIfNotEmpty();
      s = _builder_1.toString();
      if ((call.isIsAsync() && call.isIs_thenall())) {
        String _s = s;
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("final AtomicInteger __count = new AtomicInteger(0);");
        _builder_2.newLine();
        s = (_s + _builder_2);
      }
      if ((((((FunctionInput) call.getInput()).getF_index() instanceof VariableLiteral) && 
        (!Objects.equal(this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()), 
          null))) && 
        this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()).equals("HashMap"))) {
        if ((call.isIsAsync() && call.isIs_thenall())) {
          String _s_1 = s;
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("final int __numThread = ");
          FunctionInput _input_1 = call.getInput();
          String _generateArithmeticExpression = this.generateArithmeticExpression(((FunctionInput) _input_1).getF_index(), scope);
          _builder_3.append(_generateArithmeticExpression);
          _builder_3.append(".keySet().size()-1;");
          _builder_3.newLineIfNotEmpty();
          s = (_s_1 + _builder_3);
        }
        String _s_2 = s;
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("for(Object key: ");
        FunctionInput _input_2 = call.getInput();
        String _generateArithmeticExpression_1 = this.generateArithmeticExpression(((FunctionInput) _input_2).getF_index(), scope);
        _builder_4.append(_generateArithmeticExpression_1);
        _builder_4.append(".keySet()){");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("\t");
        _builder_4.append("final Object _el = ");
        FunctionInput _input_3 = call.getInput();
        String _generateArithmeticExpression_2 = this.generateArithmeticExpression(((FunctionInput) _input_3).getF_index(), scope);
        _builder_4.append(_generateArithmeticExpression_2, "\t");
        _builder_4.append(".get(key);");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("\t");
        _builder_4.append("Future<Object> _f = thread_pool.submit(new Callable<Object>(){");
        _builder_4.newLine();
        _builder_4.append("\t\t");
        _builder_4.newLine();
        _builder_4.append("\t\t");
        _builder_4.append("public Object call() throws Exception {");
        _builder_4.newLine();
        _builder_4.append("\t\t\t");
        _builder_4.append("// TODO Auto-generated method stub");
        _builder_4.newLine();
        _builder_4.append("\t\t\t");
        _builder_4.newLine();
        _builder_4.append("\t\t\t");
        _builder_4.append("Object __ret = ");
        String _name_1 = call.getTarget().getName();
        _builder_4.append(_name_1, "\t\t\t");
        _builder_4.append("();");
        _builder_4.newLineIfNotEmpty();
        {
          boolean _isIs_then = call.isIs_then();
          if (_isIs_then) {
            _builder_4.append("\t\t\t");
            String _name_2 = call.getThen().getName();
            _builder_4.append(_name_2, "\t\t\t");
            _builder_4.append("();");
            _builder_4.newLineIfNotEmpty();
          }
        }
        {
          if ((call.isIsAsync() && call.isIs_thenall())) {
            _builder_4.append("\t\t\t");
            _builder_4.append("if(__count.getAndIncrement()==__numThread){");
            _builder_4.newLine();
            _builder_4.append("\t\t\t");
            _builder_4.append("\t\t");
            _builder_4.append("__asyncTermination.put(\"Termination\");");
            _builder_4.newLine();
            _builder_4.append("\t\t\t");
            _builder_4.append("}");
            _builder_4.newLine();
          }
        }
        _builder_4.append("\t\t\t");
        _builder_4.append("return __ret;");
        _builder_4.newLine();
        _builder_4.append("\t\t\t");
        _builder_4.append("}");
        _builder_4.newLine();
        _builder_4.append("\t\t");
        _builder_4.append("});");
        _builder_4.newLine();
        _builder_4.append("\t");
        String _name_3 = call.getTarget().getName();
        _builder_4.append(_name_3, "\t");
        _builder_4.append("_");
        _builder_4.append(this.func_ID, "\t");
        _builder_4.append("_return.add(_f);");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("}");
        _builder_4.newLine();
        s = (_s_2 + _builder_4);
      } else {
        if ((((((FunctionInput) call.getInput()).getF_index() instanceof VariableLiteral) && 
          (!Objects.equal(this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()), 
            null))) && 
          this.typeSystem.get(scope).get(((VariableLiteral) ((FunctionInput) call.getInput()).getF_index()).getVariable().getName()).equals("Table"))) {
          String _s_3 = s;
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("final int __numThread = 4; //modify;");
          _builder_5.newLine();
          s = (_s_3 + _builder_5);
          String _s_4 = s;
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append("ArrayList<Table> __list_data_");
          String _name_4 = call.getTarget().getName();
          _builder_6.append(_name_4);
          _builder_6.append(" = new ArrayList<Table>();");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("for (int __i = 0; __i < __numThread; __i++) {");
          _builder_6.newLine();
          _builder_6.append("\t");
          _builder_6.append("__list_data_");
          String _name_5 = call.getTarget().getName();
          _builder_6.append(_name_5, "\t");
          _builder_6.append(".add(");
          FunctionInput _input_4 = call.getInput();
          ArithmeticExpression _f_index = ((FunctionInput) _input_4).getF_index();
          String _name_6 = ((VariableLiteral) _f_index).getVariable().getName();
          _builder_6.append(_name_6, "\t");
          _builder_6.append(".emptyCopy());");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("}");
          _builder_6.newLine();
          _builder_6.append("for(int __i=0; __i<");
          FunctionInput _input_5 = call.getInput();
          String _generateArithmeticExpression_3 = this.generateArithmeticExpression(((FunctionInput) _input_5).getF_index(), scope);
          _builder_6.append(_generateArithmeticExpression_3);
          _builder_6.append(".rowCount();__i++) {");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          _builder_6.append("__list_data_");
          String _name_7 = call.getTarget().getName();
          _builder_6.append(_name_7, "\t");
          _builder_6.append(".get(__i%__numThread).addRow(__i,");
          FunctionInput _input_6 = call.getInput();
          ArithmeticExpression _f_index_1 = ((FunctionInput) _input_6).getF_index();
          String _name_8 = ((VariableLiteral) _f_index_1).getVariable().getName();
          _builder_6.append(_name_8, "\t");
          _builder_6.append(");");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("}");
          _builder_6.newLine();
          _builder_6.append("for(int __i=0; __i<__numThread;__i++) {");
          _builder_6.newLine();
          _builder_6.append("    ");
          _builder_6.append("final int __index=__i;");
          _builder_6.newLine();
          _builder_6.append("    ");
          _builder_6.append("final Table __");
          FunctionInput _input_7 = call.getInput();
          ArithmeticExpression _f_index_2 = ((FunctionInput) _input_7).getF_index();
          String _name_9 = ((VariableLiteral) _f_index_2).getVariable().getName();
          _builder_6.append(_name_9, "    ");
          _builder_6.append(" =__list_data_");
          String _name_10 = call.getTarget().getName();
          _builder_6.append(_name_10, "    ");
          _builder_6.append(".get(__index) ; ");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("    ");
          _builder_6.append("Future<Object> __f = thread_pool.submit(new Callable<Object>() {");
          _builder_6.newLine();
          _builder_6.append("\t\t");
          _builder_6.append("public Object call() throws Exception {");
          _builder_6.newLine();
          _builder_6.append("\t\t\t");
          _builder_6.append("// TODO Auto-generated method stub");
          _builder_6.newLine();
          _builder_6.append("\t\t\t");
          _builder_6.append("Object __ret = ");
          String _name_11 = call.getTarget().getName();
          _builder_6.append(_name_11, "\t\t\t");
          _builder_6.append("(__");
          FunctionInput _input_8 = call.getInput();
          ArithmeticExpression _f_index_3 = ((FunctionInput) _input_8).getF_index();
          String _name_12 = ((VariableLiteral) _f_index_3).getVariable().getName();
          _builder_6.append(_name_12, "\t\t\t");
          _builder_6.append(");");
          _builder_6.newLineIfNotEmpty();
          {
            boolean _isIs_then_1 = call.isIs_then();
            if (_isIs_then_1) {
              _builder_6.append("\t\t\t");
              String _name_13 = call.getThen().getName();
              _builder_6.append(_name_13, "\t\t\t");
              _builder_6.append("();");
              _builder_6.newLineIfNotEmpty();
            }
          }
          {
            if ((call.isIsAsync() && call.isIs_thenall())) {
              _builder_6.append("\t\t\t");
              _builder_6.append("if(__count.getAndIncrement()==__numThread){");
              _builder_6.newLine();
              _builder_6.append("\t\t\t");
              _builder_6.append("\t");
              _builder_6.append("__asyncTermination.put(\"Termination\");");
              _builder_6.newLine();
              _builder_6.append("\t\t\t");
              _builder_6.append("}");
              _builder_6.newLine();
            }
          }
          _builder_6.append("\t\t\t");
          _builder_6.append("return __ret;");
          _builder_6.newLine();
          _builder_6.append("\t\t");
          _builder_6.append("}");
          _builder_6.newLine();
          _builder_6.append("\t\t  \t\t\t");
          _builder_6.newLine();
          _builder_6.append("\t");
          _builder_6.append("});");
          _builder_6.newLine();
          _builder_6.append("\t");
          String _name_14 = call.getTarget().getName();
          _builder_6.append(_name_14, "\t");
          _builder_6.append("_");
          _builder_6.append(this.func_ID, "\t");
          _builder_6.append("_return.add(__f);");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("}");
          _builder_6.newLine();
          s = (_s_4 + _builder_6);
        } else {
          if ((call.isIsAsync() && call.isIs_thenall())) {
            String _s_5 = s;
            StringConcatenation _builder_7 = new StringConcatenation();
            _builder_7.append("final int __numThread = ");
            FunctionInput _input_9 = call.getInput();
            ArithmeticExpression _f_index_4 = ((FunctionInput) _input_9).getF_index();
            int _value2 = ((RangeLiteral) _f_index_4).getValue2();
            FunctionInput _input_10 = call.getInput();
            ArithmeticExpression _f_index_5 = ((FunctionInput) _input_10).getF_index();
            int _value1 = ((RangeLiteral) _f_index_5).getValue1();
            int _minus = (_value2 - _value1);
            _builder_7.append(_minus);
            _builder_7.append(" - 1;");
            _builder_7.newLineIfNotEmpty();
            s = (_s_5 + _builder_7);
          }
          String _s_6 = s;
          StringConcatenation _builder_8 = new StringConcatenation();
          _builder_8.append("for(int _i=");
          FunctionInput _input_11 = call.getInput();
          ArithmeticExpression _f_index_6 = ((FunctionInput) _input_11).getF_index();
          int _value1_1 = ((RangeLiteral) _f_index_6).getValue1();
          _builder_8.append(_value1_1);
          _builder_8.append(";_i<");
          FunctionInput _input_12 = call.getInput();
          ArithmeticExpression _f_index_7 = ((FunctionInput) _input_12).getF_index();
          int _value2_1 = ((RangeLiteral) _f_index_7).getValue2();
          _builder_8.append(_value2_1);
          _builder_8.append(";_i++){");
          _builder_8.newLineIfNotEmpty();
          _builder_8.append("\t");
          _builder_8.append("final int __i = _i;");
          _builder_8.newLine();
          _builder_8.append("\t");
          _builder_8.append("Future<Object> _f = thread_pool.submit(new Callable<Object>(){");
          _builder_8.newLine();
          _builder_8.append("\t\t");
          _builder_8.newLine();
          _builder_8.append("\t\t");
          _builder_8.append("public Object call() throws Exception {");
          _builder_8.newLine();
          _builder_8.append("\t\t\t");
          _builder_8.append("// TODO Auto-generated method stub");
          _builder_8.newLine();
          _builder_8.append("\t\t\t");
          _builder_8.newLine();
          _builder_8.append("\t\t\t");
          _builder_8.append("Object __ret = ");
          String _name_15 = call.getTarget().getName();
          _builder_8.append(_name_15, "\t\t\t");
          _builder_8.append("(__i);");
          _builder_8.newLineIfNotEmpty();
          {
            boolean _isIs_then_2 = call.isIs_then();
            if (_isIs_then_2) {
              _builder_8.append("\t\t\t");
              String _name_16 = call.getThen().getName();
              _builder_8.append(_name_16, "\t\t\t");
              _builder_8.append("();");
              _builder_8.newLineIfNotEmpty();
            }
          }
          {
            if ((call.isIsAsync() && call.isIs_thenall())) {
              _builder_8.append("\t\t\t");
              _builder_8.append("if(__count.getAndIncrement()==__numThread){");
              _builder_8.newLine();
              _builder_8.append("\t\t\t");
              _builder_8.append("\t");
              _builder_8.append("__asyncTermination.put(\"Termination\");");
              _builder_8.newLine();
              _builder_8.append("\t\t\t");
              _builder_8.append("}");
              _builder_8.newLine();
            }
          }
          _builder_8.append("\t\t\t");
          _builder_8.append("return __ret;");
          _builder_8.newLine();
          _builder_8.append("\t\t");
          _builder_8.append("}");
          _builder_8.newLine();
          _builder_8.append("\t");
          _builder_8.append("});");
          _builder_8.newLine();
          _builder_8.append("\t");
          String _name_17 = call.getTarget().getName();
          _builder_8.append(_name_17, "\t");
          _builder_8.append("_");
          _builder_8.append(this.func_ID, "\t");
          _builder_8.append("_return.add(_f);");
          _builder_8.newLineIfNotEmpty();
          _builder_8.append("}");
          _builder_8.newLine();
          s = (_s_6 + _builder_8);
        }
      }
      String _name_18 = call.getTarget().getName();
      String _plus = (_name_18 + "_");
      String _plus_1 = (_plus + Integer.valueOf(this.func_ID));
      String _plus_2 = (_plus_1 + "_return");
      this.last_func_result = _plus_2;
      boolean _isIsAsync = call.isIsAsync();
      boolean _not = (!_isIsAsync);
      if (_not) {
        String _s_7 = s;
        StringConcatenation _builder_9 = new StringConcatenation();
        _builder_9.append("for(Future _f : ");
        String _name_19 = call.getTarget().getName();
        _builder_9.append(_name_19);
        _builder_9.append("_");
        _builder_9.append(this.func_ID);
        _builder_9.append("_return){");
        _builder_9.newLineIfNotEmpty();
        _builder_9.append("\t");
        _builder_9.append("try{");
        _builder_9.newLine();
        _builder_9.append("\t\t");
        _builder_9.append("_f.get();");
        _builder_9.newLine();
        _builder_9.append("\t");
        _builder_9.append("} catch(Exception e){");
        _builder_9.newLine();
        _builder_9.append("\t\t");
        _builder_9.append("e.printStackTrace();");
        _builder_9.newLine();
        _builder_9.append("\t");
        _builder_9.append("}");
        _builder_9.newLine();
        _builder_9.append("}");
        _builder_9.newLine();
        {
          boolean _isIs_thenall = call.isIs_thenall();
          if (_isIs_thenall) {
            String _name_20 = call.getThenall().getName();
            _builder_9.append(_name_20);
            _builder_9.append("();");
            _builder_9.newLineIfNotEmpty();
          }
        }
        s = (_s_7 + _builder_9);
      }
      if ((call.isIsAsync() && call.isIs_thenall())) {
        String _s_8 = s;
        StringConcatenation _builder_10 = new StringConcatenation();
        _builder_10.append("Future<Object> __call = thread_pool.submit(new Callable<Object>(){");
        _builder_10.newLine();
        _builder_10.append("\t\t\t\t\t\t");
        _builder_10.newLine();
        _builder_10.append("\t\t");
        _builder_10.append("public Object call() throws Exception {");
        _builder_10.newLine();
        _builder_10.append("\t\t\t");
        _builder_10.append("//TODO Auto-generated method stub");
        _builder_10.newLine();
        _builder_10.append("\t\t\t\t\t\t\t\t\t\t");
        _builder_10.append("__asyncTermination.take();\t");
        _builder_10.newLine();
        _builder_10.append("\t\t\t\t\t");
        String _name_21 = call.getThenall().getName();
        _builder_10.append(_name_21, "\t\t\t\t\t");
        _builder_10.append("();");
        _builder_10.newLineIfNotEmpty();
        _builder_10.append("\t\t\t");
        _builder_10.append("return null;");
        _builder_10.newLine();
        _builder_10.append("\t\t");
        _builder_10.append("}");
        _builder_10.newLine();
        _builder_10.append("\t");
        _builder_10.append("});");
        _builder_10.newLine();
        _builder_10.append("\t");
        _builder_10.newLine();
        s = (_s_8 + _builder_10);
      }
    } else {
      int par_id = 0;
      StringConcatenation _builder_11 = new StringConcatenation();
      String par_1 = _builder_11.toString();
      StringConcatenation _builder_12 = new StringConcatenation();
      String par_2 = _builder_12.toString();
      EList<ArithmeticExpression> _expressions = call.getInput().getExpressions();
      for (final ArithmeticExpression el : _expressions) {
        {
          String _par_1 = par_1;
          StringConcatenation _builder_13 = new StringConcatenation();
          _builder_13.append("final Object _par_");
          _builder_13.append(par_id);
          _builder_13.append(" = ");
          String _generateArithmeticExpression_4 = this.generateArithmeticExpression(el, scope);
          _builder_13.append(_generateArithmeticExpression_4);
          _builder_13.append(";");
          _builder_13.newLineIfNotEmpty();
          par_1 = (_par_1 + _builder_13);
          String _par_2 = par_2;
          StringConcatenation _builder_14 = new StringConcatenation();
          _builder_14.append(" ");
          _builder_14.append("_par_");
          _builder_14.append(par_id, " ");
          _builder_14.append("\t");
          par_2 = (_par_2 + _builder_14);
          ArithmeticExpression _last = IterableExtensions.<ArithmeticExpression>last(call.getInput().getExpressions());
          boolean _notEquals = (!Objects.equal(el, _last));
          if (_notEquals) {
            String _par_2_1 = par_2;
            StringConcatenation _builder_15 = new StringConcatenation();
            _builder_15.append(",");
            par_2 = (_par_2_1 + _builder_15);
          }
          par_id++;
        }
      }
      String _s_9 = s;
      StringConcatenation _builder_13 = new StringConcatenation();
      _builder_13.append(par_1);
      _builder_13.newLineIfNotEmpty();
      _builder_13.append("Future<Object> _f_");
      _builder_13.append(this.func_ID);
      _builder_13.append(" = thread_pool.submit(new Callable<Object>(){");
      _builder_13.newLineIfNotEmpty();
      _builder_13.append("\t");
      _builder_13.newLine();
      _builder_13.append("\t");
      _builder_13.append("public Object call() throws Exception {");
      _builder_13.newLine();
      _builder_13.append("\t\t");
      _builder_13.append("// TODO Auto-generated method stub");
      _builder_13.newLine();
      _builder_13.append("\t\t\t\t\t\t\t");
      _builder_13.newLine();
      _builder_13.append("\t\t");
      _builder_13.append("return ");
      String _name_22 = call.getTarget().getName();
      _builder_13.append(_name_22, "\t\t");
      _builder_13.append("(");
      _builder_13.append(par_2, "\t\t");
      _builder_13.append(");");
      _builder_13.newLineIfNotEmpty();
      _builder_13.append("\t");
      _builder_13.append("}");
      _builder_13.newLine();
      _builder_13.append("});");
      _builder_13.newLine();
      s = (_s_9 + _builder_13);
      boolean _isIsAsync_1 = call.isIsAsync();
      boolean _not_1 = (!_isIsAsync_1);
      if (_not_1) {
        String _s_10 = s;
        StringConcatenation _builder_14 = new StringConcatenation();
        _builder_14.append("try{");
        _builder_14.newLine();
        _builder_14.append("\t");
        _builder_14.append("_f_");
        _builder_14.append(this.func_ID, "\t");
        _builder_14.append(".get();");
        _builder_14.newLineIfNotEmpty();
        {
          boolean _isIs_then_3 = call.isIs_then();
          if (_isIs_then_3) {
            _builder_14.append("\t");
            String _name_23 = call.getThen().getName();
            _builder_14.append(_name_23, "\t");
            _builder_14.append("();");
            _builder_14.newLineIfNotEmpty();
          }
        }
        _builder_14.append("} catch(Exception e){");
        _builder_14.newLine();
        _builder_14.append("\t");
        _builder_14.append("e.printStackTrace();");
        _builder_14.newLine();
        _builder_14.append("}");
        _builder_14.newLine();
        s = (_s_10 + _builder_14);
      }
    }
    this.func_ID++;
    return s;
  }
  
  public String generateAWSFlyFunctionCall(final FlyFunctionCall call, final String scope) {
    String cred = call.getEnvironment().getName();
    EObject _right = call.getEnvironment().getRight();
    DeclarationFeature _get = ((DeclarationObject) _right).getFeatures().get(3);
    String region = ((DeclarationFeature) _get).getValue_s();
    String function = call.getTarget().getName();
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.newLine();
    _builder.append("__fly_function_names.put(\"");
    String _name = call.getTarget().getName();
    _builder.append(_name);
    _builder.append("\",\"");
    String _name_1 = call.getTarget().getName();
    _builder.append(_name_1);
    _builder.append("_\"+System.currentTimeMillis());");
    _builder.newLineIfNotEmpty();
    _builder.append("Runtime.getRuntime().exec(\"chmod +x src-gen/");
    _builder.append(cred);
    _builder.append("_deploy.sh\");");
    _builder.newLineIfNotEmpty();
    _builder.append("Process p;");
    _builder.newLine();
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("StringBuffer output = new StringBuffer();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("p = Runtime.getRuntime().exec(\"src-gen/");
    _builder.append(cred, "\t");
    _builder.append("_deploy.sh \"+\"");
    String _name_2 = call.getTarget().getName();
    _builder.append(_name_2, "\t");
    _builder.append(" \"+__fly_function_names.get(\"");
    String _name_3 = call.getTarget().getName();
    _builder.append(_name_3, "\t");
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("p.waitFor();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String line = \"\";\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while ((line = reader.readLine())!= null) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(line );");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("ExecutorService __poolAWS = Executors.newFixedThreadPool(4);");
    _builder.newLine();
    String ret = _builder.toString();
    boolean _isIs_for_index = call.getInput().isIs_for_index();
    if (_isIs_for_index) {
      ArithmeticExpression _f_index = call.getInput().getF_index();
      if ((_f_index instanceof RangeLiteral)) {
        String _ret = ret;
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.newLine();
        _builder_1.append("GetQueueUrlResult __input_queue_url_response = __sqs.getQueueUrl(\"__input_\"+__fly_function_names.get(\"");
        String _name_4 = call.getTarget().getName();
        _builder_1.append(_name_4);
        _builder_1.append("\")+\"_queue\");");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("final String  __input_queue_url = __input_queue_url_response.getQueueUrl();");
        _builder_1.newLine();
        _builder_1.append("for(int ___i=");
        ArithmeticExpression _f_index_1 = call.getInput().getF_index();
        int _value1 = ((RangeLiteral) _f_index_1).getValue1();
        _builder_1.append(_value1);
        _builder_1.append(";___i<");
        ArithmeticExpression _f_index_2 = call.getInput().getF_index();
        int _value2 = ((RangeLiteral) _f_index_2).getValue2();
        _builder_1.append(_value2);
        _builder_1.append(";___i++){");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append("final String __s_temp = String.valueOf(___i);");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Future<Object> f = __poolAWS.submit(new Callable<Object>() {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("@Override");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("public Object call() throws Exception {");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("// TODO Auto-generated method stub");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("__sqs.sendMessage(new SendMessageRequest().");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("withQueueUrl(__input_queue_url).");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("withMessageBody(__s_temp)");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append(");");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("return null;");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("});");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("__poolAWS.shutdown();");
        _builder_1.newLine();
        ret = (_ret + _builder_1);
      } else {
        if (((call.getInput().getF_index() instanceof VariableLiteral) && 
          this.typeSystem.get(scope).get(((VariableLiteral) call.getInput().getF_index()).getVariable().getName()).equals("Table"))) {
          String _ret_1 = ret;
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("int __num_row=");
          ArithmeticExpression _f_index_3 = call.getInput().getF_index();
          String _name_5 = ((VariableLiteral) _f_index_3).getVariable().getName();
          _builder_2.append(_name_5);
          _builder_2.append(".rowCount();");
          _builder_2.newLineIfNotEmpty();
          _builder_2.append("int __initial=0;");
          _builder_2.newLine();
          _builder_2.append("int __num_proc=1000;");
          _builder_2.newLine();
          _builder_2.append("ArrayList<Integer> __splits = new ArrayList<Integer>();");
          _builder_2.newLine();
          _builder_2.append("for(int __i=0;__i<__num_proc;__i++) {");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("if(__i<(__num_row%__num_proc)) {");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("__splits.add( __initial+((__num_row/__num_proc)+1));");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("__initial+=(__num_row/__num_proc)+1;");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("}else{");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("__splits.add( __initial+((__num_row/__num_proc)));");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("__initial+=(__num_row/__num_proc);");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("}\t\t\t\t ");
          _builder_2.newLine();
          _builder_2.newLine();
          _builder_2.append("\t\t\t\t");
          _builder_2.newLine();
          _builder_2.append("GetQueueUrlResult __input_queue_url_response = __sqs.getQueueUrl(\"__input_\"+__fly_function_names.get(\"");
          String _name_6 = call.getTarget().getName();
          _builder_2.append(_name_6);
          _builder_2.append("\")+\"_queue\");");
          _builder_2.newLineIfNotEmpty();
          _builder_2.append("final String  __input_queue_url = __input_queue_url_response.getQueueUrl();");
          _builder_2.newLine();
          _builder_2.append("for(int __i=0;__i<__num_proc;__i++){");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("final int __start;");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("final int __end;");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("if(__i==0) {");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("__start=0;");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("}else{");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("__start=__splits.get(__i-1);");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("__end = __splits.get(__i);");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("Future<Object> f = __poolAWS.submit(new Callable<Object>() {");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("@Override");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("public Object call() throws Exception {");
          _builder_2.newLine();
          _builder_2.append("\t\t\t");
          _builder_2.append("// TODO Auto-generated method stub");
          _builder_2.newLine();
          _builder_2.append("\t\t\t");
          _builder_2.append("//creare la stringa ");
          _builder_2.newLine();
          _builder_2.append("\t\t\t");
          _builder_2.append("String __s_temp= __generateString( ");
          ArithmeticExpression _f_index_4 = call.getInput().getF_index();
          String _name_7 = ((VariableLiteral) _f_index_4).getVariable().getName();
          _builder_2.append(_name_7, "\t\t\t");
          _builder_2.append(".where(Selection.withRange(__start, __end)));");
          _builder_2.newLineIfNotEmpty();
          _builder_2.append("\t\t\t");
          _builder_2.append("__sqs.sendMessage(new SendMessageRequest().");
          _builder_2.newLine();
          _builder_2.append("\t\t\t\t\t\t\t");
          _builder_2.append("withQueueUrl(__input_queue_url).");
          _builder_2.newLine();
          _builder_2.append("\t\t\t\t\t\t\t");
          _builder_2.append("withMessageBody(__s_temp)");
          _builder_2.newLine();
          _builder_2.append("\t\t\t\t\t\t\t");
          _builder_2.append(");");
          _builder_2.newLine();
          _builder_2.append("\t\t\t");
          _builder_2.append("return null;");
          _builder_2.newLine();
          _builder_2.append("\t\t");
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("});");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("__poolAWS.shutdown();");
          _builder_2.newLine();
          ret = (_ret_1 + _builder_2);
        }
      }
    }
    boolean _isIs_thenall = call.isIs_thenall();
    if (_isIs_thenall) {
      String _ret_2 = ret;
      StringConcatenation _builder_3 = new StringConcatenation();
      String _name_8 = call.getThenall().getName();
      _builder_3.append(_name_8);
      _builder_3.append("();");
      _builder_3.newLineIfNotEmpty();
      ret = (_ret_2 + _builder_3);
    }
    return ret;
  }
  
  public String generateChannelReceive(final ChannelReceive receive, final String scope) {
    EObject _right = receive.getTarget().getEnvironment().getRight();
    DeclarationFeature _get = ((DeclarationObject) _right).getFeatures().get(0);
    String env = ((DeclarationFeature) _get).getValue_s();
    boolean _equals = env.equals("local");
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      ChannelDeclaration _target = receive.getTarget();
      String _name = ((ChannelDeclaration) _target).getName();
      _builder.append(_name);
      _builder.append(".take()");
      return _builder.toString();
    } else {
      boolean _equals_1 = env.equals("aws");
      if (_equals_1) {
        StringConcatenation _builder_1 = new StringConcatenation();
        ChannelDeclaration _target_1 = receive.getTarget();
        String _name_1 = ((ChannelDeclaration) _target_1).getName();
        _builder_1.append(_name_1);
        _builder_1.append(".take()");
        _builder_1.newLineIfNotEmpty();
        return _builder_1.toString();
      }
    }
    return null;
  }
  
  public String generateChannelSend(final ChannelSend send, final String scope) {
    EObject _right = send.getTarget().getEnvironment().getRight();
    DeclarationFeature _get = ((DeclarationObject) _right).getFeatures().get(0);
    String env = ((DeclarationFeature) _get).getValue_s();
    boolean _equals = env.equals("local");
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      ChannelDeclaration _target = send.getTarget();
      String _name = ((ChannelDeclaration) _target).getName();
      _builder.append(_name);
      _builder.append(".add(");
      Object _generateArithmeticExpression = this.generateArithmeticExpression(send.getExpression(), scope);
      _builder.append(_generateArithmeticExpression);
      _builder.append(")");
      return _builder.toString();
    } else {
      boolean _equals_1 = env.equals("aws");
      if (_equals_1) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("SendMessageRequest __sndmsg = new SendMessageRequest(__sqs.getQueueUrl(\"");
        String _name_1 = send.getTarget().getName();
        _builder_1.append(_name_1);
        _builder_1.append("\").getQueueUrl(), ");
        Object _generateArithmeticExpression_1 = this.generateArithmeticExpression(send.getExpression(), scope);
        _builder_1.append(_generateArithmeticExpression_1);
        _builder_1.append(".toString());");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("__sqs.sendMessage(__sndmsg)");
        _builder_1.newLine();
        return _builder_1.toString();
      }
    }
    return null;
  }
  
  public CharSequence generateWhileExpression(final WhileExpression expression, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while(");
    String _generateArithmeticExpression = this.generateArithmeticExpression(expression.getCond(), scope);
    _builder.append(_generateArithmeticExpression);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Object _generateExpression = this.generateExpression(expression.getBody(), scope);
    _builder.append(_generateExpression, "\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String generateForExpression(final ForExpression exp, final String scope) {
    ArithmeticExpression _object = exp.getObject();
    if ((_object instanceof ParenthesizedExpression)) {
      ArithmeticExpression _object_1 = exp.getObject();
      return this.generateFor(exp.getIndex(), ((ParenthesizedExpression) _object_1).getExpression(), exp.getBody(), scope);
    } else {
      return this.generateFor(exp.getIndex(), exp.getObject(), exp.getBody(), scope);
    }
  }
  
  public String generateFor(final VariableFor index, final ArithmeticExpression object, final Expression body, final String scope) {
    if ((object instanceof CastExpression)) {
      boolean _equals = ((CastExpression) object).getType().equals("Dat");
      if (_equals) {
        ArithmeticExpression _target = ((CastExpression) object).getTarget();
        String name = ((VariableLiteral) _target).getVariable().getName();
        this.typeSystem.get(scope).put(((VariableDeclaration) index).getName(), name);
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("for(int _");
        _builder.append(name);
        _builder.append("=0; _");
        _builder.append(name);
        _builder.append("<((Table) ");
        _builder.append(name);
        _builder.append(").rowCount();_");
        _builder.append(name);
        _builder.append("++){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        {
          if ((body instanceof BlockExpression)) {
            {
              EList<Expression> _expressions = ((BlockExpression)body).getExpressions();
              for(final Expression exp : _expressions) {
                _builder.append("\t");
                Object _generateExpression = this.generateExpression(exp, scope);
                _builder.append(_generateExpression, "\t");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            _builder.append("\t");
            Object _generateExpression_1 = this.generateExpression(body, scope);
            _builder.append(_generateExpression_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("}");
        _builder.newLine();
        return _builder.toString();
      } else {
        boolean _equals_1 = ((CastExpression) object).getType().equals("Object");
        if (_equals_1) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("HashMap<Object, Object> ");
          String _name = ((VariableDeclaration) index).getName();
          _builder_1.append(_name);
          _builder_1.append(" = new HashMap<Object,Object>();");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("for(Object _");
          String _name_1 = ((VariableDeclaration) index).getName();
          _builder_1.append(_name_1);
          _builder_1.append(" : ( (HashMap<Object,Object>) ");
          ArithmeticExpression _target_1 = ((CastExpression) object).getTarget();
          String _name_2 = ((VariableLiteral) _target_1).getVariable().getName();
          _builder_1.append(_name_2);
          _builder_1.append(").keySet() ){");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("\t\t");
          String _name_3 = ((VariableDeclaration) index).getName();
          _builder_1.append(_name_3, "\t\t");
          _builder_1.append(".put(\"k\",_");
          String _name_4 = ((VariableDeclaration) index).getName();
          _builder_1.append(_name_4, "\t\t");
          _builder_1.append(");");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("\t\t");
          String _name_5 = ((VariableDeclaration) index).getName();
          _builder_1.append(_name_5, "\t\t");
          _builder_1.append(".put(\"v\",((HashMap<Object,Object>) ");
          ArithmeticExpression _target_2 = ((CastExpression) object).getTarget();
          String _name_6 = ((VariableLiteral) _target_2).getVariable().getName();
          _builder_1.append(_name_6, "\t\t");
          _builder_1.append(").get(_");
          String _name_7 = ((VariableDeclaration) index).getName();
          _builder_1.append(_name_7, "\t\t");
          _builder_1.append("));");
          _builder_1.newLineIfNotEmpty();
          {
            if ((body instanceof BlockExpression)) {
              {
                EList<Expression> _expressions_1 = ((BlockExpression)body).getExpressions();
                for(final Expression exp_1 : _expressions_1) {
                  _builder_1.append("\t");
                  Object _generateExpression_2 = this.generateExpression(exp_1, scope);
                  _builder_1.append(_generateExpression_2, "\t");
                  _builder_1.newLineIfNotEmpty();
                }
              }
            } else {
              _builder_1.append("\t");
              Object _generateExpression_3 = this.generateExpression(body, scope);
              _builder_1.append(_generateExpression_3, "\t");
              _builder_1.newLineIfNotEmpty();
            }
          }
          _builder_1.append("}");
          _builder_1.newLine();
          return _builder_1.toString();
        }
      }
    } else {
      if ((object instanceof RangeLiteral)) {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("for(int ");
        String _name_8 = ((VariableDeclaration) index).getName();
        _builder_2.append(_name_8);
        _builder_2.append("=");
        int _value1 = ((RangeLiteral)object).getValue1();
        _builder_2.append(_value1);
        _builder_2.append(";");
        String _name_9 = ((VariableDeclaration) index).getName();
        _builder_2.append(_name_9);
        _builder_2.append("<");
        int _value2 = ((RangeLiteral)object).getValue2();
        _builder_2.append(_value2);
        _builder_2.append(";");
        String _name_10 = ((VariableDeclaration) index).getName();
        _builder_2.append(_name_10);
        _builder_2.append("++){");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        Object _generateExpression_4 = this.generateExpression(body, scope);
        _builder_2.append(_generateExpression_4, "\t");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("}");
        _builder_2.newLine();
        return _builder_2.toString();
      } else {
        if ((object instanceof VariableLiteral)) {
          if (((((VariableLiteral) object).getVariable().getTypeobject().equals("var") && (((VariableLiteral) object).getVariable().getRight() instanceof NameObjectDef)) || 
            this.typeSystem.get(scope).get(((VariableLiteral) object).getVariable().getName()).equals("HashMap"))) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("HashMap<Object, Object> ");
            String _name_11 = ((VariableDeclaration) index).getName();
            _builder_3.append(_name_11);
            _builder_3.append(" = new HashMap<Object,Object>();");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("for(Object _");
            String _name_12 = ((VariableDeclaration) index).getName();
            _builder_3.append(_name_12);
            _builder_3.append(" : ");
            String _name_13 = ((VariableLiteral) object).getVariable().getName();
            _builder_3.append(_name_13);
            _builder_3.append(".keySet() ){");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t\t");
            String _name_14 = ((VariableDeclaration) index).getName();
            _builder_3.append(_name_14, "\t\t");
            _builder_3.append(".put(\"k\",_");
            String _name_15 = ((VariableDeclaration) index).getName();
            _builder_3.append(_name_15, "\t\t");
            _builder_3.append(");");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t\t");
            String _name_16 = ((VariableDeclaration) index).getName();
            _builder_3.append(_name_16, "\t\t");
            _builder_3.append(".put(\"v\",");
            String _name_17 = ((VariableLiteral) object).getVariable().getName();
            _builder_3.append(_name_17, "\t\t");
            _builder_3.append(".get(_");
            String _name_18 = ((VariableDeclaration) index).getName();
            _builder_3.append(_name_18, "\t\t");
            _builder_3.append("));");
            _builder_3.newLineIfNotEmpty();
            {
              if ((body instanceof BlockExpression)) {
                {
                  EList<Expression> _expressions_2 = ((BlockExpression)body).getExpressions();
                  for(final Expression exp_2 : _expressions_2) {
                    _builder_3.append("\t\t");
                    Object _generateExpression_5 = this.generateExpression(exp_2, scope);
                    _builder_3.append(_generateExpression_5, "\t\t");
                    _builder_3.newLineIfNotEmpty();
                  }
                }
              } else {
                _builder_3.append("\t\t");
                Object _generateExpression_6 = this.generateExpression(body, scope);
                _builder_3.append(_generateExpression_6, "\t\t");
                _builder_3.newLineIfNotEmpty();
              }
            }
            _builder_3.append("}");
            _builder_3.newLine();
            return _builder_3.toString();
          } else {
            if ((((VariableLiteral) object).getVariable().getTypeobject().equals("dat") || 
              this.typeSystem.get(scope).get(((VariableLiteral) object).getVariable().getName()).equals("Table"))) {
              String name_1 = ((VariableLiteral) object).getVariable().getName();
              this.typeSystem.get(scope).put(((VariableDeclaration) index).getName(), name_1);
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("for(int _");
              _builder_4.append(name_1);
              _builder_4.append("=0; _");
              _builder_4.append(name_1);
              _builder_4.append("< ");
              _builder_4.append(name_1);
              _builder_4.append(".rowCount();_");
              _builder_4.append(name_1);
              _builder_4.append("++){");
              _builder_4.newLineIfNotEmpty();
              {
                if ((body instanceof BlockExpression)) {
                  {
                    EList<Expression> _expressions_3 = ((BlockExpression)body).getExpressions();
                    for(final Expression exp_3 : _expressions_3) {
                      _builder_4.append("\t");
                      Object _generateExpression_7 = this.generateExpression(exp_3, scope);
                      _builder_4.append(_generateExpression_7, "\t");
                      _builder_4.newLineIfNotEmpty();
                    }
                  }
                } else {
                  _builder_4.append("\t");
                  Object _generateExpression_8 = this.generateExpression(body, scope);
                  _builder_4.append(_generateExpression_8, "\t");
                  _builder_4.newLineIfNotEmpty();
                }
              }
              _builder_4.append("}");
              _builder_4.newLine();
              return _builder_4.toString();
            }
          }
        } else {
          if ((object instanceof VariableFunction)) {
            StringConcatenation _builder_5 = new StringConcatenation();
            String _generateVariableFunction = this.generateVariableFunction(((VariableFunction) object), Boolean.valueOf(false), scope);
            _builder_5.append(_generateVariableFunction);
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("for(HashMap<String,Object> ");
            String _name_19 = ((VariableDeclaration) index).getName();
            _builder_5.append(_name_19);
            _builder_5.append(" : __");
            String _name_20 = ((VariableFunction) object).getTarget().getName();
            _builder_5.append(_name_20);
            _builder_5.append("_rows.values()){");
            _builder_5.newLineIfNotEmpty();
            {
              if ((body instanceof BlockExpression)) {
                {
                  EList<Expression> _expressions_4 = ((BlockExpression)body).getExpressions();
                  for(final Expression exp_4 : _expressions_4) {
                    _builder_5.append("\t");
                    Object _generateExpression_9 = this.generateExpression(exp_4, scope);
                    _builder_5.append(_generateExpression_9, "\t");
                    _builder_5.newLineIfNotEmpty();
                  }
                }
              } else {
                _builder_5.append("\t");
                Object _generateExpression_10 = this.generateExpression(body, scope);
                _builder_5.append(_generateExpression_10, "\t");
                _builder_5.newLineIfNotEmpty();
              }
            }
            _builder_5.append("}");
            return _builder_5.toString();
          }
        }
      }
    }
    return null;
  }
  
  public CharSequence generateIfExpression(final IfExpression expression, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if(");
    String _generateArithmeticExpression = this.generateArithmeticExpression(expression.getCond(), scope);
    _builder.append(_generateArithmeticExpression);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Object _generateExpression = this.generateExpression(expression.getThen(), scope);
    _builder.append(_generateExpression, "\t");
    _builder.newLineIfNotEmpty();
    {
      Expression _else = expression.getElse();
      boolean _tripleNotEquals = (_else != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        _builder.append("else ");
        Object _generateExpression_1 = this.generateExpression(expression.getElse(), scope);
        _builder.append(_generateExpression_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String generatePrintExpression(final PrintExpression expression, final String scope) {
    ArithmeticExpression _print = expression.getPrint();
    if ((_print instanceof ChannelReceive)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("try{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("System.out.println(");
      String _generateArithmeticExpression = this.generateArithmeticExpression(expression.getPrint(), scope);
      _builder.append(_generateArithmeticExpression, "\t");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("}catch(Exception e){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("e.printStackTrace();");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("System.out.println(");
      String _generateArithmeticExpression_1 = this.generateArithmeticExpression(expression.getPrint(), scope);
      _builder_1.append(_generateArithmeticExpression_1);
      _builder_1.append(");");
      return _builder_1.toString();
    }
  }
  
  public String generateAssignment(final Assignment assignment, final String scope) {
    ArithmeticExpression _feature = assignment.getFeature();
    boolean _notEquals = (!Objects.equal(_feature, null));
    if (_notEquals) {
      if (((assignment.getValue() instanceof CastExpression) && (((CastExpression) assignment.getValue()).getTarget() instanceof ChannelReceive))) {
        ArithmeticExpression _value = assignment.getValue();
        ArithmeticExpression _target = ((CastExpression) _value).getTarget();
        EObject _right = ((ChannelReceive) _target).getTarget().getEnvironment().getRight();
        boolean _equals = ((DeclarationObject) _right).getFeatures().get(0).getValue_s().equals("aws");
        if (_equals) {
          ArithmeticExpression _value_1 = assignment.getValue();
          boolean _equals_1 = ((CastExpression) _value_1).getType().equals("Integer");
          if (_equals_1) {
            StringConcatenation _builder = new StringConcatenation();
            String _generateArithmeticExpression = this.generateArithmeticExpression(assignment.getFeature(), scope);
            _builder.append(_generateArithmeticExpression);
            _builder.append(" ");
            String _op = assignment.getOp();
            _builder.append(_op);
            _builder.append(" Integer.parseInt(");
            ArithmeticExpression _value_2 = assignment.getValue();
            ArithmeticExpression _target_1 = ((CastExpression) _value_2).getTarget();
            String _name = ((ChannelReceive) _target_1).getTarget().getName();
            _builder.append(_name);
            _builder.append(".take().toString());");
            _builder.newLineIfNotEmpty();
            return _builder.toString();
          } else {
            ArithmeticExpression _value_3 = assignment.getValue();
            boolean _equals_2 = ((CastExpression) _value_3).getType().equals("Object");
            if (_equals_2) {
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append("String __res_");
              ArithmeticExpression _value_4 = assignment.getValue();
              ArithmeticExpression _target_2 = ((CastExpression) _value_4).getTarget();
              String _name_1 = ((ChannelReceive) _target_2).getTarget().getName();
              _builder_1.append(_name_1);
              _builder_1.append(" = ");
              ArithmeticExpression _value_5 = assignment.getValue();
              ArithmeticExpression _target_3 = ((CastExpression) _value_5).getTarget();
              String _name_2 = ((ChannelReceive) _target_3).getTarget().getName();
              _builder_1.append(_name_2);
              _builder_1.append(".take().toString();");
              _builder_1.newLineIfNotEmpty();
              _builder_1.append("HashMap ");
              String _generateArithmeticExpression_1 = this.generateArithmeticExpression(assignment.getFeature(), scope);
              _builder_1.append(_generateArithmeticExpression_1);
              _builder_1.append(" ");
              String _op_1 = assignment.getOp();
              _builder_1.append(_op_1);
              _builder_1.append(" new Gson().fromJson(__res_");
              ArithmeticExpression _value_6 = assignment.getValue();
              ArithmeticExpression _target_4 = ((CastExpression) _value_6).getTarget();
              String _name_3 = ((ChannelReceive) _target_4).getTarget().getName();
              _builder_1.append(_name_3);
              _builder_1.append(",new TypeToken<HashMap<String, String>>() {}.getType();)");
              _builder_1.newLineIfNotEmpty();
              return _builder_1.toString();
            } else {
              ArithmeticExpression _value_7 = assignment.getValue();
              boolean _equals_3 = ((CastExpression) _value_7).getType().equals("Double");
              if (_equals_3) {
                StringConcatenation _builder_2 = new StringConcatenation();
                String _generateArithmeticExpression_2 = this.generateArithmeticExpression(assignment.getFeature(), scope);
                _builder_2.append(_generateArithmeticExpression_2);
                _builder_2.append(" ");
                String _op_2 = assignment.getOp();
                _builder_2.append(_op_2);
                _builder_2.append(" Double.parseInt(");
                ArithmeticExpression _value_8 = assignment.getValue();
                ArithmeticExpression _target_5 = ((CastExpression) _value_8).getTarget();
                String _name_4 = ((ChannelReceive) _target_5).getTarget().getName();
                _builder_2.append(_name_4);
                _builder_2.append(".take().toString());");
                _builder_2.newLineIfNotEmpty();
                return _builder_2.toString();
              }
            }
          }
        } else {
          ArithmeticExpression _value_9 = assignment.getValue();
          boolean _equals_4 = ((CastExpression) _value_9).getType().equals("Integer");
          if (_equals_4) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("try{");
            _builder_3.newLine();
            _builder_3.append("\t");
            String _generateArithmeticExpression_3 = this.generateArithmeticExpression(assignment.getFeature(), scope);
            _builder_3.append(_generateArithmeticExpression_3, "\t");
            _builder_3.append(" ");
            String _op_3 = assignment.getOp();
            _builder_3.append(_op_3, "\t");
            _builder_3.append(" Integer.parseInt(");
            ArithmeticExpression _value_10 = assignment.getValue();
            ArithmeticExpression _target_6 = ((CastExpression) _value_10).getTarget();
            String _name_5 = ((ChannelReceive) _target_6).getTarget().getName();
            _builder_3.append(_name_5, "\t");
            _builder_3.append(".take().toString());");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("}catch(InterruptedException e1){");
            _builder_3.newLine();
            _builder_3.append("\t");
            _builder_3.append("e1.printStackTrace();");
            _builder_3.newLine();
            _builder_3.append("}");
            _builder_3.newLine();
            return _builder_3.toString();
          } else {
            ArithmeticExpression _value_11 = assignment.getValue();
            boolean _equals_5 = ((CastExpression) _value_11).getType().equals("Double");
            if (_equals_5) {
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("try{");
              _builder_4.newLine();
              _builder_4.append("\t");
              String _generateArithmeticExpression_4 = this.generateArithmeticExpression(assignment.getFeature(), scope);
              _builder_4.append(_generateArithmeticExpression_4, "\t");
              _builder_4.append(" ");
              String _op_4 = assignment.getOp();
              _builder_4.append(_op_4, "\t");
              _builder_4.append(" Double.parseDouble(");
              ArithmeticExpression _value_12 = assignment.getValue();
              ArithmeticExpression _target_7 = ((CastExpression) _value_12).getTarget();
              String _name_6 = ((ChannelReceive) _target_7).getTarget().getName();
              _builder_4.append(_name_6, "\t");
              _builder_4.append(".take().toString());");
              _builder_4.newLineIfNotEmpty();
              _builder_4.append("\t");
              _builder_4.append("e1.printStackTrace();");
              _builder_4.newLine();
              _builder_4.append("}");
              _builder_4.newLine();
              return _builder_4.toString();
            }
          }
        }
      } else {
        ArithmeticExpression _value_13 = assignment.getValue();
        if ((_value_13 instanceof ChannelReceive)) {
          ArithmeticExpression _value_14 = assignment.getValue();
          EObject _right_1 = ((ChannelReceive) _value_14).getTarget().getEnvironment().getRight();
          boolean _equals_6 = ((DeclarationObject) _right_1).getFeatures().get(0).getValue_s().equals("aws");
          if (_equals_6) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("try{");
            _builder_5.newLine();
            _builder_5.append("\t");
            String _generateArithmeticExpression_5 = this.generateArithmeticExpression(assignment.getFeature(), scope);
            _builder_5.append(_generateArithmeticExpression_5, "\t");
            _builder_5.append(" ");
            String _op_5 = assignment.getOp();
            _builder_5.append(_op_5, "\t");
            _builder_5.append(" ");
            ArithmeticExpression _value_15 = assignment.getValue();
            String _generateArithmeticExpression_6 = this.generateArithmeticExpression(((ChannelReceive) _value_15), scope);
            _builder_5.append(_generateArithmeticExpression_6, "\t");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("}catch(InterruptedException e1){");
            _builder_5.newLine();
            _builder_5.append("\t");
            _builder_5.append("e1.printStackTrace();");
            _builder_5.newLine();
            _builder_5.append("}");
            _builder_5.newLine();
            return _builder_5.toString();
          } else {
            StringConcatenation _builder_6 = new StringConcatenation();
            _builder_6.append("try{");
            _builder_6.newLine();
            _builder_6.append("\t");
            String _generateArithmeticExpression_7 = this.generateArithmeticExpression(assignment.getFeature(), scope);
            _builder_6.append(_generateArithmeticExpression_7, "\t");
            _builder_6.append(" ");
            String _op_6 = assignment.getOp();
            _builder_6.append(_op_6, "\t");
            _builder_6.append(" ");
            ArithmeticExpression _value_16 = assignment.getValue();
            String _generateArithmeticExpression_8 = this.generateArithmeticExpression(((ChannelReceive) _value_16), scope);
            _builder_6.append(_generateArithmeticExpression_8, "\t");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("}catch(InterruptedException e1){");
            _builder_6.newLine();
            _builder_6.append("\t");
            _builder_6.append("e1.printStackTrace();");
            _builder_6.newLine();
            _builder_6.append("}");
            _builder_6.newLine();
            return _builder_6.toString();
          }
        } else {
          StringConcatenation _builder_7 = new StringConcatenation();
          String _generateArithmeticExpression_9 = this.generateArithmeticExpression(assignment.getFeature(), scope);
          _builder_7.append(_generateArithmeticExpression_9);
          _builder_7.append(" ");
          String _op_7 = assignment.getOp();
          _builder_7.append(_op_7);
          _builder_7.append(" ");
          String _generateArithmeticExpression_10 = this.generateArithmeticExpression(assignment.getValue(), scope);
          _builder_7.append(_generateArithmeticExpression_10);
          _builder_7.append(";");
          _builder_7.newLineIfNotEmpty();
          return _builder_7.toString();
        }
      }
    }
    ObjectLiteral _feature_obj = assignment.getFeature_obj();
    boolean _tripleNotEquals = (_feature_obj != null);
    if (_tripleNotEquals) {
      ObjectLiteral _feature_obj_1 = assignment.getFeature_obj();
      if ((_feature_obj_1 instanceof NameObject)) {
        HashMap<String, String> _get = this.typeSystem.get(scope);
        ObjectLiteral _feature_obj_2 = assignment.getFeature_obj();
        VariableDeclaration _name_7 = ((NameObject) _feature_obj_2).getName();
        String _name_8 = ((VariableDeclaration) _name_7).getName();
        String _plus = (_name_8 + ".");
        ObjectLiteral _feature_obj_3 = assignment.getFeature_obj();
        String _value_17 = ((NameObject) _feature_obj_3).getValue();
        String _plus_1 = (_plus + _value_17);
        _get.put(_plus_1, 
          this.valuateArithmeticExpression(assignment.getValue(), scope));
        StringConcatenation _builder_8 = new StringConcatenation();
        ObjectLiteral _feature_obj_4 = assignment.getFeature_obj();
        VariableDeclaration _name_9 = ((NameObject) _feature_obj_4).getName();
        String _name_10 = ((VariableDeclaration) _name_9).getName();
        _builder_8.append(_name_10);
        _builder_8.append(".put(\"");
        ObjectLiteral _feature_obj_5 = assignment.getFeature_obj();
        String _value_18 = ((NameObject) _feature_obj_5).getValue();
        _builder_8.append(_value_18);
        _builder_8.append("\",");
        String _generateArithmeticExpression_11 = this.generateArithmeticExpression(assignment.getValue(), scope);
        _builder_8.append(_generateArithmeticExpression_11);
        _builder_8.append(");");
        _builder_8.newLineIfNotEmpty();
        return _builder_8.toString();
      }
      ObjectLiteral _feature_obj_6 = assignment.getFeature_obj();
      if ((_feature_obj_6 instanceof IndexObject)) {
        ObjectLiteral _feature_obj_7 = assignment.getFeature_obj();
        VariableDeclaration _value_19 = ((IndexObject) _feature_obj_7).getValue();
        boolean _notEquals_1 = (!Objects.equal(_value_19, null));
        if (_notEquals_1) {
          HashMap<String, String> _get_1 = this.typeSystem.get(scope);
          ObjectLiteral _feature_obj_8 = assignment.getFeature_obj();
          VariableDeclaration _name_11 = ((IndexObject) _feature_obj_8).getName();
          String _name_12 = ((VariableDeclaration) _name_11).getName();
          String _plus_2 = (_name_12 + "[");
          ObjectLiteral _feature_obj_9 = assignment.getFeature_obj();
          String _name_13 = ((IndexObject) _feature_obj_9).getValue().getName();
          String _plus_3 = (_plus_2 + _name_13);
          String _plus_4 = (_plus_3 + "]");
          _get_1.put(_plus_4, 
            this.valuateArithmeticExpression(assignment.getValue(), scope));
          StringConcatenation _builder_9 = new StringConcatenation();
          ObjectLiteral _feature_obj_10 = assignment.getFeature_obj();
          VariableDeclaration _name_14 = ((IndexObject) _feature_obj_10).getName();
          String _name_15 = ((VariableDeclaration) _name_14).getName();
          _builder_9.append(_name_15);
          _builder_9.append(".put(");
          ObjectLiteral _feature_obj_11 = assignment.getFeature_obj();
          String _name_16 = ((IndexObject) _feature_obj_11).getValue().getName();
          _builder_9.append(_name_16);
          _builder_9.append(",");
          String _generateArithmeticExpression_12 = this.generateArithmeticExpression(assignment.getValue(), scope);
          _builder_9.append(_generateArithmeticExpression_12);
          _builder_9.append(");");
          _builder_9.newLineIfNotEmpty();
          return _builder_9.toString();
        } else {
          HashMap<String, String> _get_2 = this.typeSystem.get(scope);
          ObjectLiteral _feature_obj_12 = assignment.getFeature_obj();
          VariableDeclaration _name_17 = ((IndexObject) _feature_obj_12).getName();
          String _name_18 = ((VariableDeclaration) _name_17).getName();
          String _plus_5 = (_name_18 + "[");
          ObjectLiteral _feature_obj_13 = assignment.getFeature_obj();
          int _valuet = ((IndexObject) _feature_obj_13).getValuet();
          String _plus_6 = (_plus_5 + Integer.valueOf(_valuet));
          String _plus_7 = (_plus_6 + "]");
          _get_2.put(_plus_7, 
            this.valuateArithmeticExpression(assignment.getValue(), scope));
          StringConcatenation _builder_10 = new StringConcatenation();
          ObjectLiteral _feature_obj_14 = assignment.getFeature_obj();
          VariableDeclaration _name_19 = ((IndexObject) _feature_obj_14).getName();
          String _name_20 = ((VariableDeclaration) _name_19).getName();
          _builder_10.append(_name_20);
          _builder_10.append(".put(\"");
          ObjectLiteral _feature_obj_15 = assignment.getFeature_obj();
          int _valuet_1 = ((IndexObject) _feature_obj_15).getValuet();
          _builder_10.append(_valuet_1);
          _builder_10.append("\",");
          String _generateArithmeticExpression_13 = this.generateArithmeticExpression(assignment.getValue(), scope);
          _builder_10.append(_generateArithmeticExpression_13);
          _builder_10.append(");");
          _builder_10.newLineIfNotEmpty();
          return _builder_10.toString();
        }
      }
    }
    return null;
  }
  
  public String generateFunctionDefinition(final FunctionDefinition definition) {
    String _name = definition.getName();
    HashMap<String, String> _hashMap = new HashMap<String, String>();
    this.typeSystem.put(_name, _hashMap);
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static Object ");
    String _name_1 = definition.getName();
    _builder.append(_name_1, "\t");
    _builder.append("(");
    {
      EList<Expression> _parameters = definition.getParameters();
      for(final Expression params : _parameters) {
        String _parameterType = this.getParameterType(definition.getName(), params, definition.getParameters().indexOf(params));
        _builder.append(_parameterType, "\t");
        _builder.append(" ");
        String _name_2 = ((VariableDeclaration) params).getName();
        _builder.append(_name_2, "\t");
        {
          boolean _equals = params.equals(IterableExtensions.<Expression>last(definition.getParameters()));
          boolean _not = (!_equals);
          if (_not) {
            _builder.append(", ");
          }
        }
      }
    }
    _builder.append(")throws Exception{");
    _builder.newLineIfNotEmpty();
    {
      EList<Expression> _expressions = definition.getBody().getExpressions();
      for(final Expression el : _expressions) {
        _builder.append("\t");
        CharSequence _generateExpression = this.generateExpression(el, definition.getName());
        _builder.append(_generateExpression, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _checkReturn = this.checkReturn(definition.getBody());
      boolean _not_1 = (!_checkReturn);
      if (_not_1) {
        _builder.append("\t");
        _builder.append("return null;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    String s = _builder.toString();
    return s;
  }
  
  public String getParameterType(final String name, final Expression param, final int pos) {
    Iterable<Expression> _filter = Iterables.<Expression>filter(IteratorExtensions.<EObject>toIterable(this.res.getAllContents()), Expression.class);
    for (final Expression exp : _filter) {
      if (((exp instanceof LocalFunctionCall) && Objects.equal(((LocalFunctionCall) exp).getTarget().getName(), name))) {
        LocalFunctionInput _input = ((LocalFunctionCall) exp).getInput();
        String typeobject = this.valuateArithmeticExpression(
          ((LocalFunctionInput) _input).getInputs().get(pos), "main");
        boolean _equals = Objects.equal(typeobject, "Table");
        if (_equals) {
          ((VariableDeclaration) param).setTypeobject("dat");
          this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "Table");
        } else {
          ((VariableDeclaration) param).setTypeobject("var");
          boolean _equals_1 = Objects.equal(typeobject, "HashMap");
          if (_equals_1) {
            this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "HashMap");
            Set<String> _keySet = this.typeSystem.get("main").keySet();
            for (final String key : _keySet) {
              LocalFunctionInput _input_1 = ((LocalFunctionCall) exp).getInput();
              ArithmeticExpression _get = ((LocalFunctionInput) _input_1).getInputs().get(pos);
              String _name = ((VariableLiteral) _get).getVariable().getName();
              String _plus = (_name + ".");
              boolean _contains = key.contains(_plus);
              if (_contains) {
                int _indexOf = key.indexOf(".");
                int _plus_1 = (_indexOf + 1);
                String tmp = key.substring(_plus_1, key.length());
                HashMap<String, String> _get_1 = this.typeSystem.get(name);
                String _name_1 = ((VariableDeclaration) param).getName();
                String _plus_2 = (_name_1 + ".");
                String _plus_3 = (_plus_2 + tmp);
                _get_1.put(_plus_3, 
                  this.typeSystem.get("main").get(key));
              }
            }
          } else {
            this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), typeobject);
          }
        }
        return typeobject;
      } else {
        if (((exp instanceof FlyFunctionCall) && Objects.equal(((FlyFunctionCall) exp).getTarget().getName(), name))) {
          boolean _isIs_for_index = ((FlyFunctionCall) exp).getInput().isIs_for_index();
          if (_isIs_for_index) {
            ArithmeticExpression _f_index = ((FlyFunctionCall) exp).getInput().getF_index();
            if ((_f_index instanceof RangeLiteral)) {
              this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "Integer");
              return "Integer";
            } else {
              ArithmeticExpression _f_index_1 = ((FlyFunctionCall) exp).getInput().getF_index();
              if ((_f_index_1 instanceof VariableLiteral)) {
                ArithmeticExpression _f_index_2 = ((FlyFunctionCall) exp).getInput().getF_index();
                String typeobject_1 = this.valuateArithmeticExpression(
                  ((VariableLiteral) _f_index_2), "main");
                boolean _equals_2 = Objects.equal(typeobject_1, "Table");
                if (_equals_2) {
                  ((VariableDeclaration) param).setTypeobject("dat");
                  this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "Table");
                } else {
                  ((VariableDeclaration) param).setTypeobject("var");
                  boolean _equals_3 = Objects.equal(typeobject_1, "HashMap");
                  if (_equals_3) {
                    this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "HashMap");
                    Set<String> _keySet_1 = this.typeSystem.get("main").keySet();
                    for (final String key_1 : _keySet_1) {
                      LocalFunctionInput _input_2 = ((LocalFunctionCall) exp).getInput();
                      ArithmeticExpression _get_2 = ((LocalFunctionInput) _input_2).getInputs().get(pos);
                      String _name_2 = ((VariableLiteral) _get_2).getVariable().getName();
                      String _plus_4 = (_name_2 + ".");
                      boolean _contains_1 = key_1.contains(_plus_4);
                      if (_contains_1) {
                        int _indexOf_1 = key_1.indexOf(".");
                        int _plus_5 = (_indexOf_1 + 1);
                        String tmp_1 = key_1.substring(_plus_5, key_1.length());
                        HashMap<String, String> _get_3 = this.typeSystem.get(name);
                        String _name_3 = ((VariableDeclaration) param).getName();
                        String _plus_6 = (_name_3 + ".");
                        String _plus_7 = (_plus_6 + tmp_1);
                        _get_3.put(_plus_7, 
                          this.typeSystem.get("main").get(key_1));
                      }
                    }
                  } else {
                    this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), typeobject_1);
                  }
                }
                return typeobject_1;
              }
            }
          } else {
            FunctionInput _input_3 = ((FlyFunctionCall) exp).getInput();
            String typeobject_2 = this.valuateArithmeticExpression(
              ((FunctionInput) _input_3).getExpressions().get(pos), "main");
            boolean _equals_4 = Objects.equal(typeobject_2, "Table");
            if (_equals_4) {
              ((VariableDeclaration) param).setTypeobject("dat");
              this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "Table");
            } else {
              ((VariableDeclaration) param).setTypeobject("var");
              boolean _equals_5 = Objects.equal(typeobject_2, "HashMap");
              if (_equals_5) {
                this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), "HashMap");
                Set<String> _keySet_2 = this.typeSystem.get("main").keySet();
                for (final String key_2 : _keySet_2) {
                  LocalFunctionInput _input_4 = ((LocalFunctionCall) exp).getInput();
                  ArithmeticExpression _get_4 = ((LocalFunctionInput) _input_4).getInputs().get(pos);
                  String _name_4 = ((VariableLiteral) _get_4).getVariable().getName();
                  String _plus_8 = (_name_4 + ".");
                  boolean _contains_2 = key_2.contains(_plus_8);
                  if (_contains_2) {
                    int _indexOf_2 = key_2.indexOf(".");
                    int _plus_9 = (_indexOf_2 + 1);
                    String tmp_2 = key_2.substring(_plus_9, key_2.length());
                    HashMap<String, String> _get_5 = this.typeSystem.get(name);
                    String _name_5 = ((VariableDeclaration) param).getName();
                    String _plus_10 = (_name_5 + ".");
                    String _plus_11 = (_plus_10 + tmp_2);
                    _get_5.put(_plus_11, 
                      this.typeSystem.get("main").get(key_2));
                  }
                }
              } else {
                this.typeSystem.get(name).put(((VariableDeclaration) param).getName(), typeobject_2);
              }
            }
            return typeobject_2;
          }
        }
      }
    }
    return null;
  }
  
  public String valuateArithmeticExpression(final ArithmeticExpression exp, final String scope) {
    if ((exp instanceof NumberLiteral)) {
      return "Integer";
    } else {
      if ((exp instanceof BooleanLiteral)) {
        return "Boolean";
      } else {
        if ((exp instanceof StringLiteral)) {
          return "String";
        } else {
          if ((exp instanceof FloatLiteral)) {
            return "Double";
          } else {
            if ((exp instanceof VariableLiteral)) {
              final VariableDeclaration variable = ((VariableLiteral)exp).getVariable();
              boolean _equals = variable.getTypeobject().equals("dat");
              if (_equals) {
                return "Table";
              } else {
                boolean _equals_1 = variable.getTypeobject().equals("channel");
                if (_equals_1) {
                  return "Channel";
                } else {
                  boolean _equals_2 = variable.getTypeobject().equals("var");
                  if (_equals_2) {
                    EObject _right = variable.getRight();
                    if ((_right instanceof NameObjectDef)) {
                      return "HashMap";
                    } else {
                      EObject _right_1 = variable.getRight();
                      if ((_right_1 instanceof ArithmeticExpression)) {
                        EObject _right_2 = variable.getRight();
                        return this.valuateArithmeticExpression(((ArithmeticExpression) _right_2), scope);
                      } else {
                        return this.typeSystem.get(scope).get(variable.getName());
                      }
                    }
                  }
                }
              }
              return "variable";
            } else {
              if ((exp instanceof NameObject)) {
                HashMap<String, String> _get = this.typeSystem.get(scope);
                String _name = ((NameObject)exp).getName().getName();
                String _plus = (_name + ".");
                String _value = ((NameObject)exp).getValue();
                String _plus_1 = (_plus + _value);
                return _get.get(_plus_1);
              } else {
                if ((exp instanceof IndexObject)) {
                  VariableDeclaration _value_1 = ((IndexObject)exp).getValue();
                  boolean _notEquals = (!Objects.equal(_value_1, null));
                  if (_notEquals) {
                    HashMap<String, String> _get_1 = this.typeSystem.get(scope);
                    String _name_1 = ((IndexObject)exp).getName().getName();
                    String _plus_2 = (_name_1 + "[");
                    VariableDeclaration _value_2 = ((IndexObject)exp).getValue();
                    String _plus_3 = (_plus_2 + _value_2);
                    String _plus_4 = (_plus_3 + "]");
                    return _get_1.get(_plus_4);
                  } else {
                    HashMap<String, String> _get_2 = this.typeSystem.get(scope);
                    String _name_2 = ((IndexObject)exp).getName().getName();
                    String _plus_5 = (_name_2 + "[");
                    int _valuet = ((IndexObject)exp).getValuet();
                    String _plus_6 = (_plus_5 + Integer.valueOf(_valuet));
                    String _plus_7 = (_plus_6 + "]");
                    return _get_2.get(_plus_7);
                  }
                } else {
                  if ((exp instanceof DatTableObject)) {
                    return "Table";
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((exp instanceof UnaryOperation)) {
      boolean _equals_3 = ((UnaryOperation)exp).getFeature().equals("!");
      if (_equals_3) {
        return "Boolean";
      }
      return this.valuateArithmeticExpression(((UnaryOperation)exp).getOperand(), scope);
    }
    if ((exp instanceof BinaryOperation)) {
      String left = this.valuateArithmeticExpression(((BinaryOperation)exp).getLeft(), scope);
      String right = this.valuateArithmeticExpression(((BinaryOperation)exp).getRight(), scope);
      if ((((((BinaryOperation)exp).getFeature().equals("+") || ((BinaryOperation)exp).getFeature().equals("-")) || ((BinaryOperation)exp).getFeature().equals("*")) || 
        ((BinaryOperation)exp).getFeature().equals("/"))) {
        if ((left.equals("String") || right.equals("String"))) {
          return "String";
        } else {
          if ((left.equals("Double") || right.equals("Double"))) {
            return "Double";
          } else {
            return "Integer";
          }
        }
      } else {
        return "Boolean";
      }
    } else {
      if ((exp instanceof PostfixOperation)) {
        return this.valuateArithmeticExpression(((PostfixOperation)exp).getOperand(), scope);
      } else {
        if ((exp instanceof CastExpression)) {
          boolean _equals_4 = ((CastExpression)exp).getType().equals("Object");
          if (_equals_4) {
            return "HashMap";
          }
          boolean _equals_5 = ((CastExpression)exp).getType().equals("String");
          if (_equals_5) {
            return "String";
          }
          boolean _equals_6 = ((CastExpression)exp).getType().equals("Integer");
          if (_equals_6) {
            return "Integer";
          }
          boolean _equals_7 = ((CastExpression)exp).getType().equals("Float");
          if (_equals_7) {
            return "Double";
          }
          boolean _equals_8 = ((CastExpression)exp).getType().equals("Dat");
          if (_equals_8) {
            return "Table";
          }
          boolean _equals_9 = ((CastExpression)exp).getType().equals("Date");
          if (_equals_9) {
            return "LocalDate";
          }
        } else {
          if ((exp instanceof ParenthesizedExpression)) {
            return this.valuateArithmeticExpression(((ParenthesizedExpression)exp).getExpression(), scope);
          }
        }
      }
    }
    if ((exp instanceof MathFunction)) {
      boolean _equals_10 = ((MathFunction)exp).getFeature().equals("round");
      if (_equals_10) {
        return "Integer";
      } else {
        EList<ArithmeticExpression> _expressions = ((MathFunction)exp).getExpressions();
        for (final ArithmeticExpression el : _expressions) {
          boolean _equals_11 = this.valuateArithmeticExpression(el, scope).equals("Double");
          if (_equals_11) {
            return "Double";
          }
        }
        return "Integer";
      }
    } else {
      if ((exp instanceof TimeFunction)) {
        return "Long";
      } else {
        if ((exp instanceof VariableFunction)) {
          boolean _equals_12 = ((VariableFunction)exp).getTarget().getTypeobject().equals("var");
          if (_equals_12) {
            boolean _equals_13 = ((VariableFunction)exp).getFeature().equals("split");
            if (_equals_13) {
              return "HashMap";
            } else {
              if ((((VariableFunction)exp).getFeature().contains("indexOf") || ((VariableFunction)exp).getFeature().equals("length"))) {
                return "Integer";
              } else {
                if ((((((VariableFunction)exp).getFeature().equals("concat") || ((VariableFunction)exp).getFeature().equals("substring")) || 
                  ((VariableFunction)exp).getFeature().equals("toLowerCase")) || ((VariableFunction)exp).getFeature().equals("toUpperCase"))) {
                  return "String";
                } else {
                  return "Boolean";
                }
              }
            }
          } else {
            boolean _equals_14 = ((VariableFunction)exp).getTarget().getTypeobject().equals("random");
            if (_equals_14) {
              boolean _equals_15 = ((VariableFunction)exp).getFeature().equals("nextBoolean");
              if (_equals_15) {
                return "Boolean";
              } else {
                boolean _equals_16 = ((VariableFunction)exp).getFeature().equals("nextDouble");
                if (_equals_16) {
                  return "Double";
                } else {
                  boolean _equals_17 = ((VariableFunction)exp).getFeature().equals("nextInt");
                  if (_equals_17) {
                    return "Integer";
                  }
                }
              }
            }
          }
        } else {
          return "Object";
        }
      }
    }
    return null;
  }
  
  public boolean checkReturn(final EObject el) {
    if ((el instanceof BlockExpression)) {
      EList<Expression> _expressions = ((BlockExpression) el).getExpressions();
      for (final Expression element : _expressions) {
        if ((element instanceof FunctionReturn)) {
          return true;
        }
      }
      return false;
    }
    return false;
  }
  
  public Object checkBlock(final EObject el) {
    if ((el instanceof FunctionDefinition)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof WhileExpression)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof ForExpression)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof IfExpression)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof BlockExpression)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof Fly)) {
      return Boolean.valueOf(false);
    }
    if ((el instanceof VariableDeclaration)) {
      return Boolean.valueOf(true);
    }
    if ((el instanceof PrintExpression)) {
      return Boolean.valueOf(true);
    } else {
      return this.checkBlock(el.eContainer());
    }
  }
  
  public CharSequence compileJS(final Resource resource, final FunctionDefinition func, final String env) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateBodyJs = this.generateBodyJs(func.getBody(), func.getParameters(), func.getName(), env);
    _builder.append(_generateBodyJs);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateBodyJs(final BlockExpression exps, final List<Expression> parameters, final String name, final String env) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equals = Objects.equal(env, "aws");
      if (_equals) {
        _builder.append("var AWS = require(\'aws-sdk\');");
        _builder.newLine();
        _builder.append("var sqs = new AWS.SQS();");
        _builder.newLine();
      }
    }
    _builder.append("var __dataframe = require(\'dataframe-js\').DataFrame;");
    _builder.newLine();
    _builder.append("let __params;");
    _builder.newLine();
    _builder.append("let __data;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("exports.handler = async (event,context) => {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      for(final Expression exp : parameters) {
        {
          boolean _equals_1 = this.typeSystem.get(name).get(((VariableDeclaration) exp).getName()).equals("Table");
          if (_equals_1) {
            _builder.append("\t");
            _builder.append("var __");
            String _name = ((VariableDeclaration) exp).getName();
            _builder.append(_name, "\t");
            _builder.append(" = await new __dataframe(JSON.parse(event.Records[0].body));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("var ");
            String _name_1 = ((VariableDeclaration) exp).getName();
            _builder.append(_name_1, "\t");
            _builder.append(" = __");
            String _name_2 = ((VariableDeclaration) exp).getName();
            _builder.append(_name_2, "\t");
            _builder.append(".toArray()");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("var ");
            String _name_3 = ((VariableDeclaration) exp).getName();
            _builder.append(_name_3, "\t");
            _builder.append(" = event.Records[0].body;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EList<Expression> _expressions = exps.getExpressions();
      for(final Expression exp_1 : _expressions) {
        _builder.append("\t");
        String _generateJsExpression = this.generateJsExpression(exp_1, name);
        _builder.append(_generateJsExpression, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String generateJsExpression(final Expression exp, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    String s = _builder.toString();
    if ((exp instanceof ChannelSend)) {
      String _s = s;
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("__data = await sqs.getQueueUrl({ QueueName: \"");
      String _name = ((ChannelSend)exp).getTarget().getName();
      _builder_1.append(_name);
      _builder_1.append("\"}).promise();");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("__params = {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("QueueName : \"");
      String _name_1 = ((ChannelSend)exp).getTarget().getName();
      _builder_1.append(_name_1, "\t");
      _builder_1.append("\" ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("};");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("__params = {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("MessageBody : JSON.stringify(");
      String _generateJsArithmeticExpression = this.generateJsArithmeticExpression(((ChannelSend)exp).getExpression());
      _builder_1.append(_generateJsArithmeticExpression, "\t");
      _builder_1.append("),");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t");
      _builder_1.append("QueueUrl : __data.QueueUrl");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("__data = await sqs.sendMessage(__params).promise();");
      _builder_1.newLine();
      s = (_s + _builder_1);
    } else {
      if ((exp instanceof VariableDeclaration)) {
        boolean _equals = ((VariableDeclaration)exp).getTypeobject().equals("var");
        if (_equals) {
          EObject _right = ((VariableDeclaration)exp).getRight();
          if ((_right instanceof NameObjectDef)) {
            this.typeSystem.get(scope).put(((VariableDeclaration)exp).getName(), "HashMap");
            String _s_1 = s;
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("var ");
            String _name_2 = ((VariableDeclaration)exp).getName();
            _builder_2.append(_name_2);
            _builder_2.append(" = {");
            s = (_s_1 + _builder_2);
            int i = 0;
            EObject _right_1 = ((VariableDeclaration)exp).getRight();
            EList<FeautureName> _features = ((NameObjectDef) _right_1).getFeatures();
            for (final FeautureName f : _features) {
              {
                String _feature = f.getFeature();
                boolean _notEquals = (!Objects.equal(_feature, null));
                if (_notEquals) {
                  HashMap<String, String> _get = this.typeSystem.get(scope);
                  String _name_3 = ((VariableDeclaration)exp).getName();
                  String _plus = (_name_3 + ".");
                  String _feature_1 = f.getFeature();
                  String _plus_1 = (_plus + _feature_1);
                  _get.put(_plus_1, 
                    this.valuateArithmeticExpression(f.getValue(), scope));
                  StringConcatenation _builder_3 = new StringConcatenation();
                  String _feature_2 = f.getFeature();
                  _builder_3.append(_feature_2);
                  _builder_3.append(":");
                  String _generateJsArithmeticExpression_1 = this.generateJsArithmeticExpression(f.getValue());
                  _builder_3.append(_generateJsArithmeticExpression_1);
                  String _plus_2 = (s + _builder_3);
                  s = _plus_2;
                } else {
                  HashMap<String, String> _get_1 = this.typeSystem.get(scope);
                  String _name_4 = ((VariableDeclaration)exp).getName();
                  String _plus_3 = (_name_4 + "[");
                  String _plus_4 = (_plus_3 + Integer.valueOf(i));
                  String _plus_5 = (_plus_4 + "]");
                  _get_1.put(_plus_5, 
                    this.valuateArithmeticExpression(f.getValue(), scope));
                  StringConcatenation _builder_4 = new StringConcatenation();
                  _builder_4.append(i);
                  _builder_4.append(":");
                  String _generateJsArithmeticExpression_2 = this.generateJsArithmeticExpression(f.getValue());
                  _builder_4.append(_generateJsArithmeticExpression_2);
                  String _plus_6 = (s + _builder_4);
                  s = _plus_6;
                  i++;
                }
                EObject _right_2 = ((VariableDeclaration)exp).getRight();
                FeautureName _last = IterableExtensions.<FeautureName>last(((NameObjectDef) _right_2).getFeatures());
                boolean _notEquals_1 = (!Objects.equal(f, _last));
                if (_notEquals_1) {
                  String _s_2 = s;
                  StringConcatenation _builder_5 = new StringConcatenation();
                  _builder_5.append(",");
                  s = (_s_2 + _builder_5);
                }
              }
            }
            String _s_2 = s;
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("}");
            s = (_s_2 + _builder_3);
          } else {
            String _s_3 = s;
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("var ");
            String _name_3 = ((VariableDeclaration)exp).getName();
            _builder_4.append(_name_3);
            _builder_4.append(" = ");
            EObject _right_2 = ((VariableDeclaration)exp).getRight();
            String _generateJsArithmeticExpression_1 = this.generateJsArithmeticExpression(((ArithmeticExpression) _right_2));
            _builder_4.append(_generateJsArithmeticExpression_1);
            _builder_4.append(";");
            _builder_4.newLineIfNotEmpty();
            s = (_s_3 + _builder_4);
          }
        } else {
          boolean _equals_1 = ((VariableDeclaration)exp).getTypeobject().equals("dat");
          if (_equals_1) {
            this.typeSystem.get(scope).put(((VariableDeclaration)exp).getName(), "Table");
            String _s_4 = s;
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("var __");
            String _name_4 = ((VariableDeclaration)exp).getName();
            _builder_5.append(_name_4);
            _builder_5.append(" = await __dataframe.fromCSV(");
            EObject _right_3 = ((VariableDeclaration)exp).getRight();
            String _generateJsArithmeticExpression_2 = this.generateJsArithmeticExpression(((NameObjectDef) _right_3).getFeatures().get(1).getValue());
            _builder_5.append(_generateJsArithmeticExpression_2);
            _builder_5.append(")");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("var ");
            String _name_5 = ((VariableDeclaration)exp).getName();
            _builder_5.append(_name_5);
            _builder_5.append(" = __");
            String _name_6 = ((VariableDeclaration)exp).getName();
            _builder_5.append(_name_6);
            _builder_5.append(".toArray()");
            _builder_5.newLineIfNotEmpty();
            s = (_s_4 + _builder_5);
          }
        }
      } else {
        if ((exp instanceof IfExpression)) {
          String _s_5 = s;
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append("if(");
          String _generateJsArithmeticExpression_3 = this.generateJsArithmeticExpression(((IfExpression)exp).getCond());
          _builder_6.append(_generateJsArithmeticExpression_3);
          _builder_6.append(")");
          _builder_6.newLineIfNotEmpty();
          _builder_6.append("\t");
          Object _generateJsExpression = this.generateJsExpression(((IfExpression)exp).getThen(), scope);
          _builder_6.append(_generateJsExpression, "\t");
          _builder_6.append(" ");
          _builder_6.newLineIfNotEmpty();
          {
            Expression _else = ((IfExpression)exp).getElse();
            boolean _notEquals = (!Objects.equal(_else, null));
            if (_notEquals) {
              _builder_6.append("else");
              _builder_6.newLine();
              _builder_6.append("\t");
              Object _generateJsExpression_1 = this.generateJsExpression(((IfExpression)exp).getElse(), scope);
              _builder_6.append(_generateJsExpression_1, "\t");
              _builder_6.newLineIfNotEmpty();
            }
          }
          s = (_s_5 + _builder_6);
        } else {
          if ((exp instanceof ForExpression)) {
            String _s_6 = s;
            StringConcatenation _builder_7 = new StringConcatenation();
            String _generateJsForExpression = this.generateJsForExpression(((ForExpression)exp), scope);
            _builder_7.append(_generateJsForExpression);
            _builder_7.newLineIfNotEmpty();
            s = (_s_6 + _builder_7);
          } else {
            if ((exp instanceof WhileExpression)) {
              String _s_7 = s;
              StringConcatenation _builder_8 = new StringConcatenation();
              CharSequence _generateJsWhileExpression = this.generateJsWhileExpression(((WhileExpression)exp), scope);
              _builder_8.append(_generateJsWhileExpression);
              _builder_8.newLineIfNotEmpty();
              s = (_s_7 + _builder_8);
            } else {
              if ((exp instanceof BlockExpression)) {
                String _s_8 = s;
                StringConcatenation _builder_9 = new StringConcatenation();
                CharSequence _generateJsBlockExpression = this.generateJsBlockExpression(((BlockExpression)exp), scope);
                _builder_9.append(_generateJsBlockExpression);
                _builder_9.newLineIfNotEmpty();
                s = (_s_8 + _builder_9);
              } else {
                if ((exp instanceof Assignment)) {
                  String _s_9 = s;
                  StringConcatenation _builder_10 = new StringConcatenation();
                  String _generateJsAssignmentExpression = this.generateJsAssignmentExpression(((Assignment)exp), scope);
                  _builder_10.append(_generateJsAssignmentExpression);
                  _builder_10.newLineIfNotEmpty();
                  s = (_s_9 + _builder_10);
                } else {
                  if ((exp instanceof PrintExpression)) {
                    String _s_10 = s;
                    StringConcatenation _builder_11 = new StringConcatenation();
                    _builder_11.append("console.log(");
                    String _generateJsArithmeticExpression_4 = this.generateJsArithmeticExpression(((PrintExpression)exp).getPrint());
                    _builder_11.append(_generateJsArithmeticExpression_4);
                    _builder_11.append(") ");
                    _builder_11.newLineIfNotEmpty();
                    s = (_s_10 + _builder_11);
                  }
                }
              }
            }
          }
        }
      }
    }
    return s;
  }
  
  public String generateJsAssignmentExpression(final Assignment assignment, final String scope) {
    ArithmeticExpression _feature = assignment.getFeature();
    boolean _notEquals = (!Objects.equal(_feature, null));
    if (_notEquals) {
      if (((assignment.getValue() instanceof CastExpression) && (((CastExpression) assignment.getValue()).getTarget() instanceof ChannelReceive))) {
        ArithmeticExpression _value = assignment.getValue();
        ArithmeticExpression _target = ((CastExpression) _value).getTarget();
        EObject _right = ((ChannelReceive) _target).getTarget().getEnvironment().getRight();
        boolean _equals = ((DeclarationObject) _right).getFeatures().get(0).getValue_s().equals("aws");
        if (_equals) {
          ArithmeticExpression _value_1 = assignment.getValue();
          boolean _equals_1 = ((CastExpression) _value_1).getType().equals("Integer");
          if (_equals_1) {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("\t\t\t\t\t\t\t");
            _builder.newLine();
            return _builder.toString();
          } else {
            ArithmeticExpression _value_2 = assignment.getValue();
            boolean _equals_2 = ((CastExpression) _value_2).getType().equals("Double");
            if (_equals_2) {
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append("\t\t\t\t\t\t\t");
              _builder_1.newLine();
              return _builder_1.toString();
            }
          }
        } else {
          ArithmeticExpression _value_3 = assignment.getValue();
          boolean _equals_3 = ((CastExpression) _value_3).getType().equals("Integer");
          if (_equals_3) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("\t\t\t\t\t\t\t");
            _builder_2.newLine();
            return _builder_2.toString();
          } else {
            ArithmeticExpression _value_4 = assignment.getValue();
            boolean _equals_4 = ((CastExpression) _value_4).getType().equals("Double");
            if (_equals_4) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("\t\t\t\t\t\t\t");
              _builder_3.newLine();
              return _builder_3.toString();
            }
          }
        }
      } else {
        ArithmeticExpression _value_5 = assignment.getValue();
        if ((_value_5 instanceof ChannelReceive)) {
          ArithmeticExpression _value_6 = assignment.getValue();
          EObject _right_1 = ((ChannelReceive) _value_6).getTarget().getEnvironment().getRight();
          boolean _equals_5 = ((DeclarationObject) _right_1).getFeatures().get(0).getValue_s().equals("aws");
          if (_equals_5) {
            StringConcatenation _builder_4 = new StringConcatenation();
            return _builder_4.toString();
          } else {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("\t\t\t\t\t\t");
            _builder_5.newLine();
            return _builder_5.toString();
          }
        } else {
          StringConcatenation _builder_6 = new StringConcatenation();
          String _generateJsArithmeticExpression = this.generateJsArithmeticExpression(assignment.getFeature());
          _builder_6.append(_generateJsArithmeticExpression);
          _builder_6.append(" ");
          String _op = assignment.getOp();
          _builder_6.append(_op);
          _builder_6.append(" ");
          String _generateJsArithmeticExpression_1 = this.generateJsArithmeticExpression(assignment.getValue());
          _builder_6.append(_generateJsArithmeticExpression_1);
          _builder_6.append(" ");
          _builder_6.newLineIfNotEmpty();
          return _builder_6.toString();
        }
      }
    }
    ObjectLiteral _feature_obj = assignment.getFeature_obj();
    boolean _tripleNotEquals = (_feature_obj != null);
    if (_tripleNotEquals) {
      ObjectLiteral _feature_obj_1 = assignment.getFeature_obj();
      if ((_feature_obj_1 instanceof NameObject)) {
        HashMap<String, String> _get = this.typeSystem.get(scope);
        ObjectLiteral _feature_obj_2 = assignment.getFeature_obj();
        VariableDeclaration _name = ((NameObject) _feature_obj_2).getName();
        String _name_1 = ((VariableDeclaration) _name).getName();
        String _plus = (_name_1 + ".");
        ObjectLiteral _feature_obj_3 = assignment.getFeature_obj();
        String _value_7 = ((NameObject) _feature_obj_3).getValue();
        String _plus_1 = (_plus + _value_7);
        _get.put(_plus_1, 
          this.valuateArithmeticExpression(assignment.getValue(), scope));
        StringConcatenation _builder_7 = new StringConcatenation();
        ObjectLiteral _feature_obj_4 = assignment.getFeature_obj();
        VariableDeclaration _name_2 = ((NameObject) _feature_obj_4).getName();
        String _name_3 = ((VariableDeclaration) _name_2).getName();
        _builder_7.append(_name_3);
        _builder_7.append("[\"");
        ObjectLiteral _feature_obj_5 = assignment.getFeature_obj();
        String _value_8 = ((NameObject) _feature_obj_5).getValue();
        _builder_7.append(_value_8);
        _builder_7.append("\"] = ");
        String _generateJsArithmeticExpression_2 = this.generateJsArithmeticExpression(assignment.getValue());
        _builder_7.append(_generateJsArithmeticExpression_2);
        _builder_7.append(" ");
        _builder_7.newLineIfNotEmpty();
        return _builder_7.toString();
      }
      ObjectLiteral _feature_obj_6 = assignment.getFeature_obj();
      if ((_feature_obj_6 instanceof IndexObject)) {
        ObjectLiteral _feature_obj_7 = assignment.getFeature_obj();
        VariableDeclaration _value_9 = ((IndexObject) _feature_obj_7).getValue();
        boolean _notEquals_1 = (!Objects.equal(_value_9, null));
        if (_notEquals_1) {
          HashMap<String, String> _get_1 = this.typeSystem.get(scope);
          ObjectLiteral _feature_obj_8 = assignment.getFeature_obj();
          VariableDeclaration _name_4 = ((IndexObject) _feature_obj_8).getName();
          String _name_5 = ((VariableDeclaration) _name_4).getName();
          String _plus_2 = (_name_5 + "[");
          ObjectLiteral _feature_obj_9 = assignment.getFeature_obj();
          String _name_6 = ((IndexObject) _feature_obj_9).getValue().getName();
          String _plus_3 = (_plus_2 + _name_6);
          String _plus_4 = (_plus_3 + "]");
          _get_1.put(_plus_4, 
            this.valuateArithmeticExpression(assignment.getValue(), scope));
          StringConcatenation _builder_8 = new StringConcatenation();
          ObjectLiteral _feature_obj_10 = assignment.getFeature_obj();
          VariableDeclaration _name_7 = ((IndexObject) _feature_obj_10).getName();
          String _name_8 = ((VariableDeclaration) _name_7).getName();
          _builder_8.append(_name_8);
          _builder_8.append("[");
          ObjectLiteral _feature_obj_11 = assignment.getFeature_obj();
          String _name_9 = ((IndexObject) _feature_obj_11).getValue().getName();
          _builder_8.append(_name_9);
          _builder_8.append("] = ");
          String _generateJsArithmeticExpression_3 = this.generateJsArithmeticExpression(assignment.getValue());
          _builder_8.append(_generateJsArithmeticExpression_3);
          _builder_8.append(" ");
          _builder_8.newLineIfNotEmpty();
          return _builder_8.toString();
        } else {
          HashMap<String, String> _get_2 = this.typeSystem.get(scope);
          ObjectLiteral _feature_obj_12 = assignment.getFeature_obj();
          VariableDeclaration _name_10 = ((IndexObject) _feature_obj_12).getName();
          String _name_11 = ((VariableDeclaration) _name_10).getName();
          String _plus_5 = (_name_11 + "[");
          ObjectLiteral _feature_obj_13 = assignment.getFeature_obj();
          int _valuet = ((IndexObject) _feature_obj_13).getValuet();
          String _plus_6 = (_plus_5 + Integer.valueOf(_valuet));
          String _plus_7 = (_plus_6 + "]");
          _get_2.put(_plus_7, 
            this.valuateArithmeticExpression(assignment.getValue(), scope));
          StringConcatenation _builder_9 = new StringConcatenation();
          ObjectLiteral _feature_obj_14 = assignment.getFeature_obj();
          VariableDeclaration _name_12 = ((IndexObject) _feature_obj_14).getName();
          String _name_13 = ((VariableDeclaration) _name_12).getName();
          _builder_9.append(_name_13);
          _builder_9.append("[");
          ObjectLiteral _feature_obj_15 = assignment.getFeature_obj();
          int _valuet_1 = ((IndexObject) _feature_obj_15).getValuet();
          _builder_9.append(_valuet_1);
          _builder_9.append("] = ");
          String _generateJsArithmeticExpression_4 = this.generateJsArithmeticExpression(assignment.getValue());
          _builder_9.append(_generateJsArithmeticExpression_4);
          _builder_9.append(" ");
          _builder_9.newLineIfNotEmpty();
          return _builder_9.toString();
        }
      }
    }
    return null;
  }
  
  public CharSequence generateJsWhileExpression(final WhileExpression exp, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while(");
    String _generateJsArithmeticExpression = this.generateJsArithmeticExpression(exp.getCond());
    _builder.append(_generateJsArithmeticExpression);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Object _generateJsExpression = this.generateJsExpression(exp.getBody(), scope);
    _builder.append(_generateJsExpression, "\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String generateJsForExpression(final ForExpression exp, final String scope) {
    ArithmeticExpression _object = exp.getObject();
    if ((_object instanceof CastExpression)) {
      ArithmeticExpression _object_1 = exp.getObject();
      boolean _equals = ((CastExpression) _object_1).getType().equals("Dat");
      if (_equals) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("for(var __");
        VariableFor _index = exp.getIndex();
        String _name = ((VariableDeclaration) _index).getName();
        _builder.append(_name);
        _builder.append(" in ");
        ArithmeticExpression _object_2 = exp.getObject();
        ArithmeticExpression _target = ((CastExpression) _object_2).getTarget();
        String _name_1 = ((VariableLiteral) _target).getVariable().getName();
        _builder.append(_name_1);
        _builder.append("»){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("var ");
        VariableFor _index_1 = exp.getIndex();
        String _name_2 = ((VariableDeclaration) _index_1).getName();
        _builder.append(_name_2, "\t");
        _builder.append(" = ");
        VariableFor _index_2 = exp.getIndex();
        String _name_3 = ((VariableDeclaration) _index_2).getName();
        _builder.append(_name_3, "\t");
        _builder.append("[__");
        VariableFor _index_3 = exp.getIndex();
        String _name_4 = ((VariableDeclaration) _index_3).getName();
        _builder.append(_name_4, "\t");
        _builder.append("];");
        _builder.newLineIfNotEmpty();
        {
          Expression _body = exp.getBody();
          if ((_body instanceof BlockExpression)) {
            {
              Expression _body_1 = exp.getBody();
              EList<Expression> _expressions = ((BlockExpression) _body_1).getExpressions();
              for(final Expression e : _expressions) {
                _builder.append("\t");
                Object _generateJsExpression = this.generateJsExpression(e, scope);
                _builder.append(_generateJsExpression, "\t");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            _builder.append("\t");
            Object _generateJsExpression_1 = this.generateJsExpression(exp.getBody(), scope);
            _builder.append(_generateJsExpression_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("}");
        _builder.newLine();
        return _builder.toString();
      } else {
        ArithmeticExpression _object_3 = exp.getObject();
        boolean _equals_1 = ((CastExpression) _object_3).getType().equals("Object");
        if (_equals_1) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("for(__key in ");
          ArithmeticExpression _object_4 = exp.getObject();
          ArithmeticExpression _target_1 = ((CastExpression) _object_4).getTarget();
          String _name_5 = ((VariableLiteral) _target_1).getVariable().getName();
          _builder_1.append(_name_5);
          _builder_1.append(" ){");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("\t");
          _builder_1.append("var ");
          VariableFor _index_4 = exp.getIndex();
          String _name_6 = ((VariableDeclaration) _index_4).getName();
          _builder_1.append(_name_6, "\t");
          _builder_1.append(" = {k:__key, v:");
          ArithmeticExpression _object_5 = exp.getObject();
          ArithmeticExpression _target_2 = ((CastExpression) _object_5).getTarget();
          String _name_7 = ((VariableLiteral) _target_2).getVariable().getName();
          _builder_1.append(_name_7, "\t");
          _builder_1.append("[__key]} ");
          _builder_1.newLineIfNotEmpty();
          {
            Expression _body_2 = exp.getBody();
            if ((_body_2 instanceof BlockExpression)) {
              {
                Expression _body_3 = exp.getBody();
                EList<Expression> _expressions_1 = ((BlockExpression) _body_3).getExpressions();
                for(final Expression e_1 : _expressions_1) {
                  _builder_1.append("\t");
                  Object _generateJsExpression_2 = this.generateJsExpression(e_1, scope);
                  _builder_1.append(_generateJsExpression_2, "\t");
                  _builder_1.newLineIfNotEmpty();
                }
              }
            } else {
              _builder_1.append("\t");
              Object _generateJsExpression_3 = this.generateJsExpression(exp.getBody(), scope);
              _builder_1.append(_generateJsExpression_3, "\t");
              _builder_1.append("\t");
              _builder_1.newLineIfNotEmpty();
            }
          }
          _builder_1.append("}");
          _builder_1.newLine();
          return _builder_1.toString();
        }
      }
    } else {
      ArithmeticExpression _object_6 = exp.getObject();
      if ((_object_6 instanceof RangeLiteral)) {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("var ");
        VariableFor _index_5 = exp.getIndex();
        String _name_8 = ((VariableDeclaration) _index_5).getName();
        _builder_2.append(_name_8);
        _builder_2.append(";");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("for(");
        VariableFor _index_6 = exp.getIndex();
        String _name_9 = ((VariableDeclaration) _index_6).getName();
        _builder_2.append(_name_9);
        _builder_2.append(" = ");
        ArithmeticExpression _object_7 = exp.getObject();
        int _value1 = ((RangeLiteral) _object_7).getValue1();
        _builder_2.append(_value1);
        _builder_2.append(" ;");
        VariableFor _index_7 = exp.getIndex();
        String _name_10 = ((VariableDeclaration) _index_7).getName();
        _builder_2.append(_name_10);
        _builder_2.append(" < ");
        ArithmeticExpression _object_8 = exp.getObject();
        int _value2 = ((RangeLiteral) _object_8).getValue2();
        _builder_2.append(_value2);
        _builder_2.append("; ");
        VariableFor _index_8 = exp.getIndex();
        String _name_11 = ((VariableDeclaration) _index_8).getName();
        _builder_2.append(_name_11);
        _builder_2.append("++)");
        _builder_2.newLineIfNotEmpty();
        {
          Expression _body_4 = exp.getBody();
          if ((_body_4 instanceof BlockExpression)) {
            Expression _body_5 = exp.getBody();
            CharSequence _generateJsBlockExpression = this.generateJsBlockExpression(((BlockExpression) _body_5), scope);
            _builder_2.append(_generateJsBlockExpression);
            _builder_2.newLineIfNotEmpty();
          } else {
            Object _generateJsExpression_4 = this.generateJsExpression(exp.getBody(), scope);
            _builder_2.append(_generateJsExpression_4);
            _builder_2.newLineIfNotEmpty();
          }
        }
        return _builder_2.toString();
      } else {
        ArithmeticExpression _object_9 = exp.getObject();
        if ((_object_9 instanceof VariableLiteral)) {
          if (((((VariableLiteral) exp.getObject()).getVariable().getTypeobject().equals("var") && (((VariableLiteral) exp.getObject()).getVariable().getRight() instanceof NameObjectDef)) || 
            this.typeSystem.get(scope).get(((VariableLiteral) exp.getObject()).getVariable().getName()).equals("HashMap"))) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("for(__key in ");
            ArithmeticExpression _object_10 = exp.getObject();
            String _name_12 = ((VariableLiteral) _object_10).getVariable().getName();
            _builder_3.append(_name_12);
            _builder_3.append(" ){");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t");
            _builder_3.append("var ");
            VariableFor _index_9 = exp.getIndex();
            String _name_13 = ((VariableDeclaration) _index_9).getName();
            _builder_3.append(_name_13, "\t");
            _builder_3.append(" = {k:__key, v:");
            ArithmeticExpression _object_11 = exp.getObject();
            String _name_14 = ((VariableLiteral) _object_11).getVariable().getName();
            _builder_3.append(_name_14, "\t");
            _builder_3.append("[__key]}");
            _builder_3.newLineIfNotEmpty();
            {
              Expression _body_6 = exp.getBody();
              if ((_body_6 instanceof BlockExpression)) {
                {
                  Expression _body_7 = exp.getBody();
                  EList<Expression> _expressions_2 = ((BlockExpression) _body_7).getExpressions();
                  for(final Expression e_2 : _expressions_2) {
                    _builder_3.append("\t");
                    Object _generateJsExpression_5 = this.generateJsExpression(e_2, scope);
                    _builder_3.append(_generateJsExpression_5, "\t");
                    _builder_3.newLineIfNotEmpty();
                  }
                }
              } else {
                _builder_3.append("\t");
                Object _generateJsExpression_6 = this.generateJsExpression(exp.getBody(), scope);
                _builder_3.append(_generateJsExpression_6, "\t");
                _builder_3.append("\t");
                _builder_3.newLineIfNotEmpty();
              }
            }
            _builder_3.append("}");
            _builder_3.newLine();
            return _builder_3.toString();
          } else {
            if ((((VariableLiteral) exp.getObject()).getVariable().getTypeobject().equals("dat") || 
              this.typeSystem.get(scope).get(((VariableLiteral) exp.getObject()).getVariable().getName()).equals("Table"))) {
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("for(var __");
              VariableFor _index_10 = exp.getIndex();
              String _name_15 = ((VariableDeclaration) _index_10).getName();
              _builder_4.append(_name_15);
              _builder_4.append(" in ");
              ArithmeticExpression _object_12 = exp.getObject();
              String _name_16 = ((VariableLiteral) _object_12).getVariable().getName();
              _builder_4.append(_name_16);
              _builder_4.append(" ){");
              _builder_4.newLineIfNotEmpty();
              _builder_4.append("\t");
              _builder_4.append("var ");
              VariableFor _index_11 = exp.getIndex();
              String _name_17 = ((VariableDeclaration) _index_11).getName();
              _builder_4.append(_name_17, "\t");
              _builder_4.append(" = ");
              ArithmeticExpression _object_13 = exp.getObject();
              String _name_18 = ((VariableLiteral) _object_13).getVariable().getName();
              _builder_4.append(_name_18, "\t");
              _builder_4.append("[__");
              VariableFor _index_12 = exp.getIndex();
              String _name_19 = ((VariableDeclaration) _index_12).getName();
              _builder_4.append(_name_19, "\t");
              _builder_4.append("]");
              _builder_4.newLineIfNotEmpty();
              {
                Expression _body_8 = exp.getBody();
                if ((_body_8 instanceof BlockExpression)) {
                  {
                    Expression _body_9 = exp.getBody();
                    EList<Expression> _expressions_3 = ((BlockExpression) _body_9).getExpressions();
                    for(final Expression e_3 : _expressions_3) {
                      _builder_4.append("\t");
                      Object _generateJsExpression_7 = this.generateJsExpression(e_3, scope);
                      _builder_4.append(_generateJsExpression_7, "\t");
                      _builder_4.newLineIfNotEmpty();
                    }
                  }
                } else {
                  _builder_4.append("\t");
                  Object _generateJsExpression_8 = this.generateJsExpression(exp.getBody(), scope);
                  _builder_4.append(_generateJsExpression_8, "\t");
                  _builder_4.newLineIfNotEmpty();
                }
              }
              _builder_4.append("}");
              _builder_4.newLine();
              return _builder_4.toString();
            }
          }
        }
      }
    }
    return null;
  }
  
  public CharSequence generateJsBlockExpression(final BlockExpression block, final String scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      EList<Expression> _expressions = block.getExpressions();
      for(final Expression exp : _expressions) {
        _builder.append("\t\t\t");
        Object _generateJsExpression = this.generateJsExpression(exp, scope);
        _builder.append(_generateJsExpression, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    return _builder;
  }
  
  public String generateJsArithmeticExpression(final ArithmeticExpression exp) {
    if ((exp instanceof BinaryOperation)) {
      boolean _equals = ((BinaryOperation)exp).getFeature().equals("and");
      if (_equals) {
        StringConcatenation _builder = new StringConcatenation();
        Object _generateJsArithmeticExpression = this.generateJsArithmeticExpression(((BinaryOperation)exp).getLeft());
        _builder.append(_generateJsArithmeticExpression);
        _builder.append(" && ");
        Object _generateJsArithmeticExpression_1 = this.generateJsArithmeticExpression(((BinaryOperation)exp).getRight());
        _builder.append(_generateJsArithmeticExpression_1);
        return _builder.toString();
      } else {
        boolean _equals_1 = ((BinaryOperation)exp).getFeature().equals("or");
        if (_equals_1) {
          StringConcatenation _builder_1 = new StringConcatenation();
          Object _generateJsArithmeticExpression_2 = this.generateJsArithmeticExpression(((BinaryOperation)exp).getLeft());
          _builder_1.append(_generateJsArithmeticExpression_2);
          _builder_1.append(" || ");
          Object _generateJsArithmeticExpression_3 = this.generateJsArithmeticExpression(((BinaryOperation)exp).getRight());
          _builder_1.append(_generateJsArithmeticExpression_3);
          return _builder_1.toString();
        } else {
          StringConcatenation _builder_2 = new StringConcatenation();
          Object _generateJsArithmeticExpression_4 = this.generateJsArithmeticExpression(((BinaryOperation)exp).getLeft());
          _builder_2.append(_generateJsArithmeticExpression_4);
          _builder_2.append(" ");
          String _feature = ((BinaryOperation)exp).getFeature();
          _builder_2.append(_feature);
          _builder_2.append(" ");
          Object _generateJsArithmeticExpression_5 = this.generateJsArithmeticExpression(((BinaryOperation)exp).getRight());
          _builder_2.append(_generateJsArithmeticExpression_5);
          return _builder_2.toString();
        }
      }
    } else {
      if ((exp instanceof UnaryOperation)) {
        StringConcatenation _builder_3 = new StringConcatenation();
        String _feature_1 = ((UnaryOperation)exp).getFeature();
        _builder_3.append(_feature_1);
        Object _generateJsArithmeticExpression_6 = this.generateJsArithmeticExpression(((UnaryOperation)exp).getOperand());
        _builder_3.append(_generateJsArithmeticExpression_6);
        return _builder_3.toString();
      } else {
        if ((exp instanceof PostfixOperation)) {
          StringConcatenation _builder_4 = new StringConcatenation();
          Object _generateJsArithmeticExpression_7 = this.generateJsArithmeticExpression(((PostfixOperation)exp).getOperand());
          _builder_4.append(_generateJsArithmeticExpression_7);
          String _feature_2 = ((PostfixOperation)exp).getFeature();
          _builder_4.append(_feature_2);
          return _builder_4.toString();
        } else {
          if ((exp instanceof ParenthesizedExpression)) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("(");
            Object _generateJsArithmeticExpression_8 = this.generateJsArithmeticExpression(((ParenthesizedExpression)exp).getExpression());
            _builder_5.append(_generateJsArithmeticExpression_8);
            _builder_5.append(")");
            return _builder_5.toString();
          } else {
            if ((exp instanceof NumberLiteral)) {
              StringConcatenation _builder_6 = new StringConcatenation();
              int _value = ((NumberLiteral)exp).getValue();
              _builder_6.append(_value);
              return _builder_6.toString();
            } else {
              if ((exp instanceof BooleanLiteral)) {
                StringConcatenation _builder_7 = new StringConcatenation();
                String _value_1 = ((BooleanLiteral)exp).getValue();
                _builder_7.append(_value_1);
                return _builder_7.toString();
              } else {
                if ((exp instanceof FloatLiteral)) {
                  StringConcatenation _builder_8 = new StringConcatenation();
                  float _value_2 = ((FloatLiteral)exp).getValue();
                  _builder_8.append(_value_2);
                  return _builder_8.toString();
                }
              }
            }
          }
        }
      }
    }
    if ((exp instanceof StringLiteral)) {
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("\"");
      String _value_3 = ((StringLiteral)exp).getValue();
      _builder_9.append(_value_3);
      _builder_9.append("\"");
      return _builder_9.toString();
    } else {
      if ((exp instanceof VariableLiteral)) {
        StringConcatenation _builder_10 = new StringConcatenation();
        String _name = ((VariableLiteral)exp).getVariable().getName();
        _builder_10.append(_name);
        return _builder_10.toString();
      } else {
        if ((exp instanceof VariableFunction)) {
          boolean _equals_2 = ((VariableFunction)exp).getTarget().getTypeobject().equals("random");
          if (_equals_2) {
            StringConcatenation _builder_11 = new StringConcatenation();
            _builder_11.append("Math.random()");
            return _builder_11.toString();
          }
        } else {
          if ((exp instanceof TimeFunction)) {
            VariableDeclaration _value_4 = ((TimeFunction)exp).getValue();
            boolean _notEquals = (!Objects.equal(_value_4, null));
            if (_notEquals) {
              StringConcatenation _builder_12 = new StringConcatenation();
              _builder_12.append("(process.hrtime(");
              String _name_1 = ((TimeFunction)exp).getValue().getName();
              _builder_12.append(_name_1);
              _builder_12.append("))");
              return _builder_12.toString();
            } else {
              StringConcatenation _builder_13 = new StringConcatenation();
              _builder_13.append("(process.hrtime())");
              return _builder_13.toString();
            }
          } else {
            if ((exp instanceof NameObject)) {
              StringConcatenation _builder_14 = new StringConcatenation();
              VariableDeclaration _name_2 = ((NameObject)exp).getName();
              String _name_3 = ((VariableDeclaration) _name_2).getName();
              _builder_14.append(_name_3);
              _builder_14.append(".");
              String _value_5 = ((NameObject)exp).getValue();
              _builder_14.append(_value_5);
              return _builder_14.toString();
            } else {
              if ((exp instanceof IndexObject)) {
                VariableDeclaration _value_6 = ((IndexObject)exp).getValue();
                boolean _tripleNotEquals = (_value_6 != null);
                if (_tripleNotEquals) {
                  StringConcatenation _builder_15 = new StringConcatenation();
                  VariableDeclaration _name_4 = ((IndexObject)exp).getName();
                  String _name_5 = ((VariableDeclaration) _name_4).getName();
                  _builder_15.append(_name_5);
                  _builder_15.append("[");
                  String _name_6 = ((IndexObject)exp).getValue().getName();
                  _builder_15.append(_name_6);
                  _builder_15.append("]");
                  return _builder_15.toString();
                } else {
                  StringConcatenation _builder_16 = new StringConcatenation();
                  VariableDeclaration _name_7 = ((IndexObject)exp).getName();
                  String _name_8 = ((VariableDeclaration) _name_7).getName();
                  _builder_16.append(_name_8);
                  _builder_16.append("[");
                  int _valuet = ((IndexObject)exp).getValuet();
                  _builder_16.append(_valuet);
                  _builder_16.append("]");
                  return _builder_16.toString();
                }
              } else {
                if ((exp instanceof CastExpression)) {
                  StringConcatenation _builder_17 = new StringConcatenation();
                  Object _generateJsArithmeticExpression_9 = this.generateJsArithmeticExpression(((CastExpression)exp).getTarget());
                  _builder_17.append(_generateJsArithmeticExpression_9);
                  return _builder_17.toString();
                } else {
                  if ((exp instanceof MathFunction)) {
                    StringConcatenation _builder_18 = new StringConcatenation();
                    _builder_18.append("Math.");
                    String _feature_3 = ((MathFunction)exp).getFeature();
                    _builder_18.append(_feature_3);
                    _builder_18.append("(");
                    {
                      EList<ArithmeticExpression> _expressions = ((MathFunction)exp).getExpressions();
                      for(final ArithmeticExpression par : _expressions) {
                        _builder_18.append(" ");
                        Object _generateJsArithmeticExpression_10 = this.generateJsArithmeticExpression(par);
                        _builder_18.append(_generateJsArithmeticExpression_10);
                        _builder_18.append(" ");
                        {
                          boolean _equals_3 = par.equals(IterableExtensions.<ArithmeticExpression>last(((MathFunction)exp).getExpressions()));
                          boolean _not = (!_equals_3);
                          if (_not) {
                            _builder_18.append(",");
                          }
                        }
                      }
                    }
                    _builder_18.append(")");
                    return _builder_18.toString();
                  } else {
                    StringConcatenation _builder_19 = new StringConcatenation();
                    return _builder_19.toString();
                  }
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public CharSequence compileScript(final Resource resource, final String name, final String type_env) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#!/bin/bash");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if [ $# -eq 0 ]");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("then");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("echo \"No arguments supplied. ./aws_deploy.sh <function_name> <generated_function_name>\"");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("exit 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("filename=$1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("name=$2");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \'{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"Version\": \"2012-10-17\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"Statement\": [");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"Effect\": \"Allow\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"Action\": [");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"sqs:DeleteMessage\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"sqs:GetQueueAttributes\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"sqs:ReceiveMessage\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"sqs:SendMessage\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"sqs:*\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("],");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"Resource\": \"*\" ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"Effect\": \"Allow\",");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"Action\": [");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"s3:*\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("],");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"Resource\": \"*\" ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"Effect\":\"Allow\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"Action\": [");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"logs:CreateLogGroup\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"logs:CreateLogStream\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"logs:PutLogEvents\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("],");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"Resource\": \"*\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\' > policyDocument.json");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \'{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"Version\": \"2012-10-17\",");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"Statement\": [");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"Effect\": \"Allow\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"Principal\": {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("\"Service\": \"lambda.amazonaws.com\"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("\"Action\": \"sts:AssumeRole\" ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}\' > rolePolicyDocument.json");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#create role policy");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"creation of role lambda-sqs-execution ...\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("role_arn=$(aws iam get-role --role-name lambda-sqs-execution --query \'Role.Arn\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if [ $? -eq 255 ]; then ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("role_arn=$(aws iam create-role --role-name lambda-sqs-execution --assume-role-policy-document file://rolePolicyDocument.json --output json --query \'Role.Arn\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"role lambda-sqs-execution created at ARN \"$role_arn");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aws iam put-role-policy --role-name lambda-sqs-execution --policy-name lambda-sqs-policy --policy-document file://policyDocument.json");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("mkdir ${name}_lambda");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cp src-gen/${filename}.js ./${name}_lambda");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cd ${name}_lambda");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"npm init...\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("npm init -y");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if [ $? -eq 0 ]; then");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("echo \"...\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("echo \"npm init failed\"");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("exit 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \" npm instal aws-sdk \"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("npm install aws-sdk");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if [ $? -eq 0 ]; then");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("echo \"...\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("echo \"npm install aws-sdk failed\"");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("exit 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"npm install async\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("npm install async");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if [ $? -eq 0 ]; then");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("echo \"...\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("echo \"npm install async failed\"");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("exit 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"npm install dataframe-js\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("npm install dataframe-js");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if [ $? -eq 0 ]; then");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("echo \"...\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("echo \"npm install dataframe-js failed\"");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("exit 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"Checking that aws-cli is installed\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("which aws");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if [ $? -eq 0 ]; then");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("echo \"aws-cli is installed, continuing...\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("echo \"You need aws-cli to deploy this lambda. Google \'aws-cli install\'\"");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("exit 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"creating .zip file\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("zip -r -q ../${name}_lambda.zip . ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cd .. ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#create the lambda function");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"creation of the lambda function\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aws lambda create-function --function-name ${name} --zip-file fileb://${name}_lambda.zip --handler ${filename}.handler --runtime nodejs8.10 --role ${role_arn:1:-1} --memory-size 3008 --timeout 300");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while [ $? -ne 0 ]; do");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("aws lambda create-function --function-name ${name} --zip-file fileb://${name}_lambda.zip --handler ${filename}.handler --runtime nodejs8.10 --role ${role_arn:1:-1} --memory-size 3008 --timeout 300");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("done");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"lambda function created\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#craete sqs input queue");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"create input queue\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \'{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"VisibilityTimeout\" : \"1800\",");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"MessageRetentionPeriod\" : \"3600\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\' > queue_input.json");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create_queue=$(aws sqs create-queue --queue-name __input_${name}_queue --attributes file://queue_input.json --output json --query \'QueueUrl\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"input queue created at arn: \" ${create_queue:1:-1}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#get queue attribute");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"get attributes for input queue\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("queue_attributes=$(aws sqs get-queue-attributes --queue-url ${create_queue:1:-1} --attribute-names QueueArn --output json --query \'Attributes.QueueArn\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo ${queue_attributes:1:-1}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aws lambda add-permission --function-name ${name} --source-arn ${queue_attributes:1:-1}  --statement-id allow_sqs_to_call_lambda1 \\");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("--action lambda:CraeteEventSourceMapping  --principal sqs.amazonaws.com");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aws lambda add-permission --function-name ${name} --source-arn ${queue_attributes:1:-1}  --statement-id allow_sqs_to_call_lambda2 \\");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("--action lambda:ListEventSourceMapping --principal sqs.amazonaws.com");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aws lambda add-permission --function-name ${name} --source-arn ${queue_attributes:1:-1}  --statement-id allow_sqs_to_call_lambda3 \\");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("--action lambda:ListFunction --principal sqs.amazonaws.com");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"lambda permission added\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#create event source mapping");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"create event source mapping\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("aws lambda create-event-source-mapping --event-source-arn ${queue_attributes:1:-1} --function-name ${name} --batch-size 1 --enabled");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("echo \"event source mapping created\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("# clear ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rm -r ${name}_lambda/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rm ${name}_lambda.zip");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rm rolePolicyDocument.json");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rm policyDocument.json");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rm queue_input.json");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
