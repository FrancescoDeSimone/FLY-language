/**
 * generated by Xtext 2.13.0
 */
package org.xtext.scoping;

import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.fLY.BlockExpression;
import org.xtext.fLY.ChannelDeclaration;
import org.xtext.fLY.DatDeclaration;
import org.xtext.fLY.Expression;
import org.xtext.fLY.Fly;
import org.xtext.fLY.ForExpression;
import org.xtext.fLY.FunctionDefinition;
import org.xtext.fLY.RandomDeclaration;
import org.xtext.fLY.VariableDeclaration;
import org.xtext.fLY.VariableFor;
import org.xtext.scoping.AbstractFLYScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class FLYScopeProvider extends AbstractFLYScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    final Object pBlock = this.getParentBlock(context);
    if ((pBlock instanceof BlockExpression)) {
      return this.generateScopeForBlock(((BlockExpression)pBlock));
    }
    return super.getScope(context, reference);
  }
  
  public IScope generateScopeForBlock(final BlockExpression expression) {
    final IScope parentScope = this.getParentScope(expression);
    final ArrayList<VariableDeclaration> element = CollectionLiterals.<VariableDeclaration>newArrayList();
    EList<Expression> _expressions = expression.getExpressions();
    for (final Expression el : _expressions) {
      {
        if ((el instanceof VariableDeclaration)) {
          element.add(((VariableDeclaration)el));
        }
        if ((el instanceof DatDeclaration)) {
          element.add(((VariableDeclaration)el));
        }
        if ((el instanceof RandomDeclaration)) {
          element.add(((VariableDeclaration)el));
        }
        if ((el instanceof ChannelDeclaration)) {
          element.add(((VariableDeclaration)el));
        }
      }
    }
    return Scopes.scopeFor(element, parentScope);
  }
  
  public IScope getParentScope(final EObject exp) {
    final EObject parent = exp.eContainer();
    if ((parent instanceof BlockExpression)) {
      return this.generateScopeForBlock(((BlockExpression)parent));
    }
    if ((parent instanceof Fly)) {
      return Scopes.scopeFor(this.getVariableDeclarations(exp));
    }
    if ((parent instanceof ForExpression)) {
      final IScope parentScope = this.getParentScope(parent);
      final ArrayList<VariableFor> elements = CollectionLiterals.<VariableFor>newArrayList(((ForExpression)parent).getIndex());
      return Scopes.scopeFor(elements, parentScope);
    }
    if ((parent instanceof FunctionDefinition)) {
      final ArrayList<Expression> elements_1 = CollectionLiterals.<Expression>newArrayList();
      final EList<Expression> allElements = EcoreUtil2.<Fly>getContainerOfType(exp, Fly.class).getElements();
      final Function1<Expression, Boolean> _function = (Expression it) -> {
        return Boolean.valueOf(EcoreUtil.isAncestor(it, exp));
      };
      final Expression containingElement = IterableExtensions.<Expression>findFirst(allElements, _function);
      List<ChannelDeclaration> _typeSelect = EcoreUtil2.<ChannelDeclaration>typeSelect(allElements.subList(0, allElements.indexOf(containingElement)), 
        ChannelDeclaration.class);
      for (final ChannelDeclaration element : _typeSelect) {
        elements_1.add(element);
      }
      EList<Expression> _parameters = ((FunctionDefinition)parent).getParameters();
      for (final Expression el : _parameters) {
        elements_1.add(el);
      }
      return Scopes.scopeFor(elements_1);
    }
    final IScope parentScopes = this.getParentScope(parent);
    final ArrayList<EObject> elements_2 = CollectionLiterals.<EObject>newArrayList();
    return Scopes.scopeFor(elements_2, parentScopes);
  }
  
  public List<EObject> getVariableDeclarations(final EObject exp) {
    final EList<Expression> allElements = EcoreUtil2.<Fly>getContainerOfType(exp, Fly.class).getElements();
    final Function1<Expression, Boolean> _function = (Expression it) -> {
      return Boolean.valueOf(EcoreUtil.isAncestor(it, exp));
    };
    final Expression containingElement = IterableExtensions.<Expression>findFirst(allElements, _function);
    int _indexOf = allElements.indexOf(containingElement);
    String _plus = (Integer.valueOf(_indexOf) + " ----- ");
    String _plus_1 = (_plus + containingElement);
    String _plus_2 = (_plus_1 + " ------- ");
    String _plus_3 = (_plus_2 + exp);
    InputOutput.<String>println(_plus_3);
    final ArrayList<EObject> declaration = CollectionLiterals.<EObject>newArrayList();
    int _indexOf_1 = allElements.indexOf(containingElement);
    int _plus_4 = (_indexOf_1 + 1);
    List<VariableDeclaration> _typeSelect = EcoreUtil2.<VariableDeclaration>typeSelect(allElements.subList(0, _plus_4), 
      VariableDeclaration.class);
    for (final VariableDeclaration element : _typeSelect) {
      declaration.add(element);
    }
    int _indexOf_2 = allElements.indexOf(containingElement);
    int _plus_5 = (_indexOf_2 + 1);
    List<ChannelDeclaration> _typeSelect_1 = EcoreUtil2.<ChannelDeclaration>typeSelect(allElements.subList(0, _plus_5), 
      ChannelDeclaration.class);
    for (final ChannelDeclaration element_1 : _typeSelect_1) {
      declaration.add(element_1);
    }
    int _indexOf_3 = allElements.indexOf(containingElement);
    int _plus_6 = (_indexOf_3 + 1);
    List<FunctionDefinition> _typeSelect_2 = EcoreUtil2.<FunctionDefinition>typeSelect(allElements.subList(0, _plus_6), 
      FunctionDefinition.class);
    for (final FunctionDefinition element_2 : _typeSelect_2) {
      declaration.add(element_2);
    }
    return declaration;
  }
  
  public Object getParentBlock(final EObject exp) {
    Object _xblockexpression = null;
    {
      if (((exp instanceof BlockExpression) || (exp instanceof Fly))) {
        return exp;
      }
      final EObject parent = exp.eContainer();
      Object _xifexpression = null;
      if (((parent instanceof BlockExpression) || (parent instanceof Fly))) {
        return parent;
      } else {
        _xifexpression = this.getParentBlock(parent);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
}
