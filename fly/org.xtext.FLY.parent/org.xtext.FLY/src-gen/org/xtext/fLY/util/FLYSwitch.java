/**
 * generated by Xtext 2.15.0
 */
package org.xtext.fLY.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.fLY.ArithmeticExpression;
import org.xtext.fLY.Assignment;
import org.xtext.fLY.AtomicExpression;
import org.xtext.fLY.BinDeclaration;
import org.xtext.fLY.BinaryOperation;
import org.xtext.fLY.BlockExpression;
import org.xtext.fLY.BooleanLiteral;
import org.xtext.fLY.CastExpression;
import org.xtext.fLY.ChannelDeclaration;
import org.xtext.fLY.ChannelReceive;
import org.xtext.fLY.ChannelSend;
import org.xtext.fLY.DatDeclaration;
import org.xtext.fLY.DatSingleObject;
import org.xtext.fLY.DatTableObject;
import org.xtext.fLY.DeclarationFeature;
import org.xtext.fLY.DeclarationObject;
import org.xtext.fLY.EnvironmentDeclaration;
import org.xtext.fLY.Expression;
import org.xtext.fLY.FLYPackage;
import org.xtext.fLY.FeautureName;
import org.xtext.fLY.FloatLiteral;
import org.xtext.fLY.Fly;
import org.xtext.fLY.FlyFunctionCall;
import org.xtext.fLY.ForExpression;
import org.xtext.fLY.FunctionDefinition;
import org.xtext.fLY.FunctionInput;
import org.xtext.fLY.FunctionReturn;
import org.xtext.fLY.IfExpression;
import org.xtext.fLY.IndexObject;
import org.xtext.fLY.LocalFunctionCall;
import org.xtext.fLY.LocalFunctionInput;
import org.xtext.fLY.MathFunction;
import org.xtext.fLY.NameObject;
import org.xtext.fLY.NameObjectDef;
import org.xtext.fLY.NumberLiteral;
import org.xtext.fLY.ObjectLiteral;
import org.xtext.fLY.OptimizerDeclaration;
import org.xtext.fLY.ParenthesizedExpression;
import org.xtext.fLY.PostfixOperation;
import org.xtext.fLY.PrintExpression;
import org.xtext.fLY.RandomDeclaration;
import org.xtext.fLY.RangeLiteral;
import org.xtext.fLY.SortExpression;
import org.xtext.fLY.StringLiteral;
import org.xtext.fLY.TimeFunction;
import org.xtext.fLY.UnaryOperation;
import org.xtext.fLY.VariableDeclaration;
import org.xtext.fLY.VariableFor;
import org.xtext.fLY.VariableFunction;
import org.xtext.fLY.VariableLiteral;
import org.xtext.fLY.WhileExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.fLY.FLYPackage
 * @generated
 */
public class FLYSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FLYPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FLYSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = FLYPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @parameter ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case FLYPackage.FLY:
      {
        Fly fly = (Fly)theEObject;
        T result = caseFly(fly);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.ATOMIC_EXPRESSION:
      {
        AtomicExpression atomicExpression = (AtomicExpression)theEObject;
        T result = caseAtomicExpression(atomicExpression);
        if (result == null) result = caseExpression(atomicExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.SORT_EXPRESSION:
      {
        SortExpression sortExpression = (SortExpression)theEObject;
        T result = caseSortExpression(sortExpression);
        if (result == null) result = caseExpression(sortExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseExpression(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.PRINT_EXPRESSION:
      {
        PrintExpression printExpression = (PrintExpression)theEObject;
        T result = casePrintExpression(printExpression);
        if (result == null) result = caseExpression(printExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.IF_EXPRESSION:
      {
        IfExpression ifExpression = (IfExpression)theEObject;
        T result = caseIfExpression(ifExpression);
        if (result == null) result = caseExpression(ifExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.FOR_EXPRESSION:
      {
        ForExpression forExpression = (ForExpression)theEObject;
        T result = caseForExpression(forExpression);
        if (result == null) result = caseExpression(forExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.VARIABLE_FOR:
      {
        VariableFor variableFor = (VariableFor)theEObject;
        T result = caseVariableFor(variableFor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.WHILE_EXPRESSION:
      {
        WhileExpression whileExpression = (WhileExpression)theEObject;
        T result = caseWhileExpression(whileExpression);
        if (result == null) result = caseExpression(whileExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.BLOCK_EXPRESSION:
      {
        BlockExpression blockExpression = (BlockExpression)theEObject;
        T result = caseBlockExpression(blockExpression);
        if (result == null) result = caseExpression(blockExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.VARIABLE_DECLARATION:
      {
        VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
        T result = caseVariableDeclaration(variableDeclaration);
        if (result == null) result = caseExpression(variableDeclaration);
        if (result == null) result = caseVariableFor(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.OBJECT:
      {
        org.xtext.fLY.Object object = (org.xtext.fLY.Object)theEObject;
        T result = caseObject(object);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.DECLARATION_OBJECT:
      {
        DeclarationObject declarationObject = (DeclarationObject)theEObject;
        T result = caseDeclarationObject(declarationObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.DECLARATION_FEATURE:
      {
        DeclarationFeature declarationFeature = (DeclarationFeature)theEObject;
        T result = caseDeclarationFeature(declarationFeature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.FEAUTURE_NAME:
      {
        FeautureName feautureName = (FeautureName)theEObject;
        T result = caseFeautureName(feautureName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.OBJECT_LITERAL:
      {
        ObjectLiteral objectLiteral = (ObjectLiteral)theEObject;
        T result = caseObjectLiteral(objectLiteral);
        if (result == null) result = caseArithmeticExpression(objectLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.RANGE_LITERAL:
      {
        RangeLiteral rangeLiteral = (RangeLiteral)theEObject;
        T result = caseRangeLiteral(rangeLiteral);
        if (result == null) result = caseArithmeticExpression(rangeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.MATH_FUNCTION:
      {
        MathFunction mathFunction = (MathFunction)theEObject;
        T result = caseMathFunction(mathFunction);
        if (result == null) result = caseArithmeticExpression(mathFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.VARIABLE_FUNCTION:
      {
        VariableFunction variableFunction = (VariableFunction)theEObject;
        T result = caseVariableFunction(variableFunction);
        if (result == null) result = caseExpression(variableFunction);
        if (result == null) result = caseArithmeticExpression(variableFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.FUNCTION_RETURN:
      {
        FunctionReturn functionReturn = (FunctionReturn)theEObject;
        T result = caseFunctionReturn(functionReturn);
        if (result == null) result = caseExpression(functionReturn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.FUNCTION_DEFINITION:
      {
        FunctionDefinition functionDefinition = (FunctionDefinition)theEObject;
        T result = caseFunctionDefinition(functionDefinition);
        if (result == null) result = caseExpression(functionDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.CHANNEL_SEND:
      {
        ChannelSend channelSend = (ChannelSend)theEObject;
        T result = caseChannelSend(channelSend);
        if (result == null) result = caseExpression(channelSend);
        if (result == null) result = caseArithmeticExpression(channelSend);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.CHANNEL_RECEIVE:
      {
        ChannelReceive channelReceive = (ChannelReceive)theEObject;
        T result = caseChannelReceive(channelReceive);
        if (result == null) result = caseExpression(channelReceive);
        if (result == null) result = caseArithmeticExpression(channelReceive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.LOCAL_FUNCTION_CALL:
      {
        LocalFunctionCall localFunctionCall = (LocalFunctionCall)theEObject;
        T result = caseLocalFunctionCall(localFunctionCall);
        if (result == null) result = caseExpression(localFunctionCall);
        if (result == null) result = caseArithmeticExpression(localFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.LOCAL_FUNCTION_INPUT:
      {
        LocalFunctionInput localFunctionInput = (LocalFunctionInput)theEObject;
        T result = caseLocalFunctionInput(localFunctionInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.FLY_FUNCTION_CALL:
      {
        FlyFunctionCall flyFunctionCall = (FlyFunctionCall)theEObject;
        T result = caseFlyFunctionCall(flyFunctionCall);
        if (result == null) result = caseExpression(flyFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.FUNCTION_INPUT:
      {
        FunctionInput functionInput = (FunctionInput)theEObject;
        T result = caseFunctionInput(functionInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.ARITHMETIC_EXPRESSION:
      {
        ArithmeticExpression arithmeticExpression = (ArithmeticExpression)theEObject;
        T result = caseArithmeticExpression(arithmeticExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.DAT_DECLARATION:
      {
        DatDeclaration datDeclaration = (DatDeclaration)theEObject;
        T result = caseDatDeclaration(datDeclaration);
        if (result == null) result = caseVariableDeclaration(datDeclaration);
        if (result == null) result = caseExpression(datDeclaration);
        if (result == null) result = caseVariableFor(datDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.RANDOM_DECLARATION:
      {
        RandomDeclaration randomDeclaration = (RandomDeclaration)theEObject;
        T result = caseRandomDeclaration(randomDeclaration);
        if (result == null) result = caseVariableDeclaration(randomDeclaration);
        if (result == null) result = caseExpression(randomDeclaration);
        if (result == null) result = caseVariableFor(randomDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.ENVIRONMENT_DECLARATION:
      {
        EnvironmentDeclaration environmentDeclaration = (EnvironmentDeclaration)theEObject;
        T result = caseEnvironmentDeclaration(environmentDeclaration);
        if (result == null) result = caseVariableDeclaration(environmentDeclaration);
        if (result == null) result = caseExpression(environmentDeclaration);
        if (result == null) result = caseVariableFor(environmentDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.BIN_DECLARATION:
      {
        BinDeclaration binDeclaration = (BinDeclaration)theEObject;
        T result = caseBinDeclaration(binDeclaration);
        if (result == null) result = caseVariableDeclaration(binDeclaration);
        if (result == null) result = caseExpression(binDeclaration);
        if (result == null) result = caseVariableFor(binDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.OPTIMIZER_DECLARATION:
      {
        OptimizerDeclaration optimizerDeclaration = (OptimizerDeclaration)theEObject;
        T result = caseOptimizerDeclaration(optimizerDeclaration);
        if (result == null) result = caseVariableDeclaration(optimizerDeclaration);
        if (result == null) result = caseExpression(optimizerDeclaration);
        if (result == null) result = caseVariableFor(optimizerDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.CHANNEL_DECLARATION:
      {
        ChannelDeclaration channelDeclaration = (ChannelDeclaration)theEObject;
        T result = caseChannelDeclaration(channelDeclaration);
        if (result == null) result = caseVariableDeclaration(channelDeclaration);
        if (result == null) result = caseExpression(channelDeclaration);
        if (result == null) result = caseVariableFor(channelDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.NAME_OBJECT_DEF:
      {
        NameObjectDef nameObjectDef = (NameObjectDef)theEObject;
        T result = caseNameObjectDef(nameObjectDef);
        if (result == null) result = caseObject(nameObjectDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.NAME_OBJECT:
      {
        NameObject nameObject = (NameObject)theEObject;
        T result = caseNameObject(nameObject);
        if (result == null) result = caseObjectLiteral(nameObject);
        if (result == null) result = caseArithmeticExpression(nameObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.INDEX_OBJECT:
      {
        IndexObject indexObject = (IndexObject)theEObject;
        T result = caseIndexObject(indexObject);
        if (result == null) result = caseObjectLiteral(indexObject);
        if (result == null) result = caseArithmeticExpression(indexObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.DAT_SINGLE_OBJECT:
      {
        DatSingleObject datSingleObject = (DatSingleObject)theEObject;
        T result = caseDatSingleObject(datSingleObject);
        if (result == null) result = caseObjectLiteral(datSingleObject);
        if (result == null) result = caseArithmeticExpression(datSingleObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.DAT_TABLE_OBJECT:
      {
        DatTableObject datTableObject = (DatTableObject)theEObject;
        T result = caseDatTableObject(datTableObject);
        if (result == null) result = caseObjectLiteral(datTableObject);
        if (result == null) result = caseArithmeticExpression(datTableObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.BINARY_OPERATION:
      {
        BinaryOperation binaryOperation = (BinaryOperation)theEObject;
        T result = caseBinaryOperation(binaryOperation);
        if (result == null) result = caseArithmeticExpression(binaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.UNARY_OPERATION:
      {
        UnaryOperation unaryOperation = (UnaryOperation)theEObject;
        T result = caseUnaryOperation(unaryOperation);
        if (result == null) result = caseArithmeticExpression(unaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.CAST_EXPRESSION:
      {
        CastExpression castExpression = (CastExpression)theEObject;
        T result = caseCastExpression(castExpression);
        if (result == null) result = caseArithmeticExpression(castExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.POSTFIX_OPERATION:
      {
        PostfixOperation postfixOperation = (PostfixOperation)theEObject;
        T result = casePostfixOperation(postfixOperation);
        if (result == null) result = caseArithmeticExpression(postfixOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.TIME_FUNCTION:
      {
        TimeFunction timeFunction = (TimeFunction)theEObject;
        T result = caseTimeFunction(timeFunction);
        if (result == null) result = caseArithmeticExpression(timeFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.BOOLEAN_LITERAL:
      {
        BooleanLiteral booleanLiteral = (BooleanLiteral)theEObject;
        T result = caseBooleanLiteral(booleanLiteral);
        if (result == null) result = caseArithmeticExpression(booleanLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.NUMBER_LITERAL:
      {
        NumberLiteral numberLiteral = (NumberLiteral)theEObject;
        T result = caseNumberLiteral(numberLiteral);
        if (result == null) result = caseArithmeticExpression(numberLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = caseArithmeticExpression(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.FLOAT_LITERAL:
      {
        FloatLiteral floatLiteral = (FloatLiteral)theEObject;
        T result = caseFloatLiteral(floatLiteral);
        if (result == null) result = caseArithmeticExpression(floatLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.VARIABLE_LITERAL:
      {
        VariableLiteral variableLiteral = (VariableLiteral)theEObject;
        T result = caseVariableLiteral(variableLiteral);
        if (result == null) result = caseArithmeticExpression(variableLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FLYPackage.PARENTHESIZED_EXPRESSION:
      {
        ParenthesizedExpression parenthesizedExpression = (ParenthesizedExpression)theEObject;
        T result = caseParenthesizedExpression(parenthesizedExpression);
        if (result == null) result = caseArithmeticExpression(parenthesizedExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fly</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fly</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFly(Fly object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpression(AtomicExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sort Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sort Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSortExpression(SortExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintExpression(PrintExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExpression(IfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForExpression(ForExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable For</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable For</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableFor(VariableFor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>While Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>While Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhileExpression(WhileExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockExpression(BlockExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclaration(VariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObject(org.xtext.fLY.Object object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaration Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaration Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclarationObject(DeclarationObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaration Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaration Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclarationFeature(DeclarationFeature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feauture Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feauture Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeautureName(FeautureName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjectLiteral(ObjectLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRangeLiteral(RangeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathFunction(MathFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableFunction(VariableFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionReturn(FunctionReturn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDefinition(FunctionDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Send</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Send</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelSend(ChannelSend object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Receive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Receive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelReceive(ChannelReceive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalFunctionCall(LocalFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Function Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Function Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalFunctionInput(LocalFunctionInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fly Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fly Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlyFunctionCall(FlyFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionInput(FunctionInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticExpression(ArithmeticExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dat Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dat Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatDeclaration(DatDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Random Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Random Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRandomDeclaration(RandomDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Environment Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Environment Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnvironmentDeclaration(EnvironmentDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bin Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bin Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinDeclaration(BinDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Optimizer Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Optimizer Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptimizerDeclaration(OptimizerDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Channel Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Channel Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChannelDeclaration(ChannelDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name Object Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name Object Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNameObjectDef(NameObjectDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNameObject(NameObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexObject(IndexObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dat Single Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dat Single Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatSingleObject(DatSingleObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dat Table Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dat Table Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatTableObject(DatTableObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryOperation(BinaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryOperation(UnaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cast Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cast Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCastExpression(CastExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Postfix Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Postfix Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostfixOperation(PostfixOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeFunction(TimeFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteral(BooleanLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteral(NumberLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Float Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Float Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloatLiteral(FloatLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableLiteral(VariableLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parenthesized Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parenthesized Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParenthesizedExpression(ParenthesizedExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //FLYSwitch
