/**
 * generated by Xtext 2.15.0
 */
package org.xtext.fLY.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.fLY.ArithmeticExpression;
import org.xtext.fLY.FLYPackage;
import org.xtext.fLY.FunctionInput;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Function Input</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.fLY.impl.FunctionInputImpl#getExpressions <em>Expressions</em>}</li>
 *   <li>{@link org.xtext.fLY.impl.FunctionInputImpl#isIs_for_index <em>Is for index</em>}</li>
 *   <li>{@link org.xtext.fLY.impl.FunctionInputImpl#getF_index <em>Findex</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class FunctionInputImpl extends MinimalEObjectImpl.Container implements FunctionInput
{
  /**
   * The cached value of the '{@link #getExpressions() <em>Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressions()
   * @generated
   * @ordered
   */
  protected EList<ArithmeticExpression> expressions;

  /**
   * The default value of the '{@link #isIs_for_index() <em>Is for index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_for_index()
   * @generated
   * @ordered
   */
  protected static final boolean IS_FOR_INDEX_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_for_index() <em>Is for index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_for_index()
   * @generated
   * @ordered
   */
  protected boolean is_for_index = IS_FOR_INDEX_EDEFAULT;

  /**
   * The cached value of the '{@link #getF_index() <em>Findex</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getF_index()
   * @generated
   * @ordered
   */
  protected ArithmeticExpression f_index;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunctionInputImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FLYPackage.Literals.FUNCTION_INPUT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ArithmeticExpression> getExpressions()
  {
    if (expressions == null)
    {
      expressions = new EObjectContainmentEList<ArithmeticExpression>(ArithmeticExpression.class, this, FLYPackage.FUNCTION_INPUT__EXPRESSIONS);
    }
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_for_index()
  {
    return is_for_index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_for_index(boolean newIs_for_index)
  {
    boolean oldIs_for_index = is_for_index;
    is_for_index = newIs_for_index;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FLYPackage.FUNCTION_INPUT__IS_FOR_INDEX, oldIs_for_index, is_for_index));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticExpression getF_index()
  {
    return f_index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetF_index(ArithmeticExpression newF_index, NotificationChain msgs)
  {
    ArithmeticExpression oldF_index = f_index;
    f_index = newF_index;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FLYPackage.FUNCTION_INPUT__FINDEX, oldF_index, newF_index);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setF_index(ArithmeticExpression newF_index)
  {
    if (newF_index != f_index)
    {
      NotificationChain msgs = null;
      if (f_index != null)
        msgs = ((InternalEObject)f_index).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FLYPackage.FUNCTION_INPUT__FINDEX, null, msgs);
      if (newF_index != null)
        msgs = ((InternalEObject)newF_index).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FLYPackage.FUNCTION_INPUT__FINDEX, null, msgs);
      msgs = basicSetF_index(newF_index, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FLYPackage.FUNCTION_INPUT__FINDEX, newF_index, newF_index));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FLYPackage.FUNCTION_INPUT__EXPRESSIONS:
        return ((InternalEList<?>)getExpressions()).basicRemove(otherEnd, msgs);
      case FLYPackage.FUNCTION_INPUT__FINDEX:
        return basicSetF_index(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FLYPackage.FUNCTION_INPUT__EXPRESSIONS:
        return getExpressions();
      case FLYPackage.FUNCTION_INPUT__IS_FOR_INDEX:
        return isIs_for_index();
      case FLYPackage.FUNCTION_INPUT__FINDEX:
        return getF_index();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FLYPackage.FUNCTION_INPUT__EXPRESSIONS:
        getExpressions().clear();
        getExpressions().addAll((Collection<? extends ArithmeticExpression>)newValue);
        return;
      case FLYPackage.FUNCTION_INPUT__IS_FOR_INDEX:
        setIs_for_index((Boolean)newValue);
        return;
      case FLYPackage.FUNCTION_INPUT__FINDEX:
        setF_index((ArithmeticExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FLYPackage.FUNCTION_INPUT__EXPRESSIONS:
        getExpressions().clear();
        return;
      case FLYPackage.FUNCTION_INPUT__IS_FOR_INDEX:
        setIs_for_index(IS_FOR_INDEX_EDEFAULT);
        return;
      case FLYPackage.FUNCTION_INPUT__FINDEX:
        setF_index((ArithmeticExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FLYPackage.FUNCTION_INPUT__EXPRESSIONS:
        return expressions != null && !expressions.isEmpty();
      case FLYPackage.FUNCTION_INPUT__IS_FOR_INDEX:
        return is_for_index != IS_FOR_INDEX_EDEFAULT;
      case FLYPackage.FUNCTION_INPUT__FINDEX:
        return f_index != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (is_for_index: ");
    result.append(is_for_index);
    result.append(')');
    return result.toString();
  }

} //FunctionInputImpl
