/*
 * generated by Xtext 2.15.0
 */
grammar InternalFLY;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.FLYGrammarAccess;

}

@parser::members {

 	private FLYGrammarAccess grammarAccess;

    public InternalFLYParser(TokenStream input, FLYGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Fly";
   	}

   	@Override
   	protected FLYGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFly
entryRuleFly returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlyRule()); }
	iv_ruleFly=ruleFly
	{ $current=$iv_ruleFly.current; }
	EOF;

// Rule Fly
ruleFly returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFlyAccess().getElementsExpressionParserRuleCall_0());
			}
			lv_elements_0_0=ruleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFlyRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.FLY.Expression");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall_0());
		}
		this_Assignment_0=ruleAssignment
		{
			$current = $this_Assignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBlockExpressionParserRuleCall_1());
		}
		this_BlockExpression_1=ruleBlockExpression
		{
			$current = $this_BlockExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_2());
		}
		this_IfExpression_2=ruleIfExpression
		{
			$current = $this_IfExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getForExpressionParserRuleCall_3());
		}
		this_ForExpression_3=ruleForExpression
		{
			$current = $this_ForExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getWhileExpressionParserRuleCall_4());
		}
		this_WhileExpression_4=ruleWhileExpression
		{
			$current = $this_WhileExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPrintExpressionParserRuleCall_5());
		}
		this_PrintExpression_5=rulePrintExpression
		{
			$current = $this_PrintExpression_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFunctionDefinitionParserRuleCall_6());
		}
		this_FunctionDefinition_6=ruleFunctionDefinition
		{
			$current = $this_FunctionDefinition_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFunctionReturnParserRuleCall_7());
		}
		this_FunctionReturn_7=ruleFunctionReturn
		{
			$current = $this_FunctionReturn_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFlyFunctionCallParserRuleCall_8());
		}
		this_FlyFunctionCall_8=ruleFlyFunctionCall
		{
			$current = $this_FlyFunctionCall_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getVariableDeclarationParserRuleCall_9());
		}
		this_VariableDeclaration_9=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getChannelSendParserRuleCall_10());
		}
		this_ChannelSend_10=ruleChannelSend
		{
			$current = $this_ChannelSend_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getChannelReceiveParserRuleCall_11());
		}
		this_ChannelReceive_11=ruleChannelReceive
		{
			$current = $this_ChannelReceive_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getLocalFunctionCallParserRuleCall_12());
		}
		this_LocalFunctionCall_12=ruleLocalFunctionCall
		{
			$current = $this_LocalFunctionCall_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSortExpressionParserRuleCall_13());
		}
		this_SortExpression_13=ruleSortExpression
		{
			$current = $this_SortExpression_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAtomicExpressionParserRuleCall_14());
		}
		this_AtomicExpression_14=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getVariableFunctionParserRuleCall_15());
		}
		this_VariableFunction_15=ruleVariableFunction
		{
			$current = $this_VariableFunction_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='atomic'
		{
			newLeafNode(otherlv_0, grammarAccess.getAtomicExpressionAccess().getAtomicKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomicExpressionAccess().getExpressionsBlockExpressionParserRuleCall_1_0());
				}
				lv_expressions_1_0=ruleBlockExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
					}
					set(
						$current,
						"expressions",
						lv_expressions_1_0,
						"org.xtext.FLY.BlockExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSortExpression
entryRuleSortExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSortExpressionRule()); }
	iv_ruleSortExpression=ruleSortExpression
	{ $current=$iv_ruleSortExpression.current; }
	EOF;

// Rule SortExpression
ruleSortExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sort'
		{
			newLeafNode(otherlv_0, grammarAccess.getSortExpressionAccess().getSortKeyword_0());
		}
		(
			(
				(
					lv_type_1_1='asc'
					{
						newLeafNode(lv_type_1_1, grammarAccess.getSortExpressionAccess().getTypeAscKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSortExpressionRule());
						}
						setWithLastConsumed($current, "type", lv_type_1_1, null);
					}
					    |
					lv_type_1_2='desc'
					{
						newLeafNode(lv_type_1_2, grammarAccess.getSortExpressionAccess().getTypeDescKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSortExpressionRule());
						}
						setWithLastConsumed($current, "type", lv_type_1_2, null);
					}
				)
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSortExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getSortExpressionAccess().getTargetVariableDeclarationCrossReference_2_0());
				}
			)
		)
		otherlv_3='on'
		{
			newLeafNode(otherlv_3, grammarAccess.getSortExpressionAccess().getOnKeyword_3());
		}
		(
			(
				lv_taget_4_0=RULE_ID
				{
					newLeafNode(lv_taget_4_0, grammarAccess.getSortExpressionAccess().getTagetIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSortExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"taget",
						lv_taget_4_0,
						"org.xtext.FLY.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAssignmentAccess().getAssignmentAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getFeatureVariableLiteralParserRuleCall_0_1_0());
					}
					lv_feature_1_0=ruleVariableLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"feature",
							lv_feature_1_0,
							"org.xtext.FLY.VariableLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getOpOpAsParserRuleCall_0_2_0());
					}
					lv_op_2_0=ruleOpAs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.xtext.FLY.OpAs");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getValueArithmeticExpressionParserRuleCall_0_3_0());
					}
					lv_value_3_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"org.xtext.FLY.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAssignmentAccess().getAssignmentAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getFeature_objObjectLiteralParserRuleCall_1_1_0());
					}
					lv_feature_obj_5_0=ruleObjectLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"feature_obj",
							lv_feature_obj_5_0,
							"org.xtext.FLY.ObjectLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getOpOpAsParserRuleCall_1_2_0());
					}
					lv_op_6_0=ruleOpAs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"op",
							lv_op_6_0,
							"org.xtext.FLY.OpAs");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getValueArithmeticExpressionParserRuleCall_1_3_0());
					}
					lv_value_7_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"value",
							lv_value_7_0,
							"org.xtext.FLY.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleOpAs
entryRuleOpAs returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpAsRule()); }
	iv_ruleOpAs=ruleOpAs
	{ $current=$iv_ruleOpAs.current.getText(); }
	EOF;

// Rule OpAs
ruleOpAs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAsAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='+='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAsAccess().getPlusSignEqualsSignKeyword_1());
		}
	)
;

// Entry rule entryRulePrintExpression
entryRulePrintExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintExpressionRule()); }
	iv_rulePrintExpression=rulePrintExpression
	{ $current=$iv_rulePrintExpression.current; }
	EOF;

// Rule PrintExpression
rulePrintExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrintExpressionAccess().getPrintExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='println'
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintExpressionAccess().getPrintlnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintExpressionAccess().getPrintArithmeticExpressionParserRuleCall_2_0());
				}
				lv_print_2_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintExpressionRule());
					}
					set(
						$current,
						"print",
						lv_print_2_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	iv_ruleIfExpression=ruleIfExpression
	{ $current=$iv_ruleIfExpression.current; }
	EOF;

// Rule IfExpression
ruleIfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfExpressionAccess().getIfExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfExpressionAccess().getIfKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getCondArithmeticExpressionParserRuleCall_3_0());
				}
				lv_cond_3_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"cond",
						lv_cond_3_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_5_0());
				}
				lv_then_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"then",
						lv_then_5_0,
						"org.xtext.FLY.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_6='else'
				{
					newLeafNode(otherlv_6, grammarAccess.getIfExpressionAccess().getElseKeyword_6_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_6_1_0());
					}
					lv_else_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
						}
						set(
							$current,
							"else",
							lv_else_7_0,
							"org.xtext.FLY.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleForExpression
entryRuleForExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForExpressionRule()); }
	iv_ruleForExpression=ruleForExpression
	{ $current=$iv_ruleForExpression.current; }
	EOF;

// Rule ForExpression
ruleForExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForExpressionAccess().getForExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getForExpressionAccess().getForKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForExpressionAccess().getIndexVariableForParserRuleCall_2_0());
				}
				lv_index_2_0=ruleVariableFor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForExpressionRule());
					}
					set(
						$current,
						"index",
						lv_index_2_0,
						"org.xtext.FLY.VariableFor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='in'
		{
			newLeafNode(otherlv_3, grammarAccess.getForExpressionAccess().getInKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForExpressionAccess().getObjectArithmeticExpressionParserRuleCall_4_0());
				}
				lv_object_4_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForExpressionRule());
					}
					set(
						$current,
						"object",
						lv_object_4_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForExpressionAccess().getBodyExpressionParserRuleCall_5_0());
				}
				lv_body_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_5_0,
						"org.xtext.FLY.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableFor
entryRuleVariableFor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableForRule()); }
	iv_ruleVariableFor=ruleVariableFor
	{ $current=$iv_ruleVariableFor.current; }
	EOF;

// Rule VariableFor
ruleVariableFor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableForAccess().getVariableDeclarationAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableForAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableForRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.FLY.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleWhileExpression
entryRuleWhileExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileExpressionRule()); }
	iv_ruleWhileExpression=ruleWhileExpression
	{ $current=$iv_ruleWhileExpression.current; }
	EOF;

// Rule WhileExpression
ruleWhileExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileExpressionAccess().getWhileExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='while'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileExpressionAccess().getWhileKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileExpressionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileExpressionAccess().getCondArithmeticExpressionParserRuleCall_3_0());
				}
				lv_cond_3_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileExpressionRule());
					}
					set(
						$current,
						"cond",
						lv_cond_3_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileExpressionAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileExpressionAccess().getBodyExpressionParserRuleCall_5_0());
				}
				lv_body_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_5_0,
						"org.xtext.FLY.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlockExpression
entryRuleBlockExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockExpressionRule()); }
	iv_ruleBlockExpression=ruleBlockExpression
	{ $current=$iv_ruleBlockExpression.current; }
	EOF;

// Rule BlockExpression
ruleBlockExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockExpressionAccess().getExpressionsExpressionParserRuleCall_2_0());
				}
				lv_expressions_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockExpressionRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_2_0,
						"org.xtext.FLY.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_typeobject_1_0='var'
					{
						newLeafNode(lv_typeobject_1_0, grammarAccess.getVariableDeclarationAccess().getTypeobjectVarKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "typeobject", lv_typeobject_1_0, "var");
					}
				)
			)
			(
				((
					(
						(
							RULE_ID
						)
					)
					'='
					(
						(
							(
								ruleArithmeticExpression
							)
						)
						    |
						(
							(
								ruleObject
							)
						)
						    |
						(
							(
								ruleFlyFunctionCall
							)
						)
					)
				)
				)=>
				(
					(
						(
							lv_name_2_0=RULE_ID
							{
								newLeafNode(lv_name_2_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_2_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableDeclarationRule());
								}
								setWithLastConsumed(
									$current,
									"name",
									lv_name_2_0,
									"org.xtext.FLY.ID");
							}
						)
					)
					otherlv_3='='
					{
						newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_0_2_0_1());
					}
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getVariableDeclarationAccess().getRightArithmeticExpressionParserRuleCall_0_2_0_2_0_0());
								}
								lv_right_4_0=ruleArithmeticExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
									}
									set(
										$current,
										"right",
										lv_right_4_0,
										"org.xtext.FLY.ArithmeticExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
						    |
						(
							(
								{
									newCompositeNode(grammarAccess.getVariableDeclarationAccess().getRightObjectParserRuleCall_0_2_0_2_1_0());
								}
								lv_right_5_0=ruleObject
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
									}
									set(
										$current,
										"right",
										lv_right_5_0,
										"org.xtext.FLY.Object");
									afterParserOrEnumRuleCall();
								}
							)
						)
						    |
						(
							(
								{
									newCompositeNode(grammarAccess.getVariableDeclarationAccess().getRightFlyFunctionCallParserRuleCall_0_2_0_2_2_0());
								}
								lv_right_6_0=ruleFlyFunctionCall
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
									}
									set(
										$current,
										"right",
										lv_right_6_0,
										"org.xtext.FLY.FlyFunctionCall");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getVariableDeclarationAccess().getDatDeclarationAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_typeobject_8_0='dat'
					{
						newLeafNode(lv_typeobject_8_0, grammarAccess.getVariableDeclarationAccess().getTypeobjectDatKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "typeobject", lv_typeobject_8_0, "dat");
					}
				)
			)
			(
				((
					(
						(
							RULE_ID
						)
					)
					'='
					(
						(
							(
								ruleArithmeticExpression
							)
						)
						    |
						(
							(
								ruleObject
							)
						)
					)
				)
				)=>
				(
					(
						(
							lv_name_9_0=RULE_ID
							{
								newLeafNode(lv_name_9_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_2_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableDeclarationRule());
								}
								setWithLastConsumed(
									$current,
									"name",
									lv_name_9_0,
									"org.xtext.FLY.ID");
							}
						)
					)
					otherlv_10='='
					{
						newLeafNode(otherlv_10, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1_2_0_1());
					}
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getVariableDeclarationAccess().getRightArithmeticExpressionParserRuleCall_1_2_0_2_0_0());
								}
								lv_right_11_0=ruleArithmeticExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
									}
									set(
										$current,
										"right",
										lv_right_11_0,
										"org.xtext.FLY.ArithmeticExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
						    |
						(
							(
								{
									newCompositeNode(grammarAccess.getVariableDeclarationAccess().getRightObjectParserRuleCall_1_2_0_2_1_0());
								}
								lv_right_12_0=ruleObject
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
									}
									set(
										$current,
										"right",
										lv_right_12_0,
										"org.xtext.FLY.Object");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getVariableDeclarationAccess().getRandomDeclarationAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_typeobject_14_0='random'
					{
						newLeafNode(lv_typeobject_14_0, grammarAccess.getVariableDeclarationAccess().getTypeobjectRandomKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "typeobject", lv_typeobject_14_0, "random");
					}
				)
			)
			(
				((
					(
						RULE_ID
					)
				)
				)=>
				(
					(
						lv_name_15_0=RULE_ID
						{
							newLeafNode(lv_name_15_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableDeclarationRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_15_0,
								"org.xtext.FLY.ID");
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getVariableDeclarationAccess().getEnvironmentDeclarationAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_typeobject_17_0='env'
					{
						newLeafNode(lv_typeobject_17_0, grammarAccess.getVariableDeclarationAccess().getTypeobjectEnvKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "typeobject", lv_typeobject_17_0, "env");
					}
				)
			)
			(
				((
					(
						(
							RULE_ID
						)
					)
					'='
					(
						(
							ruleDeclarationObject
						)
					)
				)
				)=>
				(
					(
						(
							lv_name_18_0=RULE_ID
							{
								newLeafNode(lv_name_18_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_3_2_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableDeclarationRule());
								}
								setWithLastConsumed(
									$current,
									"name",
									lv_name_18_0,
									"org.xtext.FLY.ID");
							}
						)
					)
					otherlv_19='='
					{
						newLeafNode(otherlv_19, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_2_0_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableDeclarationAccess().getRightDeclarationObjectParserRuleCall_3_2_0_2_0());
							}
							lv_right_20_0=ruleDeclarationObject
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
								}
								set(
									$current,
									"right",
									lv_right_20_0,
									"org.xtext.FLY.DeclarationObject");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getVariableDeclarationAccess().getBinDeclarationAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_typeobject_22_0='bin'
					{
						newLeafNode(lv_typeobject_22_0, grammarAccess.getVariableDeclarationAccess().getTypeobjectBinKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "typeobject", lv_typeobject_22_0, "bin");
					}
				)
			)
			(
				((
					(
						(
							RULE_ID
						)
					)
					'='
					(
						(
							ruleDeclarationObject
						)
					)
				)
				)=>
				(
					(
						(
							lv_name_23_0=RULE_ID
							{
								newLeafNode(lv_name_23_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_4_2_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableDeclarationRule());
								}
								setWithLastConsumed(
									$current,
									"name",
									lv_name_23_0,
									"org.xtext.FLY.ID");
							}
						)
					)
					otherlv_24='='
					{
						newLeafNode(otherlv_24, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_4_2_0_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableDeclarationAccess().getRightDeclarationObjectParserRuleCall_4_2_0_2_0());
							}
							lv_right_25_0=ruleDeclarationObject
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
								}
								set(
									$current,
									"right",
									lv_right_25_0,
									"org.xtext.FLY.DeclarationObject");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getVariableDeclarationAccess().getOptimizerDeclarationAction_5_0(),
						$current);
				}
			)
			(
				(
					lv_typeobject_27_0='opt'
					{
						newLeafNode(lv_typeobject_27_0, grammarAccess.getVariableDeclarationAccess().getTypeobjectOptKeyword_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "typeobject", lv_typeobject_27_0, "opt");
					}
				)
			)
			(
				((
					(
						(
							RULE_ID
						)
					)
					'='
					(
						(
							ruleDeclarationObject
						)
					)
				)
				)=>
				(
					(
						(
							lv_name_28_0=RULE_ID
							{
								newLeafNode(lv_name_28_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_5_2_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableDeclarationRule());
								}
								setWithLastConsumed(
									$current,
									"name",
									lv_name_28_0,
									"org.xtext.FLY.ID");
							}
						)
					)
					otherlv_29='='
					{
						newLeafNode(otherlv_29, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_5_2_0_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableDeclarationAccess().getRightDeclarationObjectParserRuleCall_5_2_0_2_0());
							}
							lv_right_30_0=ruleDeclarationObject
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
								}
								set(
									$current,
									"right",
									lv_right_30_0,
									"org.xtext.FLY.DeclarationObject");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getVariableDeclarationAccess().getChannelDeclarationAction_6_0(),
						$current);
				}
			)
			(
				(
					lv_typeobject_32_0='channel'
					{
						newLeafNode(lv_typeobject_32_0, grammarAccess.getVariableDeclarationAccess().getTypeobjectChannelKeyword_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "typeobject", lv_typeobject_32_0, "channel");
					}
				)
			)
			(
				((
					(
						(
							RULE_ID
						)
					)
					'on'
					(
						(
							RULE_ID
						)
					)
				)
				)=>
				(
					(
						(
							lv_name_33_0=RULE_ID
							{
								newLeafNode(lv_name_33_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_6_2_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableDeclarationRule());
								}
								setWithLastConsumed(
									$current,
									"name",
									lv_name_33_0,
									"org.xtext.FLY.ID");
							}
						)
					)
					otherlv_34='on'
					{
						newLeafNode(otherlv_34, grammarAccess.getVariableDeclarationAccess().getOnKeyword_6_2_0_1());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableDeclarationRule());
								}
							}
							otherlv_35=RULE_ID
							{
								newLeafNode(otherlv_35, grammarAccess.getVariableDeclarationAccess().getEnvironmentEnvironmentDeclarationCrossReference_6_2_0_2_0());
							}
						)
					)
				)
			)
		)
	)
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObjectAccess().getNameObjectDefAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectAccess().getFeaturesFeautureNameParserRuleCall_2_0());
				}
				lv_features_2_0=ruleFeautureName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectRule());
					}
					add(
						$current,
						"features",
						lv_features_2_0,
						"org.xtext.FLY.FeautureName");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getObjectAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectAccess().getFeaturesFeautureNameParserRuleCall_3_1_0());
					}
					lv_features_4_0=ruleFeautureName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectRule());
						}
						add(
							$current,
							"features",
							lv_features_4_0,
							"org.xtext.FLY.FeautureName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getObjectAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDeclarationObject
entryRuleDeclarationObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationObjectRule()); }
	iv_ruleDeclarationObject=ruleDeclarationObject
	{ $current=$iv_ruleDeclarationObject.current; }
	EOF;

// Rule DeclarationObject
ruleDeclarationObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDeclarationObjectAccess().getDeclarationObjectAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getDeclarationObjectAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationObjectAccess().getFeaturesDeclarationFeatureParserRuleCall_2_0());
				}
				lv_features_2_0=ruleDeclarationFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationObjectRule());
					}
					add(
						$current,
						"features",
						lv_features_2_0,
						"org.xtext.FLY.DeclarationFeature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getDeclarationObjectAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclarationObjectAccess().getFeaturesDeclarationFeatureParserRuleCall_3_1_0());
					}
					lv_features_4_0=ruleDeclarationFeature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclarationObjectRule());
						}
						add(
							$current,
							"features",
							lv_features_4_0,
							"org.xtext.FLY.DeclarationFeature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getDeclarationObjectAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDeclarationFeature
entryRuleDeclarationFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationFeatureRule()); }
	iv_ruleDeclarationFeature=ruleDeclarationFeature
	{ $current=$iv_ruleDeclarationFeature.current; }
	EOF;

// Rule DeclarationFeature
ruleDeclarationFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDeclarationFeatureAccess().getDeclarationFeatureAction_0(),
					$current);
			}
		)
		(
			(
				lv_feature_1_0=RULE_ID
				{
					newLeafNode(lv_feature_1_0, grammarAccess.getDeclarationFeatureAccess().getFeatureIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeclarationFeatureRule());
					}
					setWithLastConsumed(
						$current,
						"feature",
						lv_feature_1_0,
						"org.xtext.FLY.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDeclarationFeatureAccess().getColonKeyword_2());
		}
		(
			(
				(
					lv_value_f_3_0=RULE_ID
					{
						newLeafNode(lv_value_f_3_0, grammarAccess.getDeclarationFeatureAccess().getValue_fIDTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDeclarationFeatureRule());
						}
						setWithLastConsumed(
							$current,
							"value_f",
							lv_value_f_3_0,
							"org.xtext.FLY.ID");
					}
				)
			)
			    |
			(
				(
					lv_value_s_4_0=RULE_STRING
					{
						newLeafNode(lv_value_s_4_0, grammarAccess.getDeclarationFeatureAccess().getValue_sSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDeclarationFeatureRule());
						}
						setWithLastConsumed(
							$current,
							"value_s",
							lv_value_s_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				(
					lv_value_t_5_0=RULE_INT
					{
						newLeafNode(lv_value_t_5_0, grammarAccess.getDeclarationFeatureAccess().getValue_tINTTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDeclarationFeatureRule());
						}
						setWithLastConsumed(
							$current,
							"value_t",
							lv_value_t_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclarationFeatureAccess().getValue_bBooleanLiteralParserRuleCall_3_3_0());
					}
					lv_value_b_6_0=ruleBooleanLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclarationFeatureRule());
						}
						set(
							$current,
							"value_b",
							lv_value_b_6_0,
							"org.xtext.FLY.BooleanLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFeautureName
entryRuleFeautureName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeautureNameRule()); }
	iv_ruleFeautureName=ruleFeautureName
	{ $current=$iv_ruleFeautureName.current; }
	EOF;

// Rule FeautureName
ruleFeautureName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_feature_0_0=RULE_ID
					{
						newLeafNode(lv_feature_0_0, grammarAccess.getFeautureNameAccess().getFeatureIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFeautureNameRule());
						}
						setWithLastConsumed(
							$current,
							"feature",
							lv_feature_0_0,
							"org.xtext.FLY.ID");
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getFeautureNameAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFeautureNameAccess().getValueArithmeticExpressionParserRuleCall_0_2_0());
					}
					lv_value_2_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeautureNameRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"org.xtext.FLY.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFeautureNameAccess().getValueArithmeticExpressionParserRuleCall_1_0());
				}
				lv_value_3_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeautureNameRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleObjectLiteral
entryRuleObjectLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectLiteralRule()); }
	iv_ruleObjectLiteral=ruleObjectLiteral
	{ $current=$iv_ruleObjectLiteral.current; }
	EOF;

// Rule ObjectLiteral
ruleObjectLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getObjectLiteralAccess().getNameObjectAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectLiteralRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getNameVariableDeclarationCrossReference_0_1_0());
					}
				)
			)
			(
				((
					'.'
					(
						(
							RULE_ID
						)
					)
				)
				)=>
				(
					otherlv_2='.'
					{
						newLeafNode(otherlv_2, grammarAccess.getObjectLiteralAccess().getFullStopKeyword_0_2_0_0());
					}
					(
						(
							lv_value_3_0=RULE_ID
							{
								newLeafNode(lv_value_3_0, grammarAccess.getObjectLiteralAccess().getValueIDTerminalRuleCall_0_2_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getObjectLiteralRule());
								}
								setWithLastConsumed(
									$current,
									"value",
									lv_value_3_0,
									"org.xtext.FLY.ID");
							}
						)
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getObjectLiteralAccess().getIndexObjectAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectLiteralRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getNameVariableDeclarationCrossReference_1_1_0());
					}
				)
			)
			(
				((
					'['
					(
						(
							RULE_INT
						)
					)
					']'
				)
				)=>
				(
					otherlv_6='['
					{
						newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getLeftSquareBracketKeyword_1_2_0_0());
					}
					(
						(
							lv_valuet_7_0=RULE_INT
							{
								newLeafNode(lv_valuet_7_0, grammarAccess.getObjectLiteralAccess().getValuetINTTerminalRuleCall_1_2_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getObjectLiteralRule());
								}
								setWithLastConsumed(
									$current,
									"valuet",
									lv_valuet_7_0,
									"org.eclipse.xtext.common.Terminals.INT");
							}
						)
					)
					otherlv_8=']'
					{
						newLeafNode(otherlv_8, grammarAccess.getObjectLiteralAccess().getRightSquareBracketKeyword_1_2_0_2());
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getObjectLiteralAccess().getIndexObjectAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectLiteralRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getObjectLiteralAccess().getNameVariableDeclarationCrossReference_2_1_0());
					}
				)
			)
			(
				((
					'['
					(
						(
							RULE_ID
						)
					)
					']'
				)
				)=>
				(
					otherlv_11='['
					{
						newLeafNode(otherlv_11, grammarAccess.getObjectLiteralAccess().getLeftSquareBracketKeyword_2_2_0_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getObjectLiteralRule());
								}
							}
							otherlv_12=RULE_ID
							{
								newLeafNode(otherlv_12, grammarAccess.getObjectLiteralAccess().getValueVariableDeclarationCrossReference_2_2_0_1_0());
							}
						)
					)
					otherlv_13=']'
					{
						newLeafNode(otherlv_13, grammarAccess.getObjectLiteralAccess().getRightSquareBracketKeyword_2_2_0_2());
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getObjectLiteralAccess().getDatSingleObjectAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectLiteralRule());
						}
					}
					otherlv_15=RULE_ID
					{
						newLeafNode(otherlv_15, grammarAccess.getObjectLiteralAccess().getNameVariableDeclarationCrossReference_3_1_0());
					}
				)
			)
			(
				((
					'['
					(
						(
							(
								ruleNumberLiteral
								    |ruleStringLiteral
							)
						)
					)
					','
					(
						(
							(
								ruleNumberLiteral
								    |ruleStringLiteral
							)
						)
					)
					']'
				)
				)=>
				(
					otherlv_16='['
					{
						newLeafNode(otherlv_16, grammarAccess.getObjectLiteralAccess().getLeftSquareBracketKeyword_3_2_0_0());
					}
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getObjectLiteralAccess().getValue1NumberLiteralParserRuleCall_3_2_0_1_0_0());
								}
								lv_value1_17_1=ruleNumberLiteral
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
									}
									set(
										$current,
										"value1",
										lv_value1_17_1,
										"org.xtext.FLY.NumberLiteral");
									afterParserOrEnumRuleCall();
								}
								    |
								{
									newCompositeNode(grammarAccess.getObjectLiteralAccess().getValue1StringLiteralParserRuleCall_3_2_0_1_0_1());
								}
								lv_value1_17_2=ruleStringLiteral
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
									}
									set(
										$current,
										"value1",
										lv_value1_17_2,
										"org.xtext.FLY.StringLiteral");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
					otherlv_18=','
					{
						newLeafNode(otherlv_18, grammarAccess.getObjectLiteralAccess().getCommaKeyword_3_2_0_2());
					}
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getObjectLiteralAccess().getValue2NumberLiteralParserRuleCall_3_2_0_3_0_0());
								}
								lv_value2_19_1=ruleNumberLiteral
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
									}
									set(
										$current,
										"value2",
										lv_value2_19_1,
										"org.xtext.FLY.NumberLiteral");
									afterParserOrEnumRuleCall();
								}
								    |
								{
									newCompositeNode(grammarAccess.getObjectLiteralAccess().getValue2StringLiteralParserRuleCall_3_2_0_3_0_1());
								}
								lv_value2_19_2=ruleStringLiteral
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
									}
									set(
										$current,
										"value2",
										lv_value2_19_2,
										"org.xtext.FLY.StringLiteral");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
					otherlv_20=']'
					{
						newLeafNode(otherlv_20, grammarAccess.getObjectLiteralAccess().getRightSquareBracketKeyword_3_2_0_4());
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getObjectLiteralAccess().getDatTableObjectAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectLiteralRule());
						}
					}
					otherlv_22=RULE_ID
					{
						newLeafNode(otherlv_22, grammarAccess.getObjectLiteralAccess().getNameVariableDeclarationCrossReference_4_1_0());
					}
				)
			)
			(
				((
					'['
					(
						(
							(
								ruleRangeLiteral
							)
						)
						    |
						(
							(
								ruleNumberLiteral
							)
						)
					)
					','
					(
						(
							ruleRangeLiteral
						)
					)
					']'
				)
				)=>
				(
					otherlv_23='['
					{
						newLeafNode(otherlv_23, grammarAccess.getObjectLiteralAccess().getLeftSquareBracketKeyword_4_2_0_0());
					}
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getObjectLiteralAccess().getRange1RangeLiteralParserRuleCall_4_2_0_1_0_0());
								}
								lv_range1_24_0=ruleRangeLiteral
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
									}
									set(
										$current,
										"range1",
										lv_range1_24_0,
										"org.xtext.FLY.RangeLiteral");
									afterParserOrEnumRuleCall();
								}
							)
						)
						    |
						(
							(
								{
									newCompositeNode(grammarAccess.getObjectLiteralAccess().getRange1_tNumberLiteralParserRuleCall_4_2_0_1_1_0());
								}
								lv_range1_t_25_0=ruleNumberLiteral
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
									}
									set(
										$current,
										"range1_t",
										lv_range1_t_25_0,
										"org.xtext.FLY.NumberLiteral");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
					otherlv_26=','
					{
						newLeafNode(otherlv_26, grammarAccess.getObjectLiteralAccess().getCommaKeyword_4_2_0_2());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getObjectLiteralAccess().getRange2RangeLiteralParserRuleCall_4_2_0_3_0());
							}
							lv_range2_27_0=ruleRangeLiteral
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
								}
								set(
									$current,
									"range2",
									lv_range2_27_0,
									"org.xtext.FLY.RangeLiteral");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_28=']'
					{
						newLeafNode(otherlv_28, grammarAccess.getObjectLiteralAccess().getRightSquareBracketKeyword_4_2_0_4());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleRangeLiteral
entryRuleRangeLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeLiteralRule()); }
	iv_ruleRangeLiteral=ruleRangeLiteral
	{ $current=$iv_ruleRangeLiteral.current; }
	EOF;

// Rule RangeLiteral
ruleRangeLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getRangeLiteralAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_value1_2_0=RULE_INT
				{
					newLeafNode(lv_value1_2_0, grammarAccess.getRangeLiteralAccess().getValue1INTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value1",
						lv_value1_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getRangeLiteralAccess().getColonKeyword_3());
		}
		(
			(
				lv_value2_4_0=RULE_INT
				{
					newLeafNode(lv_value2_4_0, grammarAccess.getRangeLiteralAccess().getValue2INTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value2",
						lv_value2_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getRangeLiteralAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleMathFunction
entryRuleMathFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathFunctionRule()); }
	iv_ruleMathFunction=ruleMathFunction
	{ $current=$iv_ruleMathFunction.current; }
	EOF;

// Rule MathFunction
ruleMathFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMathFunctionAccess().getMathFunctionAction_0(),
					$current);
			}
		)
		otherlv_1='Math'
		{
			newLeafNode(otherlv_1, grammarAccess.getMathFunctionAccess().getMathKeyword_1());
		}
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getMathFunctionAccess().getFullStopKeyword_2());
		}
		(
			(
				lv_feature_3_0=RULE_ID
				{
					newLeafNode(lv_feature_3_0, grammarAccess.getMathFunctionAccess().getFeatureIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMathFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"feature",
						lv_feature_3_0,
						"org.xtext.FLY.ID");
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getMathFunctionAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMathFunctionAccess().getExpressionsArithmeticExpressionParserRuleCall_5_0());
				}
				lv_expressions_5_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMathFunctionRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_5_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getMathFunctionAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMathFunctionAccess().getExpressionsArithmeticExpressionParserRuleCall_6_1_0());
					}
					lv_expressions_7_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMathFunctionRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_7_0,
							"org.xtext.FLY.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getMathFunctionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleVariableFunction
entryRuleVariableFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableFunctionRule()); }
	iv_ruleVariableFunction=ruleVariableFunction
	{ $current=$iv_ruleVariableFunction.current; }
	EOF;

// Rule VariableFunction
ruleVariableFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableFunctionAccess().getVariableFunctionAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableFunctionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableFunctionAccess().getTargetVariableDeclarationCrossReference_1_0());
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableFunctionAccess().getFullStopKeyword_2());
		}
		(
			(
				lv_feature_3_0=RULE_ID
				{
					newLeafNode(lv_feature_3_0, grammarAccess.getVariableFunctionAccess().getFeatureIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"feature",
						lv_feature_3_0,
						"org.xtext.FLY.ID");
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getVariableFunctionAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableFunctionAccess().getExpressionsArithmeticExpressionParserRuleCall_5_0());
				}
				lv_expressions_5_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableFunctionRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_5_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getVariableFunctionAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableFunctionAccess().getExpressionsArithmeticExpressionParserRuleCall_6_1_0());
					}
					lv_expressions_7_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableFunctionRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_7_0,
							"org.xtext.FLY.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getVariableFunctionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleFunctionReturn
entryRuleFunctionReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionReturnRule()); }
	iv_ruleFunctionReturn=ruleFunctionReturn
	{ $current=$iv_ruleFunctionReturn.current; }
	EOF;

// Rule FunctionReturn
ruleFunctionReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionReturnAccess().getFunctionReturnAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionReturnAccess().getReturnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionReturnAccess().getExpressionArithmeticExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionReturnRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	iv_ruleFunctionDefinition=ruleFunctionDefinition
	{ $current=$iv_ruleFunctionDefinition.current; }
	EOF;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionDefinitionAccess().getFunctionDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1='func'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDefinitionAccess().getFuncKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.FLY.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getParametersParamsParserRuleCall_4_0());
				}
				lv_parameters_4_0=ruleParams
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_4_0,
						"org.xtext.FLY.Params");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getParametersParamsParserRuleCall_5_1_0());
					}
					lv_parameters_6_0=ruleParams
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_6_0,
							"org.xtext.FLY.Params");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBodyBlockExpressionParserRuleCall_7_0());
				}
				lv_body_8_0=ruleBlockExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"org.xtext.FLY.BlockExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParams
entryRuleParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamsRule()); }
	iv_ruleParams=ruleParams
	{ $current=$iv_ruleParams.current; }
	EOF;

// Rule Params
ruleParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParamsAccess().getVariableDeclarationAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParamsAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamsRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.FLY.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleChannelSend
entryRuleChannelSend returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChannelSendRule()); }
	iv_ruleChannelSend=ruleChannelSend
	{ $current=$iv_ruleChannelSend.current; }
	EOF;

// Rule ChannelSend
ruleChannelSend returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getChannelSendAccess().getChannelSendAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChannelSendRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getChannelSendAccess().getTargetChannelDeclarationCrossReference_1_0());
				}
			)
		)
		otherlv_2='!'
		{
			newLeafNode(otherlv_2, grammarAccess.getChannelSendAccess().getExclamationMarkKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChannelSendAccess().getExpressionArithmeticExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChannelSendRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleChannelReceive
entryRuleChannelReceive returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChannelReceiveRule()); }
	iv_ruleChannelReceive=ruleChannelReceive
	{ $current=$iv_ruleChannelReceive.current; }
	EOF;

// Rule ChannelReceive
ruleChannelReceive returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getChannelReceiveAccess().getChannelReceiveAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChannelReceiveRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getChannelReceiveAccess().getTargetChannelDeclarationCrossReference_1_0());
				}
			)
		)
		otherlv_2='?'
		{
			newLeafNode(otherlv_2, grammarAccess.getChannelReceiveAccess().getQuestionMarkKeyword_2());
		}
	)
;

// Entry rule entryRuleLocalFunctionCall
entryRuleLocalFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalFunctionCallRule()); }
	iv_ruleLocalFunctionCall=ruleLocalFunctionCall
	{ $current=$iv_ruleLocalFunctionCall.current; }
	EOF;

// Rule LocalFunctionCall
ruleLocalFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLocalFunctionCallAccess().getLocalFunctionCallAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocalFunctionCallRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getLocalFunctionCallAccess().getTargetFunctionDefinitionCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getLocalFunctionCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalFunctionCallAccess().getInputLocalFunctionInputParserRuleCall_3_0());
				}
				lv_input_3_0=ruleLocalFunctionInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalFunctionCallRule());
					}
					set(
						$current,
						"input",
						lv_input_3_0,
						"org.xtext.FLY.LocalFunctionInput");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getLocalFunctionCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLocalFunctionInput
entryRuleLocalFunctionInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalFunctionInputRule()); }
	iv_ruleLocalFunctionInput=ruleLocalFunctionInput
	{ $current=$iv_ruleLocalFunctionInput.current; }
	EOF;

// Rule LocalFunctionInput
ruleLocalFunctionInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLocalFunctionInputAccess().getLocalFunctionInputAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalFunctionInputAccess().getInputsArithmeticExpressionParserRuleCall_1_0());
				}
				lv_inputs_1_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalFunctionInputRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_1_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getLocalFunctionInputAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLocalFunctionInputAccess().getInputsArithmeticExpressionParserRuleCall_2_1_0());
					}
					lv_inputs_3_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLocalFunctionInputRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_3_0,
							"org.xtext.FLY.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFlyFunctionCall
entryRuleFlyFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlyFunctionCallRule()); }
	iv_ruleFlyFunctionCall=ruleFlyFunctionCall
	{ $current=$iv_ruleFlyFunctionCall.current; }
	EOF;

// Rule FlyFunctionCall
ruleFlyFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFlyFunctionCallAccess().getFlyFunctionCallAction_0(),
					$current);
			}
		)
		(
			(
				lv_isAsync_1_0='async'
				{
					newLeafNode(lv_isAsync_1_0, grammarAccess.getFlyFunctionCallAccess().getIsAsyncAsyncKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlyFunctionCallRule());
					}
					setWithLastConsumed($current, "isAsync", true, "async");
				}
			)
		)?
		otherlv_2='fly'
		{
			newLeafNode(otherlv_2, grammarAccess.getFlyFunctionCallAccess().getFlyKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlyFunctionCallRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getFlyFunctionCallAccess().getTargetFunctionDefinitionCrossReference_3_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFlyFunctionCallAccess().getInputFunctionInputParserRuleCall_4_0());
				}
				lv_input_4_0=ruleFunctionInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFlyFunctionCallRule());
					}
					set(
						$current,
						"input",
						lv_input_4_0,
						"org.xtext.FLY.FunctionInput");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='on'
		{
			newLeafNode(otherlv_5, grammarAccess.getFlyFunctionCallAccess().getOnKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlyFunctionCallRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getFlyFunctionCallAccess().getEnvironmentEnvironmentDeclarationCrossReference_6_0());
				}
			)
		)
		(
			(
				(
					lv_is_then_7_0='then'
					{
						newLeafNode(lv_is_then_7_0, grammarAccess.getFlyFunctionCallAccess().getIs_thenThenKeyword_7_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFlyFunctionCallRule());
						}
						setWithLastConsumed($current, "is_then", true, "then");
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFlyFunctionCallRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getFlyFunctionCallAccess().getThenFunctionDefinitionCrossReference_7_1_0());
					}
				)
			)
		)?
		(
			(
				(
					lv_is_thenall_9_0='thenall'
					{
						newLeafNode(lv_is_thenall_9_0, grammarAccess.getFlyFunctionCallAccess().getIs_thenallThenallKeyword_8_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFlyFunctionCallRule());
						}
						setWithLastConsumed($current, "is_thenall", true, "thenall");
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFlyFunctionCallRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getFlyFunctionCallAccess().getThenallFunctionDefinitionCrossReference_8_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFunctionInput
entryRuleFunctionInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionInputRule()); }
	iv_ruleFunctionInput=ruleFunctionInput
	{ $current=$iv_ruleFunctionInput.current; }
	EOF;

// Rule FunctionInput
ruleFunctionInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFunctionInputAccess().getFunctionInputAction_0_0(),
						$current);
				}
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getFunctionInputAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionInputAccess().getExpressionsArithmeticExpressionParserRuleCall_0_2_0());
					}
					lv_expressions_2_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionInputRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_2_0,
							"org.xtext.FLY.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionInputAccess().getCommaKeyword_0_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionInputAccess().getExpressionsArithmeticExpressionParserRuleCall_0_3_1_0());
						}
						lv_expressions_4_0=ruleArithmeticExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionInputRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_4_0,
								"org.xtext.FLY.ArithmeticExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getFunctionInputAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFunctionInputAccess().getFunctionInputAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_is_for_index_7_0='in'
					{
						newLeafNode(lv_is_for_index_7_0, grammarAccess.getFunctionInputAccess().getIs_for_indexInKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionInputRule());
						}
						setWithLastConsumed($current, "is_for_index", true, "in");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionInputAccess().getF_indexArithmeticExpressionParserRuleCall_1_2_0());
					}
					lv_f_index_8_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionInputRule());
						}
						set(
							$current,
							"f_index",
							lv_f_index_8_0,
							"org.xtext.FLY.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	iv_ruleArithmeticExpression=ruleArithmeticExpression
	{ $current=$iv_ruleArithmeticExpression.current; }
	EOF;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getOrExpressionParserRuleCall());
	}
	this_OrExpression_0=ruleOrExpression
	{
		$current = $this_OrExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleOpOr
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getOrExpressionAccess().getFeatureOpOrParserRuleCall_1_0_0_1_0());
							}
							lv_feature_2_0=ruleOpOr
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
								}
								set(
									$current,
									"feature",
									lv_feature_2_0,
									"org.xtext.FLY.OpOr");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.FLY.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpOrRule()); }
	iv_ruleOpOr=ruleOpOr
	{ $current=$iv_ruleOpOr.current.getText(); }
	EOF;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='or'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOpOrAccess().getOrKeyword());
	}
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0());
		}
		this_EqualityExpression_0=ruleEqualityExpression
		{
			$current = $this_EqualityExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleOpAnd
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getAndExpressionAccess().getFeatureOpAndParserRuleCall_1_0_0_1_0());
							}
							lv_feature_2_0=ruleOpAnd
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
								}
								set(
									$current,
									"feature",
									lv_feature_2_0,
									"org.xtext.FLY.OpAnd");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleEqualityExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.FLY.EqualityExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpAndRule()); }
	iv_ruleOpAnd=ruleOpAnd
	{ $current=$iv_ruleOpAnd.current.getText(); }
	EOF;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='and'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOpAndAccess().getAndKeyword());
	}
;

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	iv_ruleEqualityExpression=ruleEqualityExpression
	{ $current=$iv_ruleEqualityExpression.current; }
	EOF;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
		}
		this_RelationalExpression_0=ruleRelationalExpression
		{
			$current = $this_RelationalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleOpEquality
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEqualityExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getFeatureOpEqualityParserRuleCall_1_0_0_1_0());
							}
							lv_feature_2_0=ruleOpEquality
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
								}
								set(
									$current,
									"feature",
									lv_feature_2_0,
									"org.xtext.FLY.OpEquality");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleRelationalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.FLY.RelationalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpEquality
entryRuleOpEquality returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpEqualityRule()); }
	iv_ruleOpEquality=ruleOpEquality
	{ $current=$iv_ruleOpEquality.current.getText(); }
	EOF;

// Rule OpEquality
ruleOpEquality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1());
		}
	)
;

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	iv_ruleRelationalExpression=ruleRelationalExpression
	{ $current=$iv_ruleRelationalExpression.current; }
	EOF;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0());
		}
		this_AdditiveExpression_0=ruleAdditiveExpression
		{
			$current = $this_AdditiveExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleOpCompare
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getRelationalExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getRelationalExpressionAccess().getFeatureOpCompareParserRuleCall_1_0_0_1_0());
							}
							lv_feature_2_0=ruleOpCompare
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
								}
								set(
									$current,
									"feature",
									lv_feature_2_0,
									"org.xtext.FLY.OpCompare");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAdditiveExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.FLY.AdditiveExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpCompare
entryRuleOpCompare returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpCompareRule()); }
	iv_ruleOpCompare=ruleOpCompare
	{ $current=$iv_ruleOpCompare.current.getText(); }
	EOF;

// Rule OpCompare
ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignEqualsSignKeyword_1());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_2());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
		}
		this_MultiplicativeExpression_0=ruleMultiplicativeExpression
		{
			$current = $this_MultiplicativeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleOpAdd
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditiveExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getFeatureOpAddParserRuleCall_1_0_0_1_0());
							}
							lv_feature_2_0=ruleOpAdd
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
								}
								set(
									$current,
									"feature",
									lv_feature_2_0,
									"org.xtext.FLY.OpAdd");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleMultiplicativeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.FLY.MultiplicativeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpAdd
entryRuleOpAdd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpAddRule()); }
	iv_ruleOpAdd=ruleOpAdd
	{ $current=$iv_ruleOpAdd.current.getText(); }
	EOF;

// Rule OpAdd
ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0());
		}
		this_UnaryOperation_0=ruleUnaryOperation
		{
			$current = $this_UnaryOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleOpMulti
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getFeatureOpMultiParserRuleCall_1_0_0_1_0());
							}
							lv_feature_2_0=ruleOpMulti
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
								}
								set(
									$current,
									"feature",
									lv_feature_2_0,
									"org.xtext.FLY.OpMulti");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleUnaryOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.FLY.UnaryOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpMulti
entryRuleOpMulti returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpMultiRule()); }
	iv_ruleOpMulti=ruleOpMulti
	{ $current=$iv_ruleOpMulti.current.getText(); }
	EOF;

// Rule OpMulti
ruleOpMulti returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpMultiAccess().getSolidusKeyword_1());
		}
	)
;

// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperationRule()); }
	iv_ruleUnaryOperation=ruleUnaryOperation
	{ $current=$iv_ruleUnaryOperation.current; }
	EOF;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryOperationAccess().getFeatureOpUnaryParserRuleCall_0_1_0());
					}
					lv_feature_1_0=ruleOpUnary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
						}
						set(
							$current,
							"feature",
							lv_feature_1_0,
							"org.xtext.FLY.OpUnary");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryOperationAccess().getOperandUnaryOperationParserRuleCall_0_2_0());
					}
					lv_operand_2_0=ruleUnaryOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.xtext.FLY.UnaryOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getUnaryOperationAccess().getCastExpressionParserRuleCall_1());
		}
		this_CastExpression_3=ruleCastExpression
		{
			$current = $this_CastExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOpUnary
entryRuleOpUnary returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpUnaryRule()); }
	iv_ruleOpUnary=ruleOpUnary
	{ $current=$iv_ruleOpUnary.current.getText(); }
	EOF;

// Rule OpUnary
ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='not'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpUnaryAccess().getNotKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2());
		}
	)
;

// Entry rule entryRuleCastExpression
entryRuleCastExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCastExpressionRule()); }
	iv_ruleCastExpression=ruleCastExpression
	{ $current=$iv_ruleCastExpression.current; }
	EOF;

// Rule CastExpression
ruleCastExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixOperationParserRuleCall_0());
		}
		this_PostfixOperation_0=rulePostfixOperation
		{
			$current = $this_PostfixOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							(
								'as'
								    |
								'parse'
							)
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getCastExpressionAccess().getCastExpressionTargetAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							(
								lv_op_2_1='as'
								{
									newLeafNode(lv_op_2_1, grammarAccess.getCastExpressionAccess().getOpAsKeyword_1_0_0_1_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getCastExpressionRule());
									}
									setWithLastConsumed($current, "op", lv_op_2_1, null);
								}
								    |
								lv_op_2_2='parse'
								{
									newLeafNode(lv_op_2_2, grammarAccess.getCastExpressionAccess().getOpParseKeyword_1_0_0_1_0_1());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getCastExpressionRule());
									}
									setWithLastConsumed($current, "op", lv_op_2_2, null);
								}
							)
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCastExpressionAccess().getTypeTypeParserRuleCall_1_1_0());
					}
					lv_type_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCastExpressionRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"org.xtext.FLY.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getStringKeyword_0());
		}
		    |
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getIntegerKeyword_1());
		}
		    |
		kw='Date'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getDateKeyword_2());
		}
		    |
		kw='Dat'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getDatKeyword_3());
		}
		    |
		kw='Object'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getObjectKeyword_4());
		}
		    |
		kw='Double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getDoubleKeyword_5());
		}
	)
;

// Entry rule entryRulePostfixOperation
entryRulePostfixOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixOperationRule()); }
	iv_rulePostfixOperation=rulePostfixOperation
	{ $current=$iv_rulePostfixOperation.current; }
	EOF;

// Rule PostfixOperation
rulePostfixOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPostfixOperationAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
				)
				(
					(
						ruleOpPostfix
					)
				)
			)
			)=>
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPostfixOperationAccess().getPostfixOperationOperandAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getPostfixOperationAccess().getFeatureOpPostfixParserRuleCall_1_0_1_0());
						}
						lv_feature_2_0=ruleOpPostfix
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPostfixOperationRule());
							}
							set(
								$current,
								"feature",
								lv_feature_2_0,
								"org.xtext.FLY.OpPostfix");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleOpPostfix
entryRuleOpPostfix returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpPostfixRule()); }
	iv_ruleOpPostfix=ruleOpPostfix
	{ $current=$iv_ruleOpPostfix.current.getText(); }
	EOF;

// Rule OpPostfix
ruleOpPostfix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='++'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpPostfixAccess().getPlusSignPlusSignKeyword_0());
		}
		    |
		kw='--'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpPostfixAccess().getHyphenMinusHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_0());
		}
		this_ParenthesizedExpression_0=ruleParenthesizedExpression
		{
			$current = $this_ParenthesizedExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_1());
		}
		this_LiteralExpression_1=ruleLiteralExpression
		{
			$current = $this_LiteralExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLocalFunctionCallParserRuleCall_2());
		}
		this_LocalFunctionCall_2=ruleLocalFunctionCall
		{
			$current = $this_LocalFunctionCall_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMathFunctionParserRuleCall_3());
		}
		this_MathFunction_3=ruleMathFunction
		{
			$current = $this_MathFunction_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getChannelSendParserRuleCall_4());
		}
		this_ChannelSend_4=ruleChannelSend
		{
			$current = $this_ChannelSend_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getChannelReceiveParserRuleCall_5());
		}
		this_ChannelReceive_5=ruleChannelReceive
		{
			$current = $this_ChannelReceive_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTimeFunctionParserRuleCall_6());
		}
		this_TimeFunction_6=ruleTimeFunction
		{
			$current = $this_TimeFunction_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableFunctionParserRuleCall_7());
		}
		this_VariableFunction_7=ruleVariableFunction
		{
			$current = $this_VariableFunction_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	iv_ruleLiteralExpression=ruleLiteralExpression
	{ $current=$iv_ruleLiteralExpression.current; }
	EOF;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralParserRuleCall_0());
		}
		this_BooleanLiteral_0=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getNumberLiteralParserRuleCall_1());
		}
		this_NumberLiteral_1=ruleNumberLiteral
		{
			$current = $this_NumberLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getStringLiteralParserRuleCall_2());
		}
		this_StringLiteral_2=ruleStringLiteral
		{
			$current = $this_StringLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getObjectLiteralParserRuleCall_3());
		}
		this_ObjectLiteral_3=ruleObjectLiteral
		{
			$current = $this_ObjectLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getVariableLiteralParserRuleCall_4());
		}
		this_VariableLiteral_4=ruleVariableLiteral
		{
			$current = $this_VariableLiteral_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getRangeLiteralParserRuleCall_5());
		}
		this_RangeLiteral_5=ruleRangeLiteral
		{
			$current = $this_RangeLiteral_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getFloatLiteralParserRuleCall_6());
		}
		this_FloatLiteral_6=ruleFloatLiteral
		{
			$current = $this_FloatLiteral_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTimeFunction
entryRuleTimeFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeFunctionRule()); }
	iv_ruleTimeFunction=ruleTimeFunction
	{ $current=$iv_ruleTimeFunction.current; }
	EOF;

// Rule TimeFunction
ruleTimeFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTimeFunctionAccess().getTimeFunctionAction_0(),
					$current);
			}
		)
		otherlv_1='time'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeFunctionAccess().getTimeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeFunctionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getTimeFunctionAccess().getValueVariableDeclarationCrossReference_3_0());
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getTimeFunctionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0='false'
					{
						newLeafNode(lv_value_1_0, grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanLiteralRule());
						}
						setWithLastConsumed($current, "value", lv_value_1_0, "false");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0='true'
					{
						newLeafNode(lv_value_3_0, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanLiteralRule());
						}
						setWithLastConsumed($current, "value", lv_value_3_0, "true");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	iv_ruleFloatLiteral=ruleFloatLiteral
	{ $current=$iv_ruleFloatLiteral.current; }
	EOF;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_FLOAT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFloatLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.xtext.FLY.FLOAT");
				}
			)
		)
	)
;

// Entry rule entryRuleVariableLiteral
entryRuleVariableLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableLiteralRule()); }
	iv_ruleVariableLiteral=ruleVariableLiteral
	{ $current=$iv_ruleVariableLiteral.current; }
	EOF;

// Rule VariableLiteral
ruleVariableLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableLiteralAccess().getVariableLiteralAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableLiteralRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableLiteralAccess().getVariableVariableDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	iv_ruleParenthesizedExpression=ruleParenthesizedExpression
	{ $current=$iv_ruleParenthesizedExpression.current; }
	EOF;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParenthesizedExpressionAccess().getParenthesizedExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionArithmeticExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.FLY.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

RULE_FLOAT : RULE_INT '.' RULE_INT;

RULE_ID : ('a'..'z'|'A'..'Z'|'$') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
