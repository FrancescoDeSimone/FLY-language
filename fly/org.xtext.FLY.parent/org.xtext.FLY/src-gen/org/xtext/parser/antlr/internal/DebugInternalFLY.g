/*
 * generated by Xtext 2.15.0
 */
grammar DebugInternalFLY;

// Rule Fly
ruleFly:
	ruleExpression
	*
;

// Rule Expression
ruleExpression:
	(
		ruleAssignment
		    |
		ruleBlockExpression
		    |
		ruleIfExpression
		    |
		ruleForExpression
		    |
		ruleWhileExpression
		    |
		rulePrintExpression
		    |
		ruleFunctionDefinition
		    |
		ruleFunctionReturn
		    |
		ruleFlyFunctionCall
		    |
		ruleVariableDeclaration
		    |
		ruleChannelSend
		    |
		ruleChannelReceive
		    |
		ruleLocalFunctionCall
		    |
		ruleSortExpression
		    |
		ruleAtomicExpression
		    |
		ruleVariableFunction
	)
;

// Rule AtomicExpression
ruleAtomicExpression:
	'atomic'
	ruleBlockExpression
;

// Rule SortExpression
ruleSortExpression:
	'sort'
	(
		'asc'
		    |
		'desc'
	)
	RULE_ID
	'on'
	RULE_ID
;

// Rule Assignment
ruleAssignment:
	(
		ruleVariableLiteral
		ruleOpAs
		ruleArithmeticExpression
		    |
		ruleObjectLiteral
		ruleOpAs
		ruleArithmeticExpression
	)
;

// Rule OpAs
ruleOpAs:
	(
		'='
		    |
		'+='
	)
;

// Rule PrintExpression
rulePrintExpression:
	'println'
	ruleArithmeticExpression
;

// Rule IfExpression
ruleIfExpression:
	'if'
	'('
	ruleArithmeticExpression
	')'
	ruleExpression
	(
		(
			('else')=>
			'else'
		)
		ruleExpression
	)?
;

// Rule ForExpression
ruleForExpression:
	'for'
	ruleVariableFor
	'in'
	ruleArithmeticExpression
	ruleExpression
;

// Rule VariableFor
ruleVariableFor:
	RULE_ID
;

// Rule WhileExpression
ruleWhileExpression:
	'while'
	'('
	ruleArithmeticExpression
	')'
	ruleExpression
;

// Rule BlockExpression
ruleBlockExpression:
	'{'
	ruleExpression
	*
	'}'
;

// Rule VariableDeclaration
ruleVariableDeclaration:
	(
		'var'
		(
			(RULE_ID
			'='
			(
				ruleArithmeticExpression
				    |
				ruleObject
				    |
				ruleFlyFunctionCall
			)
			)=>
			RULE_ID
			'='
			(
				ruleArithmeticExpression
				    |
				ruleObject
				    |
				ruleFlyFunctionCall
			)
		)
		    |
		'dat'
		(
			(RULE_ID
			'='
			(
				ruleArithmeticExpression
				    |
				ruleObject
			)
			)=>
			RULE_ID
			'='
			(
				ruleArithmeticExpression
				    |
				ruleObject
			)
		)
		    |
		'random'
		(
			(RULE_ID
			)=>
			RULE_ID
		)
		    |
		'env'
		(
			(RULE_ID
			'='
			ruleDeclarationObject
			)=>
			RULE_ID
			'='
			ruleDeclarationObject
		)
		    |
		'bin'
		(
			(RULE_ID
			'='
			ruleDeclarationObject
			)=>
			RULE_ID
			'='
			ruleDeclarationObject
		)
		    |
		'opt'
		(
			(RULE_ID
			'='
			ruleDeclarationObject
			)=>
			RULE_ID
			'='
			ruleDeclarationObject
		)
		    |
		'channel'
		(
			(RULE_ID
			'on'
			RULE_ID
			)=>
			RULE_ID
			'on'
			RULE_ID
		)
	)
;

// Rule Object
ruleObject:
	'['
	ruleFeautureName
	?
	(
		','
		ruleFeautureName
	)*
	']'
;

// Rule DeclarationObject
ruleDeclarationObject:
	'['
	ruleDeclarationFeature
	(
		','
		ruleDeclarationFeature
	)*
	']'
;

// Rule DeclarationFeature
ruleDeclarationFeature:
	RULE_ID
	':'
	(
		RULE_ID
		    |
		RULE_STRING
		    |
		RULE_INT
		    |
		ruleBooleanLiteral
	)
;

// Rule FeautureName
ruleFeautureName:
	(
		RULE_ID
		':'
		ruleArithmeticExpression
		    |
		ruleArithmeticExpression
	)
;

// Rule ObjectLiteral
ruleObjectLiteral:
	(
		RULE_ID
		(
			('.'
			RULE_ID
			)=>
			'.'
			RULE_ID
		)
		    |
		RULE_ID
		(
			('['
			RULE_INT
			']'
			)=>
			'['
			RULE_INT
			']'
		)
		    |
		RULE_ID
		(
			('['
			RULE_ID
			']'
			)=>
			'['
			RULE_ID
			']'
		)
		    |
		RULE_ID
		(
			('['
			(
				ruleNumberLiteral
				    |ruleStringLiteral
			)
			','
			(
				ruleNumberLiteral
				    |ruleStringLiteral
			)
			']'
			)=>
			'['
			(
				ruleNumberLiteral
				    |ruleStringLiteral
			)
			','
			(
				ruleNumberLiteral
				    |ruleStringLiteral
			)
			']'
		)
		    |
		RULE_ID
		(
			('['
			(
				ruleRangeLiteral
				    |
				ruleNumberLiteral
			)
			','
			ruleRangeLiteral
			']'
			)=>
			'['
			(
				ruleRangeLiteral
				    |
				ruleNumberLiteral
			)
			','
			ruleRangeLiteral
			']'
		)
	)
;

// Rule RangeLiteral
ruleRangeLiteral:
	'['
	RULE_INT
	':'
	RULE_INT
	']'
;

// Rule MathFunction
ruleMathFunction:
	'Math'
	'.'
	RULE_ID
	'('
	ruleArithmeticExpression
	?
	(
		','
		ruleArithmeticExpression
	)*
	')'
;

// Rule VariableFunction
ruleVariableFunction:
	RULE_ID
	'.'
	RULE_ID
	'('
	ruleArithmeticExpression
	?
	(
		','
		ruleArithmeticExpression
	)*
	')'
;

// Rule FunctionReturn
ruleFunctionReturn:
	'return'
	ruleArithmeticExpression
;

// Rule FunctionDefinition
ruleFunctionDefinition:
	'func'
	RULE_ID
	'('
	ruleParams
	?
	(
		','
		ruleParams
	)*
	')'
	ruleBlockExpression
;

// Rule Params
ruleParams:
	RULE_ID
;

// Rule ChannelSend
ruleChannelSend:
	RULE_ID
	'!'
	ruleArithmeticExpression
;

// Rule ChannelReceive
ruleChannelReceive:
	RULE_ID
	'?'
;

// Rule LocalFunctionCall
ruleLocalFunctionCall:
	RULE_ID
	'('
	ruleLocalFunctionInput
	')'
;

// Rule LocalFunctionInput
ruleLocalFunctionInput:
	ruleArithmeticExpression
	?
	(
		','
		ruleArithmeticExpression
	)*
;

// Rule FlyFunctionCall
ruleFlyFunctionCall:
	'async'
	?
	'fly'
	RULE_ID
	ruleFunctionInput
	?
	'on'
	RULE_ID
	(
		'then'
		RULE_ID
	)?
	(
		'thenall'
		RULE_ID
	)?
;

// Rule FunctionInput
ruleFunctionInput:
	(
		'('
		ruleArithmeticExpression
		?
		(
			','
			ruleArithmeticExpression
		)*
		')'
		    |
		'in'
		ruleArithmeticExpression
	)
;

// Rule ArithmeticExpression
ruleArithmeticExpression:
	ruleOrExpression
;

// Rule OrExpression
ruleOrExpression:
	ruleAndExpression
	(
		(
			(ruleOpOr
			)=>
			ruleOpOr
		)
		ruleAndExpression
	)*
;

// Rule OpOr
ruleOpOr:
	'or'
;

// Rule AndExpression
ruleAndExpression:
	ruleEqualityExpression
	(
		(
			(ruleOpAnd
			)=>
			ruleOpAnd
		)
		ruleEqualityExpression
	)*
;

// Rule OpAnd
ruleOpAnd:
	'and'
;

// Rule EqualityExpression
ruleEqualityExpression:
	ruleRelationalExpression
	(
		(
			(ruleOpEquality
			)=>
			ruleOpEquality
		)
		ruleRelationalExpression
	)*
;

// Rule OpEquality
ruleOpEquality:
	(
		'=='
		    |
		'!='
	)
;

// Rule RelationalExpression
ruleRelationalExpression:
	ruleAdditiveExpression
	(
		(
			(ruleOpCompare
			)=>
			ruleOpCompare
		)
		ruleAdditiveExpression
	)*
;

// Rule OpCompare
ruleOpCompare:
	(
		'>='
		    |
		'<='
		    |
		'<'
		    |
		'>'
	)
;

// Rule AdditiveExpression
ruleAdditiveExpression:
	ruleMultiplicativeExpression
	(
		(
			(ruleOpAdd
			)=>
			ruleOpAdd
		)
		ruleMultiplicativeExpression
	)*
;

// Rule OpAdd
ruleOpAdd:
	(
		'+'
		    |
		'-'
	)
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression:
	ruleUnaryOperation
	(
		(
			(ruleOpMulti
			)=>
			ruleOpMulti
		)
		ruleUnaryOperation
	)*
;

// Rule OpMulti
ruleOpMulti:
	(
		'*'
		    |
		'/'
	)
;

// Rule UnaryOperation
ruleUnaryOperation:
	(
		ruleOpUnary
		ruleUnaryOperation
		    |
		ruleCastExpression
	)
;

// Rule OpUnary
ruleOpUnary:
	(
		'not'
		    |
		'-'
		    |
		'+'
	)
;

// Rule CastExpression
ruleCastExpression:
	rulePostfixOperation
	(
		(
			((
				'as'
				    |
				'parse'
			)
			)=>
			(
				'as'
				    |
				'parse'
			)
		)
		ruleType
	)*
;

// Rule Type
ruleType:
	(
		'String'
		    |
		'Integer'
		    |
		'Date'
		    |
		'Dat'
		    |
		'Object'
		    |
		'Double'
	)
;

// Rule PostfixOperation
rulePostfixOperation:
	rulePrimaryExpression
	(
		(ruleOpPostfix
		)=>
		ruleOpPostfix
	)?
;

// Rule OpPostfix
ruleOpPostfix:
	(
		'++'
		    |
		'--'
	)
;

// Rule PrimaryExpression
rulePrimaryExpression:
	(
		ruleParenthesizedExpression
		    |
		ruleLiteralExpression
		    |
		ruleLocalFunctionCall
		    |
		ruleMathFunction
		    |
		ruleChannelSend
		    |
		ruleChannelReceive
		    |
		ruleTimeFunction
		    |
		ruleVariableFunction
	)
;

// Rule LiteralExpression
ruleLiteralExpression:
	(
		ruleBooleanLiteral
		    |
		ruleNumberLiteral
		    |
		ruleStringLiteral
		    |
		ruleObjectLiteral
		    |
		ruleVariableLiteral
		    |
		ruleRangeLiteral
		    |
		ruleFloatLiteral
	)
;

// Rule TimeFunction
ruleTimeFunction:
	'time'
	'('
	RULE_ID
	*
	')'
;

// Rule BooleanLiteral
ruleBooleanLiteral:
	(
		'false'
		    |
		'true'
	)
;

// Rule NumberLiteral
ruleNumberLiteral:
	RULE_INT
;

// Rule StringLiteral
ruleStringLiteral:
	RULE_STRING
;

// Rule FloatLiteral
ruleFloatLiteral:
	RULE_FLOAT
;

// Rule VariableLiteral
ruleVariableLiteral:
	RULE_ID
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression:
	'('
	ruleArithmeticExpression
	')'
;

RULE_FLOAT : RULE_INT '.' RULE_INT;

RULE_ID : ('a'..'z'|'A'..'Z'|'$') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
